var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/IFrame.html",[0,0.652,1,1.162]],["body/interfaces/IFrame.html",[0,0.742,1,2.217,2,1.453,3,0.47,4,0.47,5,0.411,6,1.969,7,2.504,8,0.411,9,3.774,10,0.252,11,2.465,12,3.774,13,3.256,14,3.256,15,3.256,16,1.718,17,4.56,18,3.256,19,2.082,20,2.56,21,1.649,22,0.391,23,0.868,24,1.564,25,3.774,26,0.249,27,0.692,28,3.831,29,3.303,30,4.718,31,5.365,32,3.971,33,0.576,34,0.037,35,1.121,36,1.385,37,3.256,38,1.718,39,4.56,40,1.738,41,3.256,42,2.56,43,4.56,44,4.56,45,1.718,46,3.774,47,0.668,48,1.969,49,2.903,50,2.903,51,1.564,52,0.611,53,2.56,54,2.903,55,0.027,56,0.027]],["title/interfaces/IMessage.html",[0,0.652,24,1.058]],["body/interfaces/IMessage.html",[0,0.75,1,1.92,2,1.47,3,0.475,4,0.475,5,0.415,6,1.991,8,0.415,10,0.154,20,2.578,21,1.448,22,0.437,23,0.97,24,1.848,25,3.801,26,0.252,27,0.818,29,1.991,33,0.515,34,0.037,36,1.315,45,1.731,47,0.875,48,1.991,49,2.935,51,1.576,52,0.616,55,0.027,56,0.027,57,2.532,58,2.319,59,2.509,60,2.578,61,1.47,62,2.89,63,4.593,64,1.089,65,3.205,66,1.625,67,2.097,68,4.082,69,4.732,70,1.531,71,4.459,72,5.388,73,3.847,74,2.03,75,3.39,76,4.593,77,4.593,78,2.935,79,3.547,80,2.935,81,3.547,82,3.547,83,3.547,84,2.935,85,3.547,86,1.903,87,3.547,88,2.532]],["title/interfaces/IPublishParams.html",[0,0.652,89,1.278]],["body/interfaces/IPublishParams.html",[0,1.053,1,1.517,2,0.946,3,0.306,4,0.306,5,0.267,8,0.267,10,0.099,11,1.401,16,1.274,21,1.464,22,0.463,23,1.029,24,1.381,26,0.162,27,0.513,28,3.393,29,2.969,30,1.889,32,3.178,33,0.57,34,0.038,35,1.104,36,1.285,40,1.814,41,2.874,47,0.848,48,1.281,51,1.527,52,0.771,53,1.281,55,0.02,56,0.02,59,0.946,61,1.969,78,1.889,86,2.134,88,2.413,89,1.844,90,1.436,91,1.274,92,2.797,93,2.874,94,2.413,95,1.217,96,2.513,97,3.684,98,2.413,99,2.797,100,0.96,101,2.797,102,2.797,103,2.8,104,2.797,105,1.543,106,1.897,107,3.38,108,2.282,109,1.274,110,1.629,111,2.17,112,2.4,113,1.897,114,1.629,115,2.413,116,3.553,117,1.629,118,2.282,119,3.38,120,2.282,121,2.413,122,3.38,123,3.38,124,2.282,125,2.282,126,2.413,127,2.282,128,1.629,129,1.436,130,1.629,131,0.783,132,3.38,133,3.393,134,3.38,135,2.282,136,1.629,137,1.281,138,2.282,139,3.38,140,3.38,141,4.451,142,4.753,143,2.282,144,1.281,145,2.282,146,2.282,147,2.282,148,1.629,149,3.677,150,2.282,151,4.451,152,3.393,153,2.282,154,2.282,155,2.282,156,2.282,157,1.159,158,1.889,159,2.126,160,2.282,161,2.282,162,1.629,163,2.282,164,1.897,165,2.033,166,1.889,167,2.797,168,2.282,169,2.248,170,2.282,171,1.629,172,2.282,173,0.86,174,2.282,175,2.413,176,1.889,177,3.38,178,1.889,179,1.889,180,1.889,181,1.436,182,1.889,183,1.629,184,1.889,185,1.889,186,1.889,187,2.282,188,1.152,189,1.436,190,1.152,191,1.436,192,1.152,193,1.152,194,1.436,195,1.436,196,1.436,197,1.436,198,1.436,199,1.436,200,1.889,201,1.889,202,1.889,203,1.889,204,1.889,205,1.889,206,1.889,207,1.889]],["title/interfaces/IRxStompPublishParams.html",[0,0.652,208,1.94]],["body/interfaces/IRxStompPublishParams.html",[0,0.866,2,1.696,3,0.548,4,0.548,5,0.479,8,0.479,10,0.236,16,1.894,22,0.431,23,0.779,26,0.291,27,0.763,33,0.413,34,0.037,40,1.867,47,0.779,52,0.548,55,0.03,56,0.03,59,2.083,67,2.296,89,2.255,95,1.063,100,1.428,105,2.296,106,3.186,165,2.866,208,3.163,209,1.696,210,2.922,211,1.404,212,2.575,213,2.922,214,3.589,215,2.822,216,5.027,217,1.428,218,4.697,219,5.027,220,5.027,221,4.16,222,3.589,223,5.027,224,5.027,225,4.093]],["title/interfaces/ITransaction.html",[0,0.652,226,2.202]],["body/interfaces/ITransaction.html",[0,0.853,2,1.671,3,0.54,4,0.54,5,0.472,6,2.264,8,0.472,19,2.275,20,2.797,22,0.346,23,0.768,26,0.286,27,0.756,33,0.546,34,0.037,35,1.029,52,0.54,55,0.029,56,0.029,64,1.075,66,1.648,68,3.557,69,4.123,70,1.604,86,2.064,226,3.557,227,3.337,228,5.989,229,3.337,230,3.337,231,4.033,232,4.033,233,4.033,234,5.91,235,5.91,236,2.34,237,4.982,238,4.982,239,3.134,240,4.123,241,4.033,242,4.033]],["title/interfaces/IWatchParams.html",[0,0.652,243,1.731]],["body/interfaces/IWatchParams.html",[0,0.564,2,1.106,3,0.358,4,0.358,5,0.312,8,0.312,10,0.164,16,1.979,21,1.618,22,0.324,23,0.508,26,0.189,27,0.575,33,0.484,34,0.038,35,0.963,36,1.45,38,1.427,40,1.509,45,1.805,47,0.508,52,0.358,53,2.688,55,0.022,56,0.022,59,1.984,60,2.688,61,1.984,95,1.168,96,2.875,100,1.076,103,2.382,105,1.729,173,1.427,209,1.106,210,1.905,213,1.905,215,2.125,217,1.076,221,3.133,243,2.125,244,1.679,245,4.789,246,5.253,247,4.789,248,5.253,249,3.786,250,3.786,251,4.789,252,3.133,253,2.703,254,2.703,255,2.703,256,3.786,257,2.703,258,3.786,259,3.786,260,3.786,261,2.521,262,5.253,263,2.177,264,4.789,265,4.789,266,4.789,267,4.789,268,3.963,269,3.963,270,4.789,271,2.688,272,2.703,273,3.786,274,2.382,275,2.125,276,3.786,277,2.703,278,3.786,279,2.125,280,2.703,281,3.786,282,3.133,283,2.703,284,3.786,285,3.786,286,5.253,287,3.013,288,2.125,289,1.912,290,2.703,291,3.786,292,3.786,293,3.786,294,3.786]],["title/injectables/InjectableRxStompConfig.html",[295,0.876,296,1.557]],["body/injectables/InjectableRxStompConfig.html",[3,0.268,4,0.268,5,0.234,8,0.234,10,0.235,11,1.267,16,1.855,18,1.426,19,1.696,20,1.121,21,1.055,22,0.262,26,0.142,27,0.464,33,0.585,34,0.037,35,0.38,36,0.789,38,1.152,40,1.539,42,1.121,47,0.582,51,1.274,52,0.268,55,0.018,56,0.018,61,1.961,64,0.901,66,0.869,67,1.396,70,1.443,74,0.753,95,1.297,96,1.544,100,0.869,105,2.249,109,1.568,111,0.912,112,1.008,113,1.121,131,1.274,137,1.716,144,2.085,157,0.685,165,2.101,169,2.265,173,1.568,181,1.256,188,1.544,189,1.923,190,1.544,191,1.923,192,1.544,193,1.544,194,1.923,195,1.923,196,1.923,197,1.923,198,1.923,199,1.923,211,0.685,217,0.567,236,0.828,253,2.183,257,1.426,261,1.396,263,1.724,271,1.716,272,1.426,274,1.256,279,1.121,282,2.53,283,2.971,295,1.183,296,1.544,297,1.008,298,0.753,299,1.256,300,0.828,301,1.049,302,0.955,303,0.375,304,1.4,305,2.251,306,2.53,307,2.183,308,2.53,309,1.544,310,2.101,311,2.53,312,2.53,313,2.53,314,2.971,315,1.267,316,4.162,317,1.876,318,3.057,319,3.057,320,2.085,321,2.53,322,3.057,323,3.057,324,3.057,325,2.183,326,3.057,327,3.057,328,3.057,329,2.53,330,1.915,331,2.183,332,1.716,333,2.183,334,2.53,335,1.716,336,2.183,337,3.249,338,1.645,339,1.997,340,1.426,341,1.997,342,1.049,343,1.653,344,1.653,345,2.337,346,2.183,347,1.256,348,1.653,349,1.256,350,1.653,351,1.716,352,1.121,353,1.121,354,1.653,355,1.653,356,1.653,357,1.653,358,1.653,359,1.653,360,1.008,361,1.426,362,1.256,363,1.653,364,3.529,365,1.426,366,1.997,367,1.426,368,1.653,369,1.653,370,1.426,371,2.53,372,1.923,373,2.337,374,1.997,375,1.653,376,2.53,377,1.256,378,1.256,379,1.653,380,1.653,381,2.183,382,1.426,383,1.653,384,1.653,385,1.256,386,0.912,387,1.256,388,1.426,389,1.997,390,1.653,391,1.256,392,1.653,393,3.444,394,2.618,395,1.653,396,1.653,397,1.426,398,1.997,399,1.923,400,1.653,401,1.653,402,1.256,403,1.653,404,1.653,405,1.653,406,1.653,407,1.653,408,1.653,409,1.426,410,1.653,411,1.256,412,1.653,413,2.53,414,1.716,415,1.121,416,1.997,417,2.53,418,1.008,419,1.653,420,1.997,421,1.426,422,1.997,423,1.653,424,1.426,425,1.997,426,1.426,427,1.997,428,1.653,429,2.53,430,2.53,431,3.074,432,1.426,433,1.997,434,2.53,435,1.426,436,1.997,437,1.653,438,1.256,439,1.653,440,1.653,441,1.653,442,1.653,443,1.653,444,1.653,445,1.426,446,1.716,447,1.426,448,1.653,449,1.653,450,1.426,451,1.426,452,1.997,453,1.426,454,1.997,455,1.653,456,1.426,457,1.997,458,1.121,459,1.653,460,1.256,461,1.426,462,1.653,463,1.653,464,1.653,465,1.653,466,2.183,467,1.256,468,1.653,469,1.653,470,1.256,471,1.997,472,1.256,473,1.426,474,2.183,475,2.183,476,1.653,477,1.653,478,1.696,479,1.653,480,1.653,481,1.426,482,1.997,483,1.426,484,1.426,485,2.183,486,1.426,487,1.653,488,1.653,489,1.256,490,1.426,491,0.828,492,2.53,493,1.653,494,1.426,495,1.653,496,1.256,497,1.121]],["title/injectables/InjectableRxStompRPCConfig.html",[295,0.876,498,1.557]],["body/injectables/InjectableRxStompRPCConfig.html",[3,0.512,4,0.512,5,0.448,8,0.448,10,0.209,22,0.413,26,0.271,27,0.731,33,0.487,34,0.037,35,0.728,47,0.918,51,1.81,52,0.646,55,0.028,56,0.028,64,1.055,67,2.2,95,1.172,100,1.086,128,2.73,129,2.405,211,1.311,217,1.086,261,1.746,295,1.574,297,1.93,298,1.441,299,2.405,300,1.584,301,1.9,302,1.505,303,0.386,304,1.816,310,2.433,315,2.296,330,1.73,337,2.705,338,1.369,491,1.584,497,2.146,498,2.884,499,1.584,500,2.989,501,3.988,502,3.44,503,3.44,504,3.44,505,3.988,506,3.988,507,3.823,508,1.311,509,3.44,510,3.032,511,2.73,512,2.73,513,2.73,514,3.164,515,2.405,516,3.164,517,2.405,518,3.823,519,3.164,520,1.93,521,2.146]],["title/classes/RxStompConfig.html",[303,0.312,305,1.162]],["body/classes/RxStompConfig.html",[1,0.88,3,0.191,4,0.191,5,0.167,8,0.167,9,1.932,10,0.257,11,1.424,16,1.955,18,1.667,19,1.066,20,1.311,21,1.159,22,0.2,23,0.271,26,0.101,27,0.354,33,0.549,34,0.038,35,0.566,36,0.98,40,1.646,42,1.311,45,0.88,47,0.445,52,0.191,55,0.014,56,0.014,58,1.179,61,2.079,64,0.655,66,0.977,70,1.324,74,0.88,86,0.589,95,1.259,96,1.736,100,0.977,105,2.369,109,1.756,111,1.066,112,1.179,113,1.667,131,1.4,137,1.93,144,2.29,157,0.801,165,2.273,169,2.422,181,1.469,188,1.5,189,1.868,190,1.5,191,1.868,192,1.5,193,1.5,194,1.868,195,1.868,196,1.868,197,1.868,198,1.868,199,1.868,209,2.272,211,0.488,217,0.663,236,0.967,253,2.454,257,1.667,263,1.865,271,1.93,272,1.667,274,1.469,279,1.311,300,0.589,303,0.144,304,0.88,305,0.88,310,1.736,317,1.736,320,1.311,330,1.908,331,2.12,332,1.667,333,2.12,334,2.458,335,1.667,336,2.12,338,1.544,340,1.667,342,1.544,343,1.932,344,1.932,345,2.567,346,2.454,347,1.469,348,1.932,349,0.895,350,1.932,351,1.93,352,1.311,353,1.311,354,1.932,355,1.932,356,1.932,357,1.932,358,1.932,359,1.932,360,1.179,361,1.667,362,1.469,363,1.932,364,3.648,365,1.667,367,1.667,368,1.932,369,1.932,370,1.667,371,2.845,372,2.163,373,2.567,375,1.932,376,2.845,377,1.469,378,1.469,379,1.932,380,1.932,381,2.454,382,1.667,383,1.932,384,1.932,385,1.469,386,1.066,387,1.469,388,1.667,390,1.932,391,1.469,392,1.932,393,3.725,394,2.831,395,1.932,396,1.932,397,1.667,399,2.388,400,1.932,401,1.932,402,1.469,403,1.932,404,1.932,405,1.932,406,1.932,407,1.932,408,1.932,409,1.667,410,1.932,411,1.469,412,1.932,413,2.845,414,1.93,415,1.311,417,2.845,418,1.5,419,1.932,421,1.667,423,1.932,424,1.667,426,1.667,428,1.932,429,2.845,430,2.845,431,3.377,432,1.667,434,2.845,435,1.667,437,1.932,438,1.469,439,1.932,440,1.932,441,1.932,442,1.932,443,1.932,444,1.932,445,1.667,446,1.93,447,1.667,448,1.932,449,1.932,450,1.667,451,1.667,453,1.667,455,1.932,456,1.667,458,1.311,459,1.932,460,1.469,461,1.667,462,1.932,463,1.932,464,1.932,465,1.932,466,2.454,467,1.469,468,1.932,469,1.932,470,1.469,472,1.469,473,1.667,474,2.454,475,2.71,476,1.932,477,1.932,478,1.863,479,1.932,480,1.177,481,1.667,483,1.667,484,1.667,485,2.454,486,2.454,487,1.932,488,1.932,489,1.469,490,1.667,491,0.967,492,2.845,493,1.932,494,1.667,495,1.932,496,1.469,522,0.536,523,2.768,524,2.335,525,2.335,526,1.469,527,1.177,528,1.422,529,1.422,530,1.422,531,1.177,532,1.422,533,1.422,534,1.177,535,1.422,536,1.177,537,1.422,538,1.422,539,1.422,540,1.177,541,1.422,542,1.177,543,1.422,544,1.422,545,0.895,546,1.422,547,2.335,548,2.12,549,1.932,550,1.177,551,1.177,552,1.015,553,1.177,554,1.177,555,1.177,556,1.177,557,1.932,558,1.177,559,1.177,560,1.177,561,1.177,562,1.177,563,1.177,564,1.422,565,1.422,566,1.422,567,1.422,568,1.422,569,1.422,570,1.177,571,1.422]],["title/classes/RxStompRPC.html",[303,0.312,572,1.731]],["body/classes/RxStompRPC.html",[3,0.335,4,0.335,5,0.293,8,0.293,10,0.23,21,1.321,22,0.31,23,0.476,24,1.456,26,0.178,33,0.429,34,0.038,36,0.933,40,0.858,45,1.362,47,0.939,52,0.335,55,0.021,56,0.021,58,1.826,59,1.037,60,2.611,64,1.033,66,1.027,74,1.752,89,2.196,91,1.6,95,0.898,106,1.404,131,1.456,157,1.24,173,1.362,209,1.927,211,1.24,217,1.027,236,2.196,239,1.574,261,1.939,263,2.044,269,2.07,274,2.274,288,1.404,289,2.596,290,2.581,301,1.595,303,0.253,309,1.826,310,2.348,315,1.927,330,1.606,338,1.206,342,1.763,352,1.404,370,1.786,499,2.327,500,2.348,502,3.32,503,3.67,504,3.32,508,1.456,509,1.786,510,1.574,511,1.786,512,1.786,513,1.786,517,2.274,521,2.03,522,0.943,523,2.348,545,1.574,572,2.03,573,2.07,574,2.992,575,3.616,576,3.616,577,1.826,578,2.926,579,2.03,580,2.07,581,3.849,582,2.502,583,2.03,584,1.574,585,2.992,586,2.502,587,3.849,588,3.103,589,2.992,590,2.581,591,2.992,592,2.992,593,3.513,594,2.992,595,2.502,596,2.274,597,2.581,598,2.992,599,2.992,600,3.849,601,2.581,602,2.502,603,2.502,604,2.581,605,2.502,606,3.031,607,2.502,608,4.651,609,5.301,610,2.502,611,2.502,612,2.502,613,2.502,614,2.502,615,1.786,616,3.616,617,1.574,618,3.616,619,2.502,620,3.616,621,4.246,622,3.616,623,3.616,624,3.616,625,2.502,626,2.502,627,2.502,628,2.502,629,2.502,630,2.502,631,4.246,632,3.616,633,2.502,634,2.502,635,2.502,636,2.502,637,2.502,638,3.616,639,4.246,640,3.616,641,2.502,642,2.502,643,2.502,644,2.502,645,2.502,646,2.502,647,2.502,648,2.502]],["title/classes/RxStompRPCConfig.html",[303,0.312,500,1.557]],["body/classes/RxStompRPCConfig.html",[3,0.494,4,0.494,5,0.432,8,0.432,10,0.237,22,0.316,23,0.702,24,1.265,26,0.262,27,0.715,33,0.524,34,0.037,35,0.988,47,0.988,52,0.631,55,0.028,56,0.028,64,1.118,66,1.475,95,1.157,100,1.339,209,2.151,211,1.265,217,1.048,288,2.071,289,2.379,300,1.529,303,0.373,310,2.761,315,2.434,330,1.804,338,1.339,342,1.78,499,2.341,500,2.379,505,4.525,506,4.295,508,1.616,509,3.904,510,3.44,511,3.363,512,3.363,513,3.363,514,3.899,515,2.964,516,3.899,517,3.265,519,3.899,522,1.39,523,2.621,545,2.321,649,3.363,650,3.689,651,3.689]],["title/injectables/RxStompRPCService.html",[295,0.876,652,1.94]],["body/injectables/RxStompRPCService.html",[3,0.449,4,0.449,5,0.392,8,0.392,10,0.229,21,0.951,22,0.379,26,0.238,33,0.5,34,0.037,45,1.261,47,1.003,51,1.517,52,0.449,55,0.026,56,0.026,58,2.233,64,1.003,66,0.951,67,2.02,74,1.261,89,2.183,91,1.866,95,1.159,131,1.148,148,3.158,157,1.517,211,1.517,217,0.951,236,1.833,289,2.233,290,2.39,295,1.557,297,1.69,298,1.667,301,1.807,302,1.381,303,0.338,304,1.667,315,2.183,320,2.483,330,1.646,337,2.483,338,1.407,342,1.699,353,2.483,497,1.879,498,2.661,499,2.27,501,3.66,502,3.158,503,3.158,504,3.158,508,1.699,521,1.879,572,3.222,577,2.233,578,3.116,579,2.483,580,2.77,581,4.534,583,2.483,584,2.106,585,2.77,587,3.66,588,2.783,589,2.77,590,2.39,591,2.77,592,2.77,593,3.66,594,2.77,596,2.106,597,2.39,598,2.77,599,2.77,600,3.66,601,2.39,649,2.39,652,2.783,653,2.783,654,2.77,655,2.406,656,3.348,657,4.423,658,3.66,659,4.423,660,3.348,661,3.348,662,3.348,663,4.423,664,3.348]],["title/injectables/RxStompService.html",[295,0.876,655,1.408]],["body/injectables/RxStompService.html",[1,1.412,3,0.221,4,0.221,5,0.193,8,0.193,10,0.248,11,1.972,13,1.177,14,1.177,15,3.272,16,2.073,19,1.499,21,1.241,22,0.225,24,0.565,26,0.117,27,0.399,28,1.878,29,2.572,32,1.878,33,0.556,34,0.036,35,0.831,38,1.237,40,0.565,41,2.344,42,0.925,45,0.621,47,0.501,51,1.286,52,0.221,53,3.088,55,0.015,56,0.015,59,1.809,61,1.553,62,1.037,64,0.906,65,1.037,66,0.748,67,1.201,70,1.164,73,2.344,74,1.237,75,2.577,86,1.809,89,0.683,91,1.645,92,1.364,94,1.177,95,0.793,96,1.328,97,2.177,98,1.177,100,0.468,101,3.792,102,3.39,103,2.994,104,2.717,105,1.499,106,1.477,111,0.753,112,1.658,114,1.878,117,3.272,131,1.126,136,2.925,137,1.477,152,1.177,157,1.572,159,1.037,162,1.177,164,0.925,165,2.477,169,0.832,171,1.177,173,0.621,188,0.832,190,0.832,192,0.832,193,0.832,208,2.066,212,2.066,214,1.177,215,0.925,217,0.468,218,1.364,222,3.118,236,1.09,239,2.066,243,1.843,244,1.655,255,1.177,261,0.753,263,0.683,271,1.477,275,2.104,277,1.177,279,1.477,280,1.177,287,1.037,288,0.925,289,1.658,295,1.065,297,0.832,298,0.621,301,0.902,302,0.822,303,0.332,304,1.237,305,1.237,306,2.177,307,1.878,308,2.177,309,2.068,310,1.328,311,2.177,312,2.177,313,2.177,314,2.676,315,1.09,317,1.328,320,1.477,330,1.853,332,0.925,335,0.925,337,3.056,338,1.547,342,1.99,347,1.037,349,1.655,351,0.925,352,0.925,353,2.572,362,1.037,364,3.086,372,1.037,377,1.037,378,1.037,385,1.655,386,1.499,387,2.066,391,1.655,394,1.037,399,2.358,402,1.037,411,2.577,414,0.925,415,1.477,438,1.655,446,1.843,447,1.177,458,0.925,460,1.655,467,1.037,470,2.358,472,1.037,478,0.753,484,1.177,489,1.037,490,1.177,491,1.361,497,0.925,508,1.286,515,1.037,526,1.037,577,1.328,578,2.066,588,2.066,596,1.037,604,2.925,606,1.177,615,2.344,617,2.066,653,1.037,655,1.201,665,1.364,666,1.477,667,3.34,668,2.177,669,2.177,670,2.177,671,2.177,672,2.177,673,2.177,674,2.177,675,2.717,676,2.177,677,2.717,678,2.177,679,1.364,680,1.364,681,1.364,682,1.364,683,1.364,684,1.364,685,1.177,686,2.717,687,2.177,688,1.364,689,1.364,690,1.364,691,1.364,692,1.364,693,1.364,694,1.364,695,1.364,696,1.364,697,1.364,698,2.177,699,1.364,700,1.364,701,1.364,702,1.364,703,1.364,704,1.177,705,1.364,706,1.364,707,1.364,708,1.177,709,1.364,710,1.364,711,1.364,712,1.364,713,1.364,714,1.648,715,1.648,716,1.364,717,1.648,718,1.648,719,1.648,720,1.648,721,1.364,722,1.648,723,1.648,724,1.364,725,1.648,726,1.648,727,1.648,728,1.648,729,2.177,730,1.648,731,2.676,732,1.364,733,2.177,734,1.648,735,1.648,736,1.648,737,1.364,738,2.177,739,1.364,740,1.364,741,1.177,742,2.177,743,1.648,744,3.102,745,3.102,746,2.631,747,1.648,748,1.648,749,3.284,750,2.631,751,1.648,752,1.648,753,1.364,754,2.631,755,1.648,756,1.648,757,1.648,758,2.177,759,1.648,760,1.364,761,1.364,762,2.676,763,2.177,764,2.177,765,1.364,766,1.364,767,1.364,768,1.364,769,1.364,770,1.364,771,1.878,772,1.364,773,1.177,774,1.364,775,2.177,776,1.364,777,1.364,778,1.364,779,2.177,780,1.364,781,1.364,782,1.364,783,1.364,784,1.364,785,1.364,786,1.364,787,1.364,788,1.364,789,1.364,790,1.364,791,3.102,792,1.364,793,1.878,794,1.364,795,2.717,796,1.364,797,1.364,798,1.364,799,1.364,800,1.364,801,2.177,802,2.177,803,1.364,804,1.364,805,1.364,806,1.364,807,2.717,808,1.364,809,1.364,810,1.364,811,1.364,812,1.364,813,1.364,814,3.39,815,1.364,816,1.878,817,1.364,818,1.364,819,2.177,820,1.364,821,1.364,822,2.177,823,2.177,824,1.364,825,1.177,826,1.364,827,1.177,828,1.364,829,1.364,830,3.39,831,1.364,832,1.364,833,3.102,834,1.177,835,1.364,836,2.177,837,1.364,838,1.364,839,1.364,840,1.177,841,1.364,842,1.364,843,1.364,844,1.364,845,1.364,846,1.364,847,1.364,848,1.364,849,1.364,850,1.364,851,1.177,852,1.364,853,1.364,854,1.364,855,1.364,856,1.177]],["title/classes/Stomp.html",[10,0.134,303,0.312]],["body/classes/Stomp.html",[3,0.291,4,0.291,5,0.254,8,0.254,10,0.226,19,1.487,22,0.279,23,0.62,26,0.154,27,0.494,33,0.395,34,0.038,35,1.015,38,0.818,47,0.744,51,1.596,52,0.291,55,0.019,56,0.019,58,2.192,64,0.62,66,0.925,70,1.481,74,0.818,75,2.927,91,1.227,95,0.689,100,0.617,109,0.818,110,1.549,111,0.991,130,3.721,131,0.744,133,1.549,144,3.169,149,2.79,152,2.79,157,1.117,159,2.731,162,2.324,173,1.964,175,1.549,230,1.796,240,2.694,254,2.324,261,1.784,263,2.099,302,1.017,303,0.512,304,1.964,309,2.691,325,2.79,330,1.22,338,1.11,352,1.828,367,3.488,373,2.048,382,3.321,415,1.828,418,2.961,445,3.805,446,1.218,458,1.828,478,2.479,483,2.324,485,2.324,486,2.324,491,1.928,496,2.731,508,1.34,520,2.558,521,1.218,522,0.818,548,1.549,549,3.234,552,2.324,574,1.796,577,1.644,583,1.828,584,1.365,617,2.731,667,2.048,708,1.549,724,2.694,753,4.043,762,2.324,773,1.549,793,1.549,825,2.324,857,1.796,858,3.256,859,5.211,860,5.211,861,4.411,862,3.907,863,2.17,864,3.256,865,3.256,866,3.256,867,3.256,868,4.342,869,2.17,870,3.256,871,5.066,872,2.17,873,2.694,874,3.256,875,3.256,876,2.17,877,3.85,878,3.256,879,2.17,880,3.256,881,3.256,882,3.256,883,3.907,884,3.256,885,3.256,886,3.256,887,2.694,888,3.256,889,3.256,890,3.256,891,3.256,892,3.256,893,3.256,894,3.256,895,3.256,896,3.256,897,4.342,898,2.17,899,2.17,900,1.796,901,2.17,902,2.17,903,2.17,904,2.17,905,2.17,906,2.17,907,3.256,908,3.256,909,2.17,910,2.17,911,2.17,912,3.907,913,2.17,914,2.17,915,4.342,916,2.17,917,2.17,918,3.256,919,2.17,920,2.17,921,2.17,922,2.17,923,2.17,924,2.17]],["title/classes/StompConfig.html",[303,0.312,925,1.94]],["body/classes/StompConfig.html",[3,0.255,4,0.255,5,0.223,8,0.223,10,0.157,22,0.253,23,0.562,26,0.135,27,0.448,33,0.602,34,0.038,35,0.562,36,1.134,37,2.105,40,1.8,45,1.111,47,0.687,48,1.07,51,1.393,52,0.255,55,0.017,56,0.017,62,1.855,64,1.187,70,1.025,80,1.577,86,1.222,95,1.317,109,1.359,110,1.361,113,2.025,115,2.575,116,3.813,121,2.575,126,2.575,131,1.012,164,1.07,169,2.649,183,2.105,188,1.821,189,2.269,190,1.821,191,2.269,192,1.821,193,1.821,194,2.269,195,2.269,196,2.269,197,2.269,198,2.269,199,2.269,200,2.985,201,2.985,202,2.985,203,2.985,204,2.985,205,2.985,206,2.985,207,2.985,215,1.655,275,1.655,296,1.489,300,0.79,301,1.012,302,0.921,303,0.364,305,1.111,307,2.899,317,1.489,330,1.974,331,2.575,332,2.025,333,2.575,335,2.025,336,2.575,338,1.694,340,2.105,351,1.07,365,2.105,373,1.855,388,2.105,397,2.105,418,2.345,421,2.105,424,2.105,426,2.105,432,2.105,435,2.105,451,2.105,453,2.105,456,2.105,466,2.105,481,2.105,496,1.855,508,1.393,522,0.718,527,1.577,531,1.577,534,1.577,536,1.577,540,1.577,542,1.577,548,1.361,550,1.577,551,1.577,552,1.361,553,1.577,554,1.577,555,1.577,556,1.577,557,1.577,558,1.577,559,1.577,560,1.577,561,1.577,562,1.577,563,1.577,570,1.577,579,1.655,704,2.105,834,2.105,840,2.105,851,2.105,856,2.105,900,1.577,925,1.855,926,3.762,927,2.949,928,2.441,929,2.949,930,3.607,931,1.906,932,1.906,933,1.906,934,1.906,935,1.906,936,2.949,937,1.906,938,1.906,939,1.906,940,1.906,941,1.906,942,1.906,943,1.906,944,1.906,945,2.949,946,2.949,947,2.949,948,1.906,949,1.906,950,1.906,951,2.949,952,1.906,953,1.906,954,1.906,955,1.906,956,1.906,957,1.906,958,1.906,959,1.906,960,1.906,961,1.906,962,1.906,963,1.906,964,1.906,965,1.906]],["title/classes/StompHeaders.html",[36,0.796,303,0.312]],["body/classes/StompHeaders.html",[3,0.598,4,0.598,5,0.523,8,0.523,10,0.194,12,3.695,16,1.682,21,1.606,22,0.383,23,0.85,34,0.035,35,1.113,36,1.368,37,4.173,38,1.682,50,3.695,52,0.598,55,0.031,56,0.031,91,1.682,303,0.451,338,1.269,346,3.188,450,3.188,522,1.682,526,2.809,731,3.188,926,3.333,966,3.695,967,3.188,968,4.465,969,4.465,970,4.465,971,4.465,972,4.465,973,4.465,974,4.465,975,4.465]],["title/injectables/StompService.html",[295,0.876,976,1.94]],["body/injectables/StompService.html",[1,1.303,3,0.193,4,0.193,5,0.168,8,0.276,10,0.245,11,1.995,13,1.026,14,1.026,15,3.226,16,1.96,19,0.656,21,1.23,22,0.202,24,0.493,26,0.102,27,0.357,29,1.322,33,0.545,34,0.037,35,0.958,36,0.893,38,1.763,40,0.493,42,1.322,45,1.127,47,0.57,51,0.808,52,0.193,53,2.996,55,0.014,56,0.014,59,1.939,60,0.807,61,1.873,62,0.904,64,0.57,65,0.904,66,0.85,67,1.075,68,1.681,70,1.165,71,1.189,73,2.927,74,1.127,75,2.724,86,1.995,91,1.631,93,1.681,94,1.026,95,0.916,96,0.726,98,1.681,100,0.85,103,2.401,105,1.075,106,0.807,111,0.656,112,1.189,114,1.681,117,3.714,131,1.309,136,2.725,137,0.807,157,1.757,159,0.904,164,1.942,165,2.431,166,1.949,169,1.189,171,1.026,173,1.438,188,0.726,190,0.726,192,0.726,193,0.726,212,1.882,214,1.026,215,0.807,222,3.226,236,1.433,239,1.882,243,1.679,244,1.481,255,1.026,261,0.656,263,0.595,268,1.949,271,1.322,275,2.143,277,1.026,279,1.322,280,1.681,287,0.904,288,0.807,289,2.282,295,0.669,297,0.726,298,0.887,301,1.187,302,0.735,303,0.302,304,0.541,305,1.127,309,1.747,317,1.747,320,1.942,330,1.877,332,0.807,335,0.807,337,3.108,338,1.585,342,1.85,345,0.904,347,0.904,349,1.481,351,0.807,353,2.626,360,1.928,361,1.681,362,1.481,364,2.843,372,0.904,377,0.904,378,0.904,385,0.904,386,0.656,387,1.882,391,1.481,394,0.904,399,1.481,402,1.481,409,1.026,411,2.843,414,1.322,415,1.322,438,2.176,446,1.942,458,0.807,460,1.481,467,0.904,470,2.401,472,0.904,478,0.656,489,0.904,491,1.582,497,0.807,508,1.485,510,1.882,515,0.904,520,1.189,526,0.904,545,1.481,577,1.189,578,1.481,579,1.679,584,0.904,588,2.58,596,1.481,601,1.681,604,2.725,606,1.681,615,1.026,617,2.401,649,1.681,655,1.075,666,1.322,667,3.273,668,1.949,669,1.949,670,1.949,671,1.949,672,1.949,673,1.949,674,1.949,675,2.476,676,2.863,677,2.476,678,1.949,679,1.189,680,1.189,681,1.189,682,1.189,683,1.189,684,1.189,685,1.026,686,3.393,687,1.949,688,1.189,689,1.189,690,1.189,691,1.189,692,1.189,693,1.189,694,1.189,695,1.189,696,1.189,697,1.189,698,1.949,699,1.189,700,1.189,701,1.189,702,1.189,703,1.189,704,1.026,705,1.189,706,1.189,707,1.189,708,1.681,709,1.189,710,1.189,711,1.189,712,1.189,713,1.189,716,1.189,729,1.949,731,2.136,733,1.189,737,1.189,738,1.949,739,1.189,740,1.189,741,1.681,742,1.189,744,2.863,745,1.949,758,1.189,760,1.189,761,1.189,762,2.927,763,2.863,764,2.476,765,1.949,766,1.949,767,1.949,768,1.189,769,1.949,770,1.949,771,2.725,772,1.949,773,1.681,774,1.189,775,1.949,776,1.189,777,1.189,778,1.189,779,1.949,780,1.189,781,1.189,782,1.189,783,1.189,784,1.189,785,1.189,786,1.189,787,1.189,788,1.189,789,1.189,790,1.949,791,3.583,792,1.949,793,2.47,794,1.949,795,3.393,796,1.949,797,1.949,798,1.949,799,1.949,800,1.949,801,2.476,802,2.476,803,1.949,804,1.949,805,1.949,806,1.949,807,3.393,808,1.949,809,1.189,810,1.949,811,1.949,812,1.949,813,1.189,814,3.159,815,1.189,816,1.681,817,1.189,818,1.189,819,2.863,820,1.189,821,1.949,822,2.863,823,2.863,824,1.949,825,1.681,826,1.189,827,1.026,828,1.189,829,1.189,830,3.159,831,1.189,832,1.189,833,2.863,834,1.026,835,1.189,836,1.949,837,1.189,838,1.189,839,1.189,840,1.026,841,1.189,842,1.189,843,1.949,844,1.189,845,1.189,846,1.189,847,1.189,848,1.189,849,1.189,850,1.189,851,1.026,852,1.189,853,1.189,854,1.189,855,1.189,856,1.026,873,1.189,925,2.176,928,1.189,976,1.882,977,1.189,978,1.949,979,1.949,980,1.949,981,2.355,982,2.355,983,2.355,984,2.355,985,2.355,986,2.355,987,2.355,988,2.355,989,3.437,990,2.992,991,2.355,992,2.355,993,1.437,994,2.355,995,2.355,996,2.355,997,1.437,998,1.437,999,1.437,1000,1.437,1001,1.437,1002,1.437,1003,1.437,1004,1.437,1005,1.437,1006,1.437,1007,1.437,1008,1.437,1009,1.437,1010,1.437,1011,1.437,1012,1.437,1013,1.437,1014,1.437,1015,1.437,1016,1.437,1017,1.437]],["title/interfaces/StompSubscription.html",[0,0.652,1018,2.202]],["body/interfaces/StompSubscription.html",[0,0.884,2,1.731,3,0.56,4,0.56,5,0.489,8,0.489,10,0.181,21,1.187,22,0.436,23,0.969,26,0.297,27,0.773,33,0.514,34,0.037,35,1.046,36,1.314,47,0.795,48,2.345,52,0.56,55,0.03,56,0.03,60,2.858,64,0.969,65,3.203,66,1.447,70,1.447,74,1.918,84,3.457,86,1.731,236,2.47,287,3.749,583,2.858,926,2.628,1018,4.081,1019,3.457,1020,5.091,1021,5.091,1022,4.178]],["title/classes/Versions.html",[109,1.162,303,0.312]],["body/classes/Versions.html",[3,0.427,4,0.427,5,0.373,8,0.373,10,0.241,11,1.772,22,0.414,23,0.606,26,0.226,27,0.649,33,0.544,34,0.037,35,1.111,38,1.82,46,3.54,52,0.427,55,0.025,56,0.025,58,2.16,91,1.2,95,0.673,100,1.467,109,2.258,131,1.771,133,2.273,144,2.401,157,1.467,158,4.591,263,1.772,303,0.488,304,2.091,330,1.872,338,1.611,345,2.691,381,3.961,414,2.401,473,3.054,474,3.961,475,3.961,478,1.454,494,3.054,508,1.092,522,1.2,577,2.16,579,1.787,597,3.054,721,4.591,741,3.054,861,4.881,1023,2.635,1024,4.831,1025,4.831,1026,4.831,1027,4.831,1028,5.165,1029,5.165,1030,3.184,1031,3.184,1032,4.278,1033,4.278,1034,4.278,1035,4.278,1036,3.184,1037,3.184,1038,3.184,1039,3.184,1040,3.184,1041,3.184,1042,3.184,1043,3.184,1044,3.184,1045,3.184,1046,3.184,1047,3.184,1048,3.184]],["title/coverage.html",[1049,3.464]],["body/coverage.html",[0,1.215,1,1.263,5,0.393,6,2.783,7,2.394,10,0.259,24,1.15,33,0.339,34,0.037,36,0.866,55,0.026,56,0.026,57,2.394,70,0.953,89,1.389,90,2.109,109,1.263,208,2.109,209,2.333,210,3.161,211,1.809,212,2.109,213,3.161,226,2.394,227,2.775,243,1.882,244,2.109,295,1.6,296,1.693,298,2.196,299,3.118,300,2.333,303,0.602,305,1.263,342,1.15,360,1.693,386,1.531,418,1.693,478,1.531,498,2.236,499,2.054,500,1.693,523,2.662,572,1.882,573,2.775,652,2.109,653,3.118,654,2.775,655,1.531,665,2.775,666,1.882,857,2.775,877,2.775,925,2.109,926,3.118,966,2.775,976,2.109,977,2.775,989,2.394,1018,2.394,1019,2.775,1023,2.775,1049,2.775,1050,3.353,1051,3.353,1052,2.775,1053,3.353,1054,3.353,1055,3.353,1056,6.248,1057,3.353,1058,4.428,1059,5.273,1060,3.353,1061,4.957,1062,5.273,1063,2.775,1064,3.353,1065,3.353,1066,3.353,1067,3.353,1068,3.353,1069,3.353,1070,3.353,1071,3.353,1072,3.353,1073,3.353,1074,3.353,1075,4.428,1076,3.353,1077,3.353,1078,3.353,1079,3.353,1080,3.353]],["title/miscellaneous/enumerations.html",[1081,1.072,1082,3.064]],["body/miscellaneous/enumerations.html",[10,0.251,22,0.444,26,0.305,34,0.03,55,0.03,56,0.03,90,2.705,149,3.07,164,2.414,167,4.287,175,4.121,176,4.602,178,4.287,179,4.287,180,4.287,181,3.498,182,3.558,183,3.699,184,3.558,185,3.558,186,3.558,209,1.782,217,1.222,298,1.62,301,1.777,302,1.343,303,0.434,342,1.475,360,2.171,520,2.171,523,2.171,667,2.705,685,3.07,978,3.558,979,3.558,980,3.558,1052,3.558,1081,1.782,1082,3.558,1083,4.287,1084,5.561,1085,3.07,1086,5.772,1087,5.181,1088,4.3,1089,4.3]],["title/miscellaneous/functions.html",[967,2.644,1081,1.072]],["body/miscellaneous/functions.html",[10,0.227,22,0.375,26,0.311,33,0.442,34,0.034,55,0.031,56,0.031,64,0.833,70,1.592,91,1.649,95,0.926,148,3.124,157,1.501,173,1.649,229,3.622,283,3.124,296,2.644,298,1.649,301,1.501,302,1.367,305,1.649,314,3.738,315,1.813,317,2.21,321,3.622,325,3.124,329,3.622,360,2.644,491,1.813,508,1.501,583,2.457,653,2.753,655,2.71,658,3.622,666,2.939,816,3.124,827,3.124,967,3.124,1063,4.333,1081,1.813,1085,3.124,1090,4.376,1091,4.376,1092,4.376,1093,4.376,1094,4.376,1095,4.376]],["title/index.html",[26,0.184,1096,2.586,1097,2.586]],["body/index.html",[10,0.254,23,0.964,34,0.03,55,0.03,56,0.03,64,0.964,99,4.526,109,2.061,129,2.603,173,1.907,211,1.736,217,1.438,252,3.425,254,3.614,275,2.323,295,1.176,296,2.09,301,1.42,302,1.708,305,1.559,309,2.09,342,1.736,386,1.89,418,2.09,461,2.955,498,2.09,499,1.715,500,2.09,520,2.09,522,2.147,572,2.841,590,2.955,652,2.603,655,1.89,666,2.323,732,3.425,771,2.955,887,3.425,976,2.603,989,2.955,1098,4.139,1099,4.139,1100,5.469,1101,5.698,1102,4.139,1103,4.139,1104,4.139,1105,4.139,1106,4.139,1107,4.139,1108,4.139,1109,4.139,1110,4.139,1111,4.139,1112,4.139,1113,4.139,1114,4.139,1115,4.139,1116,4.139,1117,4.139,1118,5.469,1119,4.139]],["title/modules.html",[1120,3.464]],["body/modules.html",[34,0.033,55,0.033,56,0.033,1120,4.083]],["title/overview.html",[1121,3.464]],["body/overview.html",[2,2.017,34,0.033,55,0.033,56,0.033,297,2.458,522,1.834,1121,4.029,1122,4.869,1123,4.869,1124,4.869]],["title/properties.html",[27,0.562,1125,2.586]],["body/properties.html",[8,0.558,27,0.723,34,0.036,55,0.032,56,0.032,302,1.488,304,1.795,386,2.175,1126,4.764,1127,4.764,1128,4.764,1129,4.764,1130,4.764,1131,4.764,1132,4.764,1133,4.764]],["title/miscellaneous/typealiases.html",[1081,1.072,1134,3.703]],["body/miscellaneous/typealiases.html",[1,2.034,6,2.79,7,3.549,10,0.234,11,2.06,22,0.513,23,1.124,24,1.851,26,0.285,33,0.406,34,0.029,35,0.765,54,3.325,55,0.029,56,0.029,57,3.549,59,2.06,61,2.401,64,0.765,66,1.142,70,1.678,88,2.869,89,2.06,90,2.528,93,3.549,111,2.646,112,2.926,113,2.79,115,3.549,116,3.549,121,3.549,126,3.549,128,2.869,129,2.528,130,2.869,209,1.665,217,1.142,300,2.06,315,1.665,499,2.06,517,3.127,523,2.029,1081,1.665,1083,4.886,1085,2.869,1135,4.018,1136,4.971,1137,4.018,1138,4.018,1139,4.018,1140,4.018]],["title/miscellaneous/variables.html",[1081,1.072,1141,3.064]],["body/miscellaneous/variables.html",[10,0.237,26,0.333,34,0.034,38,1.768,55,0.032,56,0.032,100,1.333,211,1.871,298,1.768,299,2.952,300,2.261,491,1.944,498,2.999,499,2.261,520,2.369,521,2.634,1081,1.944,1141,3.883,1142,4.693]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":394,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["0.1.0",{"_index":1126,"title":{},"body":{"properties.html":{}}}],["0.1.1",{"_index":348,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["0.3.5",{"_index":363,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.0",{"_index":474,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":475,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1']);maps",{"_index":480,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.2",{"_index":381,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1123,"title":{},"body":{"overview.html":{}}}],["100",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":1130,"title":{},"body":{"properties.html":{}}}],["2/2",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":700,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["20000",{"_index":699,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["21/22",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["27/27",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["41/41",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["44/44",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1122,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1124,"title":{},"body":{"overview.html":{}}}],["7/8",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":748,"title":{},"body":{"injectables/RxStompService.html":{}}}],["94",{"_index":1068,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["_customreplyqueue",{"_index":614,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_dummysubscription",{"_index":619,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_not_",{"_index":571,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["_repliesobservable",{"_index":613,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuename",{"_index":610,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupreplyqueue",{"_index":611,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["abort",{"_index":234,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["accept",{"_index":968,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":20,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ack",{"_index":68,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/StompService.html":{}}}],["acknowledgement",{"_index":73,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["acknowledges",{"_index":810,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activate",{"_index":675,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activated",{"_index":1094,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activation",{"_index":182,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["activationstate",{"_index":183,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["active",{"_index":184,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["activemq",{"_index":516,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["acts",{"_index":858,"title":{},"body":{"classes/Stomp.html":{}}}],["actual",{"_index":438,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["actually",{"_index":801,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["add",{"_index":694,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["added",{"_index":104,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["addition",{"_index":970,"title":{},"body":{"classes/StompHeaders.html":{}}}],["additional",{"_index":214,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["advance",{"_index":319,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["advanced",{"_index":17,"title":{},"body":{"interfaces/IFrame.html":{}}}],["alias",{"_index":54,"title":{},"body":{"interfaces/IFrame.html":{},"miscellaneous/typealiases.html":{}}}],["aliased",{"_index":88,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1135,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":793,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["allowing",{"_index":256,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["allows",{"_index":724,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["already",{"_index":816,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["alternate",{"_index":785,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["alternative",{"_index":880,"title":{},"body":{"classes/Stomp.html":{}}}],["alternatively",{"_index":893,"title":{},"body":{"classes/Stomp.html":{}}}],["always",{"_index":733,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular",{"_index":657,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["angular's",{"_index":327,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/core",{"_index":497,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":981,"title":{},"body":{"injectables/StompService.html":{}}}],["angular7.html",{"_index":313,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["another",{"_index":908,"title":{},"body":{"classes/Stomp.html":{}}}],["anything",{"_index":838,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["apache",{"_index":1129,"title":{},"body":{"properties.html":{}}}],["api",{"_index":1100,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":328,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["appendmissingnullonincoming",{"_index":198,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["application/octet",{"_index":759,"title":{},"body":{"injectables/RxStompService.html":{}}}],["appropriate",{"_index":710,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["around",{"_index":591,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["array",{"_index":1032,"title":{},"body":{"classes/Versions.html":{}}}],["arraybuffer",{"_index":142,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["associated",{"_index":1020,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["assumes",{"_index":448,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["async",{"_index":349,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["async](https://developer.mozilla.org/en",{"_index":565,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["asynchronous",{"_index":361,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{}}}],["asynchronously",{"_index":792,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":472,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempted",{"_index":413,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["attempts",{"_index":688,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attributes",{"_index":525,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["author",{"_index":1131,"title":{},"body":{"properties.html":{}}}],["auto",{"_index":708,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["automatic",{"_index":257,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["automatically",{"_index":279,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["available",{"_index":969,"title":{},"body":{"classes/StompHeaders.html":{}}}],["avoid",{"_index":145,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["backward",{"_index":128,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":42,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["before",{"_index":272,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":331,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":742,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["behaviorsubject",{"_index":819,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["belong",{"_index":1111,"title":{},"body":{"index.html":{}}}],["binary",{"_index":41,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarybody",{"_index":28,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarydata",{"_index":754,"title":{},"body":{"injectables/RxStompService.html":{}}}],["binarytype",{"_index":163,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["body",{"_index":29,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["body/binarybody",{"_index":44,"title":{},"body":{"interfaces/IFrame.html":{}}}],["body]{@link",{"_index":82,"title":{},"body":{"interfaces/IMessage.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["both",{"_index":372,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["box",{"_index":730,"title":{},"body":{"injectables/RxStompService.html":{}}}],["breaks",{"_index":681,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["broker",{"_index":16,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["brokers",{"_index":470,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["brokerurl",{"_index":332,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["builds",{"_index":1109,"title":{},"body":{"index.html":{}}}],["bye",{"_index":264,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["call",{"_index":74,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["call.html",{"_index":504,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callable",{"_index":886,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":61,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":79,"title":{},"body":{"interfaces/IMessage.html":{}}}],["callbacks",{"_index":13,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["called",{"_index":353,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["calling",{"_index":230,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["calls",{"_index":526,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["care",{"_index":598,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["carry",{"_index":790,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["case",{"_index":352,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["cases",{"_index":285,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["caution",{"_index":447,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["caveat",{"_index":233,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["change",{"_index":253,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["check",{"_index":385,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["class",{"_index":303,"title":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["classes",{"_index":522,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":647,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["client",{"_index":418,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"coverage.html":{},"index.html":{}}}],["client#abort",{"_index":237,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#abort]{@link",{"_index":242,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#ack",{"_index":76,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#ack]{@link",{"_index":85,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#activate",{"_index":689,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#appendmissingnullonincoming",{"_index":340,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#appendmissingnullonincoming]{@link",{"_index":559,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect",{"_index":365,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":570,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":231,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#brokerurl",{"_index":373,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":548,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":238,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#commit]{@link",{"_index":241,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#configure",{"_index":704,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#configure]{@link",{"_index":956,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#connectheaders",{"_index":388,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":562,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout",{"_index":397,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout]{@link",{"_index":553,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactivate",{"_index":713,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#debug",{"_index":936,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":964,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure",{"_index":421,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure]{@link",{"_index":561,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders",{"_index":424,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":563,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes",{"_index":426,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes]{@link",{"_index":558,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming",{"_index":432,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":555,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing",{"_index":435,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":556,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication",{"_index":451,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication]{@link",{"_index":551,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize",{"_index":453,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize]{@link",{"_index":560,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":77,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#nack]{@link",{"_index":87,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#onchangestate",{"_index":945,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onchangestate]{@link",{"_index":965,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect",{"_index":946,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":959,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":947,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":960,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":834,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onstomperror]{@link",{"_index":961,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe",{"_index":840,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledframe]{@link",{"_index":958,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessage",{"_index":62,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledmessage]{@link",{"_index":80,"title":{},"body":{"interfaces/IMessage.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":851,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":957,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose",{"_index":951,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":962,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror",{"_index":856,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onwebsocketerror]{@link",{"_index":963,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":92,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["client#publish]{@link",{"_index":127,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["client#reconnectdelay",{"_index":456,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":554,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes",{"_index":466,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes]{@link",{"_index":557,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions",{"_index":481,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":550,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscribe",{"_index":65,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":84,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/StompSubscription.html":{}}}],["client#unsubscribe",{"_index":1021,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":1022,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":812,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#websocketfactory",{"_index":496,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":552,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":870,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":885,"title":{},"body":{"classes/Stomp.html":{}}}],["client.js",{"_index":899,"title":{},"body":{"classes/Stomp.html":{}}}],["client.ts",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["close",{"_index":171,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["closed",{"_index":181,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["closeevent]://developer.mozilla.org/en",{"_index":1137,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":118,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktype",{"_index":121,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closes",{"_index":170,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closing",{"_index":180,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["code",{"_index":776,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["combination",{"_index":799,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["combined",{"_index":326,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["command",{"_index":30,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{}}}],["commit",{"_index":235,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["communication",{"_index":440,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["compat",{"_index":898,"title":{},"body":{"classes/Stomp.html":{}}}],["compatclient",{"_index":877,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":918,"title":{},"body":{"classes/Stomp.html":{}}}],["compatibility",{"_index":129,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["complaint",{"_index":800,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["completed",{"_index":802,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compliant",{"_index":460,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compodoc",{"_index":1116,"title":{},"body":{"index.html":{}}}],["config",{"_index":649,"title":{},"body":{"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["config.js",{"_index":607,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["config.ts",{"_index":300,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.ts:101",{"_index":948,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:102",{"_index":538,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:106",{"_index":932,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:111",{"_index":542,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:116",{"_index":536,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:121",{"_index":527,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:126",{"_index":540,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:131",{"_index":534,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:136",{"_index":942,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:140",{"_index":530,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:141",{"_index":935,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:146",{"_index":937,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:147",{"_index":535,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:151",{"_index":944,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:167",{"_index":528,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:178",{"_index":532,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:22",{"_index":529,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:23",{"_index":650,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:26",{"_index":933,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:27",{"_index":651,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:31",{"_index":954,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:35",{"_index":543,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:36",{"_index":955,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:41",{"_index":934,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:46",{"_index":952,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:47",{"_index":539,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:50",{"_index":533,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:51",{"_index":940,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:56",{"_index":941,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:61",{"_index":953,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:66",{"_index":939,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:71",{"_index":931,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:73",{"_index":544,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:76",{"_index":943,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:81",{"_index":531,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:86",{"_index":938,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:88",{"_index":541,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:91",{"_index":949,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:95",{"_index":537,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:96",{"_index":950,"title":{},"body":{"classes/StompConfig.html":{}}}],["configuration",{"_index":317,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":676,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configure(rxstompconfig",{"_index":690,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configured",{"_index":1093,"title":{},"body":{"miscellaneous/functions.html":{}}}],["connect",{"_index":345,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["connected",{"_index":667,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["connectheaders",{"_index":190,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["connecting",{"_index":178,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["connection",{"_index":165,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectionstate",{"_index":668,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectiontimeout",{"_index":333,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["consider",{"_index":259,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["console.log(new",{"_index":701,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["console.warn",{"_index":921,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/.../i",{"_index":1136,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/.../injectable",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolidated/.../rx",{"_index":1085,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1088,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.ts",{"_index":1083,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":298,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consolidated/rx",{"_index":209,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.ts",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts",{"_index":857,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:103",{"_index":879,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:41",{"_index":863,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:57",{"_index":872,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/i",{"_index":6,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":926,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/types.ts",{"_index":90,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.ts",{"_index":1023,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":1036,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":1037,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":1038,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:27",{"_index":1031,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:35",{"_index":1039,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:40",{"_index":1041,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:47",{"_index":1040,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":261,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["constructor",{"_index":579,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":992,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(public",{"_index":1045,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":580,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(versions",{"_index":1030,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":971,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":101,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["copied",{"_index":143,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["copy",{"_index":629,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correlateerrors",{"_index":334,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["correlation",{"_index":600,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["correlationid",{"_index":639,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":1102,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":402,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["corresponds",{"_index":927,"title":{},"body":{"classes/StompConfig.html":{}}}],["cover",{"_index":1106,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1049,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":725,"title":{},"body":{"injectables/RxStompService.html":{}}}],["cr",{"_index":972,"title":{},"body":{"classes/StompHeaders.html":{}}}],["create",{"_index":583,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"interfaces/StompSubscription.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":229,"title":{},"body":{"interfaces/ITransaction.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":873,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["creating",{"_index":46,"title":{},"body":{"interfaces/IFrame.html":{},"classes/Versions.html":{}}}],["credentials",{"_index":357,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["current",{"_index":822,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["currently",{"_index":400,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["custom",{"_index":634,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["data",{"_index":141,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["date",{"_index":702,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivate",{"_index":677,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivating",{"_index":185,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":188,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["debugfntype",{"_index":113,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["debugging",{"_index":419,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["declare",{"_index":901,"title":{},"body":{"classes/Stomp.html":{}}}],["declared",{"_index":1035,"title":{},"body":{"classes/Versions.html":{}}}],["deepak",{"_index":1132,"title":{},"body":{"properties.html":{}}}],["default",{"_index":100,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessagessubscription",{"_index":638,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscribe",{"_index":648,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaults",{"_index":251,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["defensively",{"_index":628,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["define",{"_index":321,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":338,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["defining",{"_index":1091,"title":{},"body":{"miscellaneous/functions.html":{}}}],["delay",{"_index":455,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["dependency",{"_index":148,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["dependent",{"_index":250,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["deprecated",{"_index":520,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["designed",{"_index":772,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destination",{"_index":96,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destinations",{"_index":720,"title":{},"body":{"injectables/RxStompService.html":{}}}],["details",{"_index":310,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["development",{"_index":1103,"title":{},"body":{"index.html":{}}}],["different",{"_index":783,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["disable",{"_index":431,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["discardwebsocketoncommfailure",{"_index":199,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnect",{"_index":686,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["disconnectheaders",{"_index":191,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnecting",{"_index":1089,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disconnection",{"_index":423,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["docs",{"_index":1101,"title":{},"body":{"index.html":{}}}],["docs/latest/classes/stomp.html#over",{"_index":924,"title":{},"body":{"classes/Stomp.html":{}}}],["documentation",{"_index":386,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["documents",{"_index":1114,"title":{},"body":{"index.html":{}}}],["dom",{"_index":146,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["down",{"_index":220,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["dropped",{"_index":979,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["drops",{"_index":766,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["during",{"_index":414,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":484,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["each",{"_index":275,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"index.html":{}}}],["earlier",{"_index":774,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["effects",{"_index":444,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["elements",{"_index":1033,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":821,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["emitted",{"_index":401,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["enable",{"_index":417,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["end",{"_index":98,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["endpoint",{"_index":846,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["enqueued",{"_index":219,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["ensure",{"_index":616,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["entry",{"_index":1118,"title":{},"body":{"index.html":{}}}],["enum",{"_index":177,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["enumerations",{"_index":1082,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":865,"title":{},"body":{"classes/Stomp.html":{}}}],["erroneous",{"_index":412,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["error",{"_index":399,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["errors",{"_index":854,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["es6",{"_index":983,"title":{},"body":{"injectables/StompService.html":{}}}],["established",{"_index":391,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["etc",{"_index":359,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ev",{"_index":151,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["even",{"_index":765,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event",{"_index":855,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event]://developer.mozilla.org/en",{"_index":1139,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["event]{@link",{"_index":124,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["evt",{"_index":122,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["exact",{"_index":832,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["exactly",{"_index":306,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["example",{"_index":66,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":996,"title":{},"body":{"injectables/StompService.html":{}}}],["existing",{"_index":695,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["explicitly",{"_index":1003,"title":{},"body":{"injectables/StompService.html":{}}}],["export",{"_index":52,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["exposed",{"_index":160,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["extended",{"_index":25,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["extends",{"_index":67,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["factory",{"_index":325,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":1063,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":615,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["family",{"_index":1127,"title":{},"body":{"properties.html":{}}}],["favor",{"_index":978,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":356,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["field",{"_index":928,"title":{},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["fields",{"_index":316,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":602,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["filter((message",{"_index":642,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["first",{"_index":603,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["fixed",{"_index":318,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["flag",{"_index":278,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["following",{"_index":780,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["forcebinarywsframes",{"_index":196,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["frame",{"_index":11,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["frame.js",{"_index":78,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{}}}],["frame.ts",{"_index":7,"title":{},"body":{"interfaces/IFrame.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["framecallbacktype",{"_index":116,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["frameimpl",{"_index":63,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#body",{"_index":83,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#headers",{"_index":81,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frames",{"_index":137,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["framework",{"_index":659,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["function",{"_index":70,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":308,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["functions",{"_index":967,"title":{"miscellaneous/functions.html":{}},"body":{"classes/StompHeaders.html":{},"miscellaneous/functions.html":{}}}],["generatebinarydata",{"_index":755,"title":{},"body":{"injectables/RxStompService.html":{}}}],["generated",{"_index":1115,"title":{},"body":{"index.html":{}}}],["generating",{"_index":599,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["gets",{"_index":740,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["getting",{"_index":1096,"title":{"index.html":{}},"body":{}}],["good",{"_index":756,"title":{},"body":{"injectables/RxStompService.html":{}}}],["guest",{"_index":698,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["guide",{"_index":315,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":311,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["guide/rx",{"_index":501,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](/guide/rx",{"_index":608,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["guides",{"_index":1112,"title":{},"body":{"index.html":{}}}],["hack",{"_index":907,"title":{},"body":{"classes/Stomp.html":{}}}],["handle",{"_index":270,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["handles",{"_index":1014,"title":{},"body":{"injectables/StompService.html":{}}}],["handshake",{"_index":473,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["header",{"_index":103,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["headers",{"_index":21,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["headers.js",{"_index":48,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"interfaces/StompSubscription.html":{}}}],["headers.ts",{"_index":966,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":975,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correlation",{"_index":640,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['reply",{"_index":645,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers]{@link",{"_index":49,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["heartbeat",{"_index":429,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["heartbeatincoming",{"_index":192,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["heartbeatoutgoing",{"_index":193,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["hello",{"_index":749,"title":{},"body":{"injectables/RxStompService.html":{}}}],["here",{"_index":775,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["host",{"_index":379,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["html5",{"_index":883,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":119,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["https://stomp",{"_index":922,"title":{},"body":{"classes/Stomp.html":{}}}],["i.e",{"_index":350,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["id",{"_index":236,"title":{},"body":{"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["identifier",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["iframe",{"_index":1,"title":{"interfaces/IFrame.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["iframe#headers",{"_index":50,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["ignore",{"_index":817,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["imessage",{"_index":24,"title":{"interfaces/IMessage.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["immediate",{"_index":344,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["immediately",{"_index":744,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["impact",{"_index":343,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["implementation",{"_index":574,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["implies",{"_index":395,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["import",{"_index":47,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["important",{"_index":375,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["importantly",{"_index":405,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["inactive",{"_index":186,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["incoming",{"_index":428,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":974,"title":{},"body":{"classes/StompHeaders.html":{}}}],["indicate",{"_index":732,"title":{},"body":{"injectables/RxStompService.html":{},"index.html":{}}}],["indicates",{"_index":158,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Versions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["information",{"_index":252,"title":{},"body":{"interfaces/IWatchParams.html":{},"index.html":{}}}],["inherited",{"_index":337,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["initandconnect",{"_index":990,"title":{},"body":{"injectables/StompService.html":{}}}],["initialize",{"_index":988,"title":{},"body":{"injectables/StompService.html":{}}}],["initiate",{"_index":680,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":322,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injectable",{"_index":295,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":296,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstomprpcconfig",{"_index":498,"title":{"injectables/InjectableRxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":297,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"overview.html":{}}}],["injected",{"_index":324,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injection",{"_index":658,"title":{},"body":{"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["instance",{"_index":58,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":521,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{},"overview.html":{}}}],["internal",{"_index":133,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["internally",{"_index":290,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["interval",{"_index":430,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["invoke",{"_index":805,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["invoked",{"_index":271,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["invoking",{"_index":284,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["ipublishparams",{"_index":89,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irawframetype",{"_index":132,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["irxstomppublishparams",{"_index":208,"title":{"interfaces/IRxStompPublishParams.html":{}},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"coverage.html":{}}}],["isbinarybody",{"_index":31,"title":{},"body":{"interfaces/IFrame.html":{}}}],["issue",{"_index":770,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["issued",{"_index":291,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["istompsocket",{"_index":149,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["istompsocketmessageevent",{"_index":140,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["istompthandlerconfig",{"_index":187,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["itransaction",{"_index":226,"title":{"interfaces/ITransaction.html":{}},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["iwatchparams",{"_index":243,"title":{"interfaces/IWatchParams.html":{}},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["iwatchparams#subscribeonlyonce",{"_index":768,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["java",{"_index":468,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["javascript",{"_index":549,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["js.github.io/api",{"_index":923,"title":{},"body":{"classes/Stomp.html":{}}}],["json",{"_index":727,"title":{},"body":{"injectables/RxStompService.html":{}}}],["keep",{"_index":684,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["key",{"_index":37,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["keys",{"_index":376,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["klass",{"_index":916,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":917,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":626,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":283,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["kumar",{"_index":1133,"title":{},"body":{"properties.html":{}}}],["large",{"_index":463,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["later",{"_index":323,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leave",{"_index":1005,"title":{},"body":{"injectables/StompService.html":{}}}],["length",{"_index":102,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["lf",{"_index":973,"title":{},"body":{"classes/StompHeaders.html":{}}}],["libraries",{"_index":1108,"title":{},"body":{"index.html":{}}}],["library",{"_index":771,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"index.html":{}}}],["license",{"_index":1128,"title":{},"body":{"properties.html":{}}}],["line:variable",{"_index":905,"title":{},"body":{"classes/Stomp.html":{}}}],["link",{"_index":51,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["literal",{"_index":260,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["locally",{"_index":737,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["located",{"_index":874,"title":{},"body":{"classes/Stomp.html":{}}}],["log",{"_index":437,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["login",{"_index":377,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["lograwcommunication",{"_index":197,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["logs",{"_index":442,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["loop",{"_index":709,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["major",{"_index":860,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":587,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["mandatory",{"_index":750,"title":{},"body":{"injectables/RxStompService.html":{}}}],["manual",{"_index":72,"title":{},"body":{"interfaces/IMessage.html":{}}}],["manually",{"_index":987,"title":{},"body":{"injectables/StompService.html":{}}}],["many",{"_index":12,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["maps",{"_index":364,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["marks",{"_index":383,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["matched",{"_index":803,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["matching",{"_index":56,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxwebsocketchunksize",{"_index":195,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["meaning",{"_index":781,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["means",{"_index":409,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{}}}],["mechanism",{"_index":329,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":59,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["message.headers['correlation",{"_index":643,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["message.js",{"_index":108,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["message.ts",{"_index":57,"title":{},"body":{"interfaces/IMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagecallbacktype",{"_index":115,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messages",{"_index":222,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["messaging",{"_index":576,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["method",{"_index":75,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["methods",{"_index":577,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["milliseconds",{"_index":393,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["miscellaneous",{"_index":1081,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed",{"_index":769,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["missing",{"_index":736,"title":{},"body":{"injectables/RxStompService.html":{}}}],["mode",{"_index":461,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"index.html":{}}}],["modules",{"_index":1120,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":887,"title":{},"body":{"classes/Stomp.html":{},"index.html":{}}}],["mozwebsocket",{"_index":909,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":114,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["msg});maps",{"_index":811,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["multiple",{"_index":692,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["nack",{"_index":69,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["name",{"_index":508,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":716,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["naming",{"_index":719,"title":{},"body":{"injectables/RxStompService.html":{}}}],["navigating",{"_index":1098,"title":{},"body":{"index.html":{}}}],["need",{"_index":19,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["needed",{"_index":892,"title":{},"body":{"classes/Stomp.html":{}}}],["needs",{"_index":795,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["new",{"_index":478,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":445,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["ng2",{"_index":1119,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":864,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":458,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["normally",{"_index":837,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["note",{"_index":596,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["notify",{"_index":849,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["now",{"_index":408,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["npm",{"_index":1104,"title":{},"body":{"index.html":{}}}],["null",{"_index":152,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["number",{"_index":169,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["object",{"_index":486,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["objects",{"_index":833,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable",{"_index":289,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable(s",{"_index":403,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["observable.create((rpcobserver",{"_index":637,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["observables",{"_index":407,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["observer",{"_index":604,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["occasionally",{"_index":282,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{}}}],["occurs",{"_index":815,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["octet(s",{"_index":735,"title":{},"body":{"injectables/RxStompService.html":{}}}],["once",{"_index":888,"title":{},"body":{"classes/Stomp.html":{}}}],["onchangestate",{"_index":930,"title":{},"body":{"classes/StompConfig.html":{}}}],["onclose",{"_index":150,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onconnect",{"_index":200,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":201,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["one",{"_index":370,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onerror",{"_index":153,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onmessage",{"_index":154,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onopen",{"_index":155,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onstomperror",{"_index":202,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledframe",{"_index":207,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledmessage",{"_index":205,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":206,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onwebsocketclose",{"_index":203,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onwebsocketerror",{"_index":204,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["open",{"_index":179,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["operation",{"_index":791,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["optional",{"_index":95,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":215,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["opts",{"_index":787,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["order",{"_index":884,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwise",{"_index":706,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["out",{"_index":729,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["outgoing",{"_index":434,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["over",{"_index":254,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/Stomp.html":{},"index.html":{}}}],["over(ws",{"_index":878,"title":{},"body":{"classes/Stomp.html":{}}}],["override",{"_index":1034,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1121,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1125,"title":{"properties.html":{}},"body":{}}],["packets",{"_index":465,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["pairs",{"_index":39,"title":{},"body":{"interfaces/IFrame.html":{}}}],["param",{"_index":663,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["parameter",{"_index":112,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":593,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["params.headers",{"_index":630,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["params.ts",{"_index":213,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["parsed",{"_index":443,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["parser",{"_index":135,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":22,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":14,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passcode",{"_index":378,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passed",{"_index":45,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["passing",{"_index":894,"title":{},"body":{"classes/Stomp.html":{}}}],["payload",{"_index":726,"title":{},"body":{"injectables/RxStompService.html":{}}}],["per",{"_index":682,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["pipe",{"_index":641,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["please",{"_index":309,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"index.html":{}}}],["point",{"_index":99,"title":{},"body":{"interfaces/IPublishParams.html":{},"index.html":{}}}],["possible",{"_index":175,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practice",{"_index":757,"title":{},"body":{"injectables/RxStompService.html":{}}}],["prefer",{"_index":489,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["preferred",{"_index":1117,"title":{},"body":{"index.html":{}}}],["present",{"_index":384,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["prior",{"_index":910,"title":{},"body":{"classes/Stomp.html":{}}}],["priority",{"_index":747,"title":{},"body":{"injectables/RxStompService.html":{}}}],["private",{"_index":609,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["procedure",{"_index":503,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["processing",{"_index":845,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["promise",{"_index":351,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["promise](https://developer.mozilla.org/en",{"_index":567,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["properties",{"_index":27,"title":{"properties.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["protocol",{"_index":721,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["protocols",{"_index":871,"title":{},"body":{"classes/Stomp.html":{}}}],["protocolversions",{"_index":1028,"title":{},"body":{"classes/Versions.html":{}}}],["prototype",{"_index":902,"title":{},"body":{"classes/Stomp.html":{}}}],["provider",{"_index":1092,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":827,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":330,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["publish",{"_index":212,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["publish(parameters",{"_index":714,"title":{},"body":{"injectables/RxStompService.html":{}}}],["publish(queuename",{"_index":999,"title":{},"body":{"injectables/StompService.html":{}}}],["published",{"_index":223,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["publishing",{"_index":806,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["publishparams",{"_index":93,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["queue",{"_index":510,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":512,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":746,"title":{},"body":{"injectables/RxStompService.html":{}}}],["queued",{"_index":738,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["queuename",{"_index":268,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/StompService.html":{}}}],["queues",{"_index":763,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["r.service",{"_index":1013,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.ts",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["rabbitmq",{"_index":515,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raise",{"_index":743,"title":{},"body":{"injectables/RxStompService.html":{}}}],["random",{"_index":798,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["randomtext",{"_index":808,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raw",{"_index":439,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rawheadertype",{"_index":134,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re",{"_index":410,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["re)connection",{"_index":277,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["re)subscription",{"_index":273,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["reactivate",{"_index":711,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readme",{"_index":994,"title":{},"body":{"injectables/StompService.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reads",{"_index":777,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readystate",{"_index":168,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["receipt",{"_index":117,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiptid",{"_index":807,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receive",{"_index":111,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["received",{"_index":15,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiving",{"_index":842,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["recent",{"_index":828,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reconnect",{"_index":446,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnectdelay",{"_index":335,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["reconnecting",{"_index":889,"title":{},"body":{"classes/Stomp.html":{}}}],["reconnection",{"_index":415,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnects",{"_index":767,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reestablished",{"_index":224,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["refer",{"_index":717,"title":{},"body":{"injectables/RxStompService.html":{}}}],["released",{"_index":1105,"title":{},"body":{"index.html":{}}}],["reliably",{"_index":355,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["remains",{"_index":618,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["remarks",{"_index":913,"title":{},"body":{"classes/Stomp.html":{}}}],["remote",{"_index":575,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["removed",{"_index":859,"title":{},"body":{"classes/Stomp.html":{}}}],["replaced",{"_index":929,"title":{},"body":{"classes/StompConfig.html":{}}}],["replies",{"_index":513,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["repliesobservable",{"_index":632,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["repliesobservable.subscribe",{"_index":636,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["reply",{"_index":509,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuename",{"_index":505,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":734,"title":{},"body":{"injectables/RxStompService.html":{}}}],["represents",{"_index":9,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":588,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requested",{"_index":848,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requesting",{"_index":794,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["require('../../esm5",{"_index":866,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":903,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket;deprecated",{"_index":869,"title":{},"body":{"classes/Stomp.html":{}}}],["resolved",{"_index":354,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["resubscribe",{"_index":280,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["resubscriptions",{"_index":258,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["results",{"_index":55,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":390,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["retryifdisconnected",{"_index":218,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{}}}],["return",{"_index":263,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["returned",{"_index":829,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["returns",{"_index":157,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["rpc",{"_index":499,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rpc(params",{"_index":585,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rpc.service.ts",{"_index":654,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":656,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.ts",{"_index":573,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:32",{"_index":582,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:58",{"_index":586,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:69",{"_index":595,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(message",{"_index":644,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":211,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":288,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp",{"_index":342,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rxstomp#activate",{"_index":712,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#configure",{"_index":524,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":546,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate",{"_index":347,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#deactivate]{@link",{"_index":564,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#publish",{"_index":216,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#publish]{@link",{"_index":225,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#watch",{"_index":245,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watch]{@link",{"_index":293,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watchforreceipt",{"_index":850,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.activate();maps",{"_index":703,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.configure",{"_index":696,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":752,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp.publish({destination",{"_index":745,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":1009,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp.watch",{"_index":267,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":809,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:107",{"_index":835,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:119",{"_index":847,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:132",{"_index":831,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:142",{"_index":852,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:161",{"_index":1000,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp:268",{"_index":691,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:300",{"_index":679,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:347",{"_index":707,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:360",{"_index":705,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:420",{"_index":715,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:473",{"_index":761,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:54",{"_index":820,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:616",{"_index":789,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:62",{"_index":813,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:77",{"_index":826,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:94",{"_index":841,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp]{@link",{"_index":569,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig",{"_index":305,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":683,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstompconfig#websocketfactory",{"_index":371,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":547,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.stompversions",{"_index":477,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactory",{"_index":492,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig:102",{"_index":433,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:111",{"_index":457,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:116",{"_index":425,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:121",{"_index":339,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:126",{"_index":452,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:131",{"_index":420,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:140",{"_index":374,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:147",{"_index":422,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:167",{"_index":341,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:178",{"_index":398,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:22",{"_index":366,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:35",{"_index":471,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:47",{"_index":436,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:50",{"_index":416,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:73",{"_index":482,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:81",{"_index":389,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:88",{"_index":454,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:95",{"_index":427,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstomprpc",{"_index":572,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpc#stream",{"_index":592,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rxstomprpc#stream]{@link",{"_index":625,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rxstomprpc:58",{"_index":660,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpc:69",{"_index":661,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpcconfig",{"_index":500,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpcconfig:23",{"_index":507,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcconfig:27",{"_index":518,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcservice",{"_index":652,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstompservice",{"_index":655,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory",{"_index":666,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1090,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstate",{"_index":1084,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["safely",{"_index":764,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["same",{"_index":307,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["samples",{"_index":995,"title":{},"body":{"injectables/StompService.html":{}}}],["scripts",{"_index":161,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["see",{"_index":64,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":239,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["send(data",{"_index":174,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sent",{"_index":731,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["sequence",{"_index":797,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["server",{"_index":762,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["serverheaders",{"_index":669,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["service",{"_index":360,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":105,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["setting",{"_index":490,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["setup",{"_index":519,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueue",{"_index":506,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntype",{"_index":517,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["show",{"_index":824,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["similar",{"_index":483,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simple",{"_index":589,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["simplest",{"_index":1095,"title":{},"body":{"miscellaneous/functions.html":{}}}],["skip",{"_index":751,"title":{},"body":{"injectables/RxStompService.html":{}}}],["skipcontentlengthheader",{"_index":97,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["skipped",{"_index":107,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["socket",{"_index":159,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["sockjs",{"_index":485,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":495,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["sometimes",{"_index":728,"title":{},"body":{"injectables/RxStompService.html":{}}}],["soon",{"_index":739,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["specific",{"_index":387,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["specification",{"_index":984,"title":{},"body":{"injectables/StompService.html":{}}}],["specified",{"_index":392,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["specifies",{"_index":722,"title":{},"body":{"injectables/RxStompService.html":{}}}],["specify",{"_index":882,"title":{},"body":{"classes/Stomp.html":{}}}],["splitlargeframes",{"_index":194,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["splitting",{"_index":462,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["spring",{"_index":469,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["standard",{"_index":382,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["standards",{"_index":459,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["started",{"_index":1097,"title":{"index.html":{}},"body":{}}],["state",{"_index":164,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["state.ts",{"_index":1086,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":176,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["static",{"_index":861,"title":{},"body":{"classes/Stomp.html":{},"classes/Versions.html":{}}}],["status",{"_index":823,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["step",{"_index":314,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":10,"title":{"classes/Stomp.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stomp#client",{"_index":881,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":919,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":911,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":906,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url);deprecated",{"_index":876,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":1012,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp.js",{"_index":545,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{}}}],["stomp.over",{"_index":912,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(function",{"_index":895,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.service",{"_index":662,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.ts",{"_index":665,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.ts",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["stomp.websocketclass",{"_index":868,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":301,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stomp/rx",{"_index":217,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/i",{"_index":210,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["stomp/src/rx",{"_index":523,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.js",{"_index":982,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp/stompjs",{"_index":23,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stompconfig",{"_index":925,"title":{"classes/StompConfig.html":{}},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomperrors",{"_index":670,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompheaders",{"_index":36,"title":{"classes/StompHeaders.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["stompjs",{"_index":302,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["stompjs.stomp",{"_index":867,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/ng2",{"_index":312,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["stompjs/remote",{"_index":502,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/src/app/compatibility/stomp",{"_index":1052,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts",{"_index":977,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts:25",{"_index":993,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs/src/app/injectable",{"_index":299,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stompjs/src/app/rx",{"_index":653,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs@8.x.x",{"_index":980,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":581,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuename",{"_index":620,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueue",{"_index":622,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservice",{"_index":989,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stomprservice:136",{"_index":998,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:147",{"_index":997,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:195",{"_index":1002,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:230",{"_index":1008,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:40",{"_index":1011,"title":{},"body":{"injectables/StompService.html":{}}}],["stompservice",{"_index":976,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stompsocketstate",{"_index":167,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate",{"_index":1087,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stompstate.open",{"_index":818,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompsubscription",{"_index":1018,"title":{"interfaces/StompSubscription.html":{}},"body":{"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["stompversions",{"_index":189,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":687,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["strange",{"_index":778,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stray",{"_index":844,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream",{"_index":578,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream(params",{"_index":594,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["streaming",{"_index":985,"title":{},"body":{"injectables/StompService.html":{}}}],["string",{"_index":35,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":450,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["structure",{"_index":138,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sub",{"_index":266,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["sub.unsubscribe",{"_index":292,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaders",{"_index":246,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaderscallback",{"_index":262,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subject",{"_index":830,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe",{"_index":411,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe((message",{"_index":269,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{}}}],["subscribe(queuename",{"_index":1001,"title":{},"body":{"injectables/StompService.html":{}}}],["subscribed",{"_index":274,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["subscribeonlyonce",{"_index":247,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subscribing",{"_index":71,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/StompService.html":{}}}],["subscription",{"_index":60,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["subscription.ts",{"_index":1019,"title":{},"body":{"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["successful",{"_index":276,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["such",{"_index":221,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{}}}],["suggests",{"_index":723,"title":{},"body":{"injectables/RxStompService.html":{}}}],["suitable",{"_index":514,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":1015,"title":{},"body":{"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":664,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["support",{"_index":162,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["supported",{"_index":1024,"title":{},"body":{"classes/Versions.html":{}}}],["supportedversions",{"_index":1029,"title":{},"body":{"classes/Versions.html":{}}}],["supports",{"_index":487,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["switch",{"_index":130,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":786,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["t",{"_index":123,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["table",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":597,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Versions.html":{}}}],["target",{"_index":249,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["tcp",{"_index":891,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":511,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporary",{"_index":843,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["terminate",{"_index":156,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["terminating",{"_index":404,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["test.destination",{"_index":1010,"title":{},"body":{"injectables/StompService.html":{}}}],["text",{"_index":464,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["thin",{"_index":1110,"title":{},"body":{"index.html":{}}}],["things",{"_index":784,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["this._customreplyqueue",{"_index":623,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._dummysubscription",{"_index":635,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable",{"_index":631,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuename",{"_index":621,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue",{"_index":624,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.config",{"_index":1016,"title":{},"body":{"injectables/StompService.html":{}}}],["this.initandconnect",{"_index":1017,"title":{},"body":{"injectables/StompService.html":{}}}],["this.rxstomp",{"_index":633,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish",{"_index":646,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessage",{"_index":612,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.stream(params).pipe(first",{"_index":627,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.versions.join",{"_index":1046,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map(x",{"_index":1047,"title":{},"body":{"classes/Versions.html":{}}}],["those",{"_index":406,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["though",{"_index":380,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["three",{"_index":1107,"title":{},"body":{"index.html":{}}}],["through",{"_index":1099,"title":{},"body":{"index.html":{}}}],["time",{"_index":255,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["times",{"_index":693,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["todo",{"_index":232,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["token",{"_index":358,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["topic/special",{"_index":758,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["transaction",{"_index":228,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["transaction.ts",{"_index":227,"title":{},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["transmits",{"_index":172,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["transport",{"_index":890,"title":{},"body":{"classes/Stomp.html":{}}}],["trigger",{"_index":814,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["true",{"_index":106,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["try",{"_index":476,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["trying",{"_index":685,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["tslint:disable",{"_index":904,"title":{},"body":{"classes/Stomp.html":{}}}],["tutorials",{"_index":1113,"title":{},"body":{"index.html":{}}}],["two",{"_index":779,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["type",{"_index":33,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1134,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typelib",{"_index":147,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["typeof",{"_index":920,"title":{},"body":{"classes/Stomp.html":{}}}],["types",{"_index":718,"title":{},"body":{"injectables/RxStompService.html":{}}}],["types.js",{"_index":900,"title":{},"body":{"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["typescript",{"_index":294,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["typical",{"_index":494,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["typically",{"_index":320,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["uint8array",{"_index":32,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["undefined",{"_index":139,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["underlying",{"_index":617,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["understand",{"_index":1004,"title":{},"body":{"injectables/StompService.html":{}}}],["unhandled",{"_index":836,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledframe",{"_index":671,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledmessage",{"_index":672,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledreceipts",{"_index":673,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unique",{"_index":796,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unless",{"_index":839,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unset",{"_index":441,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["unsubheaders",{"_index":248,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubheaderscallback",{"_index":286,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubscribe",{"_index":287,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["unsubscribing",{"_index":281,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["url",{"_index":367,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us/docs/web/api/closeevent",{"_index":120,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/closeeventhttps",{"_index":1138,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/api/event",{"_index":125,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/eventhttps",{"_index":1140,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/javascript/reference/global_objects/promise",{"_index":568,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["us/docs/web/javascript/reference/statements/async_function",{"_index":566,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["usage",{"_index":18,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["use",{"_index":491,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":131,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["useful",{"_index":467,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["user",{"_index":825,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["using",{"_index":173,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["utf8",{"_index":449,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["uuid",{"_index":606,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["v${x.replace",{"_index":1048,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1025,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1026,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1027,"title":{},"body":{"classes/Versions.html":{}}}],["v4",{"_index":605,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["valid",{"_index":346,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":166,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{}}}],["var",{"_index":753,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["variable",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1141,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":304,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"properties.html":{}}}],["versions",{"_index":109,"title":{"classes/Versions.html":{}},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{},"index.html":{}}}],["versions(['1.0",{"_index":479,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["versions.default.protocolversions",{"_index":914,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.js",{"_index":110,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["versions.v1_0",{"_index":1044,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_1",{"_index":1043,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1042,"title":{},"body":{"classes/Versions.html":{}}}],["very",{"_index":782,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["via",{"_index":601,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":86,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["wait",{"_index":396,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["waitforreceipt",{"_index":991,"title":{},"body":{"injectables/StompService.html":{}}}],["waitforreceipt(receiptid",{"_index":1007,"title":{},"body":{"injectables/StompService.html":{}}}],["want",{"_index":741,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":244,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["watch(opts",{"_index":760,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt",{"_index":678,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt(receiptid",{"_index":788,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watching",{"_index":804,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["way",{"_index":362,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["web",{"_index":853,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocket",{"_index":144,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/ws",{"_index":493,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/ws",{"_index":896,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":862,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketerrors",{"_index":674,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocketfactory",{"_index":336,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["websockets",{"_index":488,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["well",{"_index":94,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["whether",{"_index":43,"title":{},"body":{"interfaces/IFrame.html":{}}}],["wiring",{"_index":986,"title":{},"body":{"injectables/StompService.html":{}}}],["within",{"_index":240,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["work",{"_index":773,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["working",{"_index":1006,"title":{},"body":{"injectables/StompService.html":{}}}],["world",{"_index":265,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["wrapper",{"_index":590,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"index.html":{}}}],["ws",{"_index":897,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/ws",{"_index":697,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["ws://broker.329broker.com:15674/ws",{"_index":368,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":875,"title":{},"body":{"classes/Stomp.html":{}}}],["wserrorcallbacktype",{"_index":126,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["wsfn",{"_index":915,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/ws",{"_index":369,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["yes",{"_index":584,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["yield",{"_index":136,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFrame.html":{"url":"interfaces/IFrame.html","title":"interface - IFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-frame.ts\n        \n\n\n            \n                Description\n            \n            \n                It represents a STOMP frame. Many of the callbacks pass an IFrame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nIMessage is an extended IFrame.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            command\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            isBinaryBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body as Uint8Array\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body of the frame as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        command:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    STOMP Command\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Headers, key value pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBinaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isBinaryBody:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\n\n/**\n * It represents a STOMP frame. Many of the callbacks pass an IFrame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link IFrame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link IMessage} is an extended IFrame.\n */\nexport interface IFrame {\n  /**\n   * STOMP Command\n   */\n  command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  isBinaryBody: boolean;\n\n  /**\n   * body of the frame as string\n   */\n  readonly body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  readonly binaryBody: Uint8Array;\n}\n\n/**\n * Alias for {@link IFrame}\n */\nexport type Frame = IFrame;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMessage.html":{"url":"interfaces/IMessage.html","title":"interface - IMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-message.ts\n        \n\n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended FrameImpl, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                        IFrame\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ack\n                                        \n                                \n                                \n                                        \n                                            nack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame.js';\nimport { StompHeaders } from './stomp-headers.js';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link FrameImpl}, you can access [headers]{@link FrameImpl#headers}\n * and [body]{@link FrameImpl#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport interface IMessage extends IFrame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  nack: (headers?: StompHeaders) => void;\n}\n\n/**\n * Aliased to {@link IMessage}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type Message = IMessage;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Parameters for Client#publish.\nAliased as publishParams as well.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skipContentLengthHeader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame.js';\nimport { IMessage } from './i-message.js';\nimport { StompHeaders } from './stomp-headers.js';\nimport { Versions } from './versions.js';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link IMessage} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: IMessage) => void;\n\n/**\n * This callback will receive a {@link IFrame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = (receipt: IFrame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: T) => void;\n\n/**\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type wsErrorCallbackType = (evt: T) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}.\n * Aliased as publishParams as well.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Backward compatibility, switch to {@link IPublishParams}.\n */\nexport type publishParams = IPublishParams;\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType {\n  command: string | undefined;\n  headers: RawHeaderType[];\n  binaryBody: Uint8Array | undefined;\n}\n\n/**\n * @internal\n */\nexport interface IStompSocketMessageEvent {\n  data?: string | ArrayBuffer;\n}\n\n/**\n * Copied from Websocket interface to avoid dom typelib dependency.\n *\n * @internal\n */\nexport interface IStompSocket {\n  onclose: ((this: IStompSocket, ev?: any) => any) | null;\n  onerror: ((this: IStompSocket, ev: any) => any) | null;\n  onmessage: ((this: IStompSocket, ev: IStompSocketMessageEvent) => any) | null;\n  onopen: ((this: IStompSocket, ev?: any) => any) | null;\n  terminate?: ((this: IStompSocket) => any) | null;\n\n  /**\n   * Returns a string that indicates how binary data from the socket is exposed to scripts:\n   * We support only 'arraybuffer'.\n   */\n  binaryType: 'arraybuffer';\n\n  /**\n   * Returns the state of the socket connection. It can have the values of StompSocketState.\n   */\n  readonly readyState: number;\n\n  /**\n   * Closes the connection.\n   */\n  close(): void;\n  /**\n   * Transmits data using the connection. data can be a string or an ArrayBuffer.\n   */\n  send(data: string | ArrayBuffer): void;\n}\n\n/**\n * Possible states for the IStompSocket\n */\nexport enum StompSocketState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED,\n}\n\n/**\n * Possible activation state\n */\nexport enum ActivationState {\n  ACTIVE,\n  DEACTIVATING,\n  INACTIVE,\n}\n\n/**\n * @internal\n */\nexport interface IStomptHandlerConfig {\n  debug: debugFnType;\n  stompVersions: Versions;\n  connectHeaders: StompHeaders;\n  disconnectHeaders: StompHeaders;\n  heartbeatIncoming: number;\n  heartbeatOutgoing: number;\n  splitLargeFrames: boolean;\n  maxWebSocketChunkSize: number;\n  forceBinaryWSFrames: boolean;\n  logRawCommunication: boolean;\n  appendMissingNULLonIncoming: boolean;\n  discardWebsocketOnCommFailure: boolean;\n  onConnect: frameCallbackType;\n  onDisconnect: frameCallbackType;\n  onStompError: frameCallbackType;\n  onWebSocketClose: closeEventCallbackType;\n  onWebSocketError: wsErrorCallbackType;\n  onUnhandledMessage: messageCallbackType;\n  onUnhandledReceipt: frameCallbackType;\n  onUnhandledFrame: frameCallbackType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRxStompPublishParams.html":{"url":"interfaces/IRxStompPublishParams.html","title":"interface - IRxStompPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRxStompPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Additional options for RxStomp#publish\nPart of @stomp/rx-stomp\n\n            \n\n            \n                Extends\n            \n            \n                        IPublishParams\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            retryIfDisconnected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        retryIfDisconnected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryIfDisconnected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When set to true message will be enqueued if the connection\nto the broker is down.\nSuch messages will be published when connection is reestablished.\nDefault is true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IPublishParams } from '@stomp/stompjs';\n\n/**\n * Additional options for [RxStomp#publish]{@link RxStomp#publish}\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IRxStompPublishParams extends IPublishParams {\n  /**\n   * When set to `true` message will be enqueued if the connection\n   * to the broker is down.\n   * Such messages will be published when connection is reestablished.\n   *\n   * Default is `true`.\n   */\n  retryIfDisconnected?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransaction.html":{"url":"interfaces/ITransaction.html","title":"interface - ITransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-transaction.ts\n        \n\n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            abort\n                                        \n                                \n                                \n                                        \n                                            commit\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        abort:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Abort this transaction. See Client#abort for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commit:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Commit this transaction. See Client#commit for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    You will need to access this to send, ack, or nack within this transaction.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ITransaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IWatchParams.html":{"url":"interfaces/IWatchParams.html","title":"interface - IWatchParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IWatchParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-watch-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for RxStomp#watch.\nPart of @stomp/rx-stomp\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subHeaders\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subscribeOnlyOnce\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            unsubHeaders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The subscription target. It is likely to be broker dependent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subscription headers, defaults to {}\nIf header information can change over time and you are allowing automatic resubscriptions,\nconsider using a callback as the value rather than a string literal.\n             const subHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // The subHeadersCallback will be invoked before every (re)subscription.\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribeOnlyOnce\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribeOnlyOnce:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, the destination will be subscribed after each successful (re)connection to the broker.\nSet this flag to not automatically resubscribe.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsubHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsubHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Headers to be passed while unsubscribing, defaults to {}.\nOccasionally, headers may not be known while invoking RxStomp#watch,\nin such cases a callback can be passed that would return the headers.\n             const unsubHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n             // `unsubHeadersCallback` will be invoked to get the headers.\n             sub.unsubscribe();\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from '@stomp/stompjs';\n\n/**\n * Options for [RxStomp#watch]{@link RxStomp#watch}.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IWatchParams {\n  /**\n   * The subscription target. It is likely to be broker dependent.\n   */\n  readonly destination?: string;\n\n  /**\n   * Subscription headers, defaults to `{}`\n   *\n   * If header information can change over time and you are allowing automatic resubscriptions,\n   * consider using a callback as the value rather than a string literal.\n   *\n   * ```typescript\n   *              const subHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // The subHeadersCallback will be invoked before every (re)subscription.\n   * ```\n   */\n  readonly subHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * Headers to be passed while unsubscribing, defaults to `{}`.\n   *\n   * Occasionally, headers may not be known while invoking [RxStomp#watch]{@link RxStomp#watch},\n   * in such cases a callback can be passed that would return the headers.\n   *\n   * ```typescript\n   *              const unsubHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n   *              // `unsubHeadersCallback` will be invoked to get the headers.\n   *              sub.unsubscribe();\n   * ```\n   */\n  readonly unsubHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * By default, the destination will be subscribed after each successful (re)connection to the broker.\n   * Set this flag to not automatically resubscribe.\n   */\n  readonly subscribeOnlyOnce?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                correlateErrors\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:121\n\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:167\n\n                        \n                    \n\n            \n                \n                    Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#deactivate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive RxStomp as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:22\n\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:140\n\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:81\n\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait for ever.\nMaps to: Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        correlateErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:178\n\n                        \n                    \n\n            \n                \n                    Callback invoked on every ERROR frame. If the callback returns the ID of a currently\nsubscribed destination, the frame will be emitted as an error on the corresponding\nobservable(s), terminating them.\nImportantly, since those observables are now closed, this means a re-SUBSCRIBE to\nthe erroneous destination will not be attempted during an automatic reconnection of\nthe websocket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:50\n\n                        \n                    \n\n            \n                \n                    Enable client debugging?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:131\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:147\n\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:116\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:95\n\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatIncoming\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:102\n\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:47\n\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:126\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:88\n\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: Client#reconnectDelay\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:111\n\n                        \n                    \n\n            \n                \n                    Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:35\n\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n       // Try only versions 1.0 and 1.1\n       rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:73\n\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRPCConfig.html":{"url":"injectables/InjectableRxStompRPCConfig.html","title":"injectable - InjectableRxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPCConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:23\n\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:27\n\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompRPCConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRPCConfig extends RxStompRPCConfig {}\n\n// Backward compatibility\n/**\n * Deprecated, use {@link InjectableRxStompRPCConfig} instead\n */\nexport const InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                correlateErrors\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:121\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:167\n                        \n                    \n\n            \n                \n                    Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#deactivate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive RxStomp as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:22\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:140\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:81\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait for ever.\nMaps to: Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        correlateErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:178\n                        \n                    \n\n            \n                \n                    Callback invoked on every ERROR frame. If the callback returns the ID of a currently\nsubscribed destination, the frame will be emitted as an error on the corresponding\nobservable(s), terminating them.\nImportantly, since those observables are now closed, this means a re-SUBSCRIBE to\nthe erroneous destination will not be attempted during an automatic reconnection of\nthe websocket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:50\n                        \n                    \n\n            \n                \n                    Enable client debugging?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:131\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:147\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:116\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:95\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatIncoming\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:102\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:47\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:126\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:88\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: Client#reconnectDelay\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:111\n                        \n                    \n\n            \n                \n                    Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:35\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n       // Try only versions 1.0 and 1.1\n       rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:73\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { debugFnType, IFrame, StompHeaders, Versions } from '@stomp/stompjs';\nimport { RxStomp } from './rx-stomp.js';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   *\n   * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * Will retry if Stomp connection is not established in specified milliseconds.\n   * Default 0, which implies wait for ever.\n   *\n   * Maps to: [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * Automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@link Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Enable non-standards compliant mode of splitting of outgoing large text packets.\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n   * Useful with Java Spring based brokers.\n   *\n   * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * Maps to: [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#deactivate]{@link RxStomp#deactivate} in this callback.\n   *\n   * As of version 0.1.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   *\n   * As of 0.3.5, this callback will receive [RxStomp]{@link RxStomp} as parameter.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: (client: RxStomp) => void | Promise;\n\n  /**\n   * Callback invoked on every ERROR frame. If the callback returns the ID of a currently\n   * subscribed destination, the frame will be emitted as an error on the corresponding\n   * observable(s), terminating them.\n   *\n   * Importantly, since those observables are now closed, this means a re-SUBSCRIBE to\n   * the erroneous destination will _not_ be attempted during an automatic reconnection of\n   * the websocket.\n   */\n  public correlateErrors?: (error: IFrame) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:32\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:58\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:69\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { filter, first, Observable, Observer, Subscription } from 'rxjs';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { IMessage, IPublishParams, StompHeaders } from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp.js';\nimport {\n  RxStompRPCConfig,\n  setupReplyQueueFnType,\n} from './rx-stomp-rpc-config.js';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  };\n\n  private _repliesObservable: Observable;\n\n  private _customReplyQueue: boolean = false;\n\n  // This is used to ensure that underlying subscription remains subscribed\n  private _dummySubscription: Subscription;\n\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n   */\n  constructor(\n    private rxStomp: RxStomp,\n    private stompRPCConfig?: RxStompRPCConfig\n  ) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._customReplyQueue = true;\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  public rpc(params: IPublishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  public stream(params: IPublishParams): Observable {\n    // defensively copy\n    const headers: StompHeaders = { ...(params.headers || {}) };\n\n    if (!this._repliesObservable) {\n      const repliesObservable = this._setupReplyQueue(\n        this._replyQueueName,\n        this.rxStomp\n      );\n\n      // In case of custom queue, ensure it remains subscribed\n      if (this._customReplyQueue) {\n        this._dummySubscription = repliesObservable.subscribe(() => {});\n      }\n\n      this._repliesObservable = repliesObservable;\n    }\n\n    return Observable.create((rpcObserver: Observer) => {\n      let defaultMessagesSubscription: Subscription;\n\n      const correlationId = headers['correlation-id'] || uuid();\n\n      defaultMessagesSubscription = this._repliesObservable\n        .pipe(\n          filter((message: IMessage) => {\n            return message.headers['correlation-id'] === correlationId;\n          })\n        )\n        .subscribe((message: IMessage) => {\n          rpcObserver.next(message);\n        });\n\n      // send an RPC request\n      headers['reply-to'] = this._replyQueueName;\n      headers['correlation-id'] = correlationId;\n\n      this.rxStomp.publish({ ...params, headers });\n\n      return () => {\n        // Cleanup\n        defaultMessagesSubscription.unsubscribe();\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:23\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:27\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMessage } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp.js';\n\n/**\n * See the guide for example\n *\n * Part of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (\n  replyQueueName: string,\n  rxStomp: RxStomp\n) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPC\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            Create an instance, typically called by Angular Dependency Injection framework.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        InjectableRxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:58\n\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:69\n\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\n\nimport { RxStompRPC } from '@stomp/rx-stomp';\nimport { RxStompService } from './rx-stomp.service';\nimport { InjectableRxStompRPCConfig } from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  /**\n   * Create an instance, typically called by Angular Dependency Injection framework.\n   *\n   * @param rxStomp\n   * @param stompRPCConfig\n   */\n  constructor(\n    rxStomp: RxStompService,\n    @Optional() stompRPCConfig?: InjectableRxStompRPCConfig\n  ) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStomp\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:300\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:268\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:360\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:347\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(parameters: IRxStompPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:420\n\n                \n            \n\n\n            \n                \n                    Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nIf you do not want that behavior,\nplease set retryIfDisconnected to false\nin the parameters.\nWhen false, this function will raise an error if message could not be sent immediately.\nMaps to: Client#publish\nSee: IRxStompPublishParams and IPublishParams\n       rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n\n       // Only destination is mandatory parameter\n       rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n\n       // Skip content-length header in the frame to the broker\n       rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n\n       var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n       // setting content-type header is not mandatory, however a good practice\n       rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n                        headers: {'content-type': 'application/octet-stream'}});\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                                IRxStompPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:473\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code reads strange with two subscribe calls\nfollowing each other and both meaning very different things.\nThis method has two alternate syntax, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:616\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:62\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:54\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:77\n\n                        \n                    \n\n            \n                \n                    Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:132\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:107\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:94\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:119\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:142\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        WebSocketClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/compatibility/stomp.ts:41\n                        \n                    \n\n            \n                \n                    In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n       StompJs = require('../../esm5/');\n       Stomp = StompJs.Stomp;\n       Stomp.WebSocketClass = require('websocket').w3cwebsocket;Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        client\n                        \n                    \n                \n            \n            \n                \n                    \n                    client(url: string, protocols?: string[])\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:57\n                \n            \n\n\n            \n                \n                    This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n       var url = \"ws://localhost:61614/stomp\";\n       var client = Stomp.client(url);Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocols\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        over\n                        \n                    \n                \n            \n            \n                \n                    \n                    over(ws: any)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:103\n                \n            \n\n\n            \n                \n                    This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n       var client = Stomp.over(function(){\n         return new WebSocket('ws://localhost:15674/ws')\n       });Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ws\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\nimport { IStompSocket } from '../types.js';\n\n/**\n * @internal\n */\ndeclare const WebSocket: {\n  prototype: IStompSocket;\n  new (url: string, protocols?: string | string[]): IStompSocket;\n};\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn(\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\n      );\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nThere used to be a class with the same name in @stomp/ng2-stompjs, which has been replaced by\nRxStompConfig and InjectableRxStompConfig.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                onChangeState\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketError\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:71\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:106\n                        \n                    \n\n            \n                \n                    See Client#beforeConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:26\n                        \n                    \n\n            \n                \n                    See Client#brokerURL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:81\n                        \n                    \n\n            \n                \n                    See Client#connectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:41\n                        \n                    \n\n            \n                \n                    See Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:141\n                        \n                    \n\n            \n                \n                    See Client#debug.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:146\n                        \n                    \n\n            \n                \n                    See Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:86\n                        \n                    \n\n            \n                \n                    See Client#disconnectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:66\n                        \n                    \n\n            \n                \n                    See Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:51\n                        \n                    \n\n            \n                \n                    See Client#heartbeatIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:56\n                        \n                    \n\n            \n                \n                    See Client#heartbeatOutgoing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:136\n                        \n                    \n\n            \n                \n                    See Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:76\n                        \n                    \n\n            \n                \n                    See Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onChangeState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:151\n                        \n                    \n\n            \n                \n                    See Client#onChangeState.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:111\n                        \n                    \n\n            \n                \n                    See Client#onConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDisconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:116\n                        \n                    \n\n            \n                \n                    See Client#onDisconnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onStompError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:121\n                        \n                    \n\n            \n                \n                    See Client#onStompError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:101\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledFrame.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         messageCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:91\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledMessage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledReceipt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:96\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledReceipt.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketClose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         closeEventCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:126\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketClose.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         wsErrorCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:131\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:46\n                        \n                    \n\n            \n                \n                    See Client#reconnectDelay.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:61\n                        \n                    \n\n            \n                \n                    See Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:31\n                        \n                    \n\n            \n                \n                    See See Client#stompVersions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:36\n                        \n                    \n\n            \n                \n                    See Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\nimport {\n  ActivationState,\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType,\n} from './types.js';\nimport { Versions } from './versions.js';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * There used to be a class with the same name in `@stomp/ng2-stompjs`, which has been replaced by\n * {@link RxStompConfig} and {@link InjectableRxStompConfig}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void | Promise;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n\n  /**\n   * See [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * See [Client#onChangeState]{@link Client#onChangeState}.\n   */\n  public onChangeState?: (state: ActivationState) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as IFrame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders {\n  [key: string]: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you want to manually configure and initialize the service\nplease use StompRService\n\n            \n\n            \n                Extends\n            \n            \n                        StompRService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:147\n\n                \n            \n\n\n            \n                \n                    It will disconnect from the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        initAndConnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    initAndConnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:136\n\n                \n            \n\n\n            \n                \n                    It will connect to the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:161\n\n                \n            \n\n\n            \n                \n                    It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string | publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(queueName: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:195\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        waitForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:230\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.waitForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:300\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:268\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:360\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:347\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:473\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code reads strange with two subscribe calls\nfollowing each other and both meaning very different things.\nThis method has two alternate syntax, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:616\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         StompRService\n\n                            \n                        \n                    \n                        \n                                Defined in         StompRService:40\n\n                        \n                    \n\n            \n                \n                    State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:62\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:54\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:77\n\n                        \n                    \n\n            \n                \n                    Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:132\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:107\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:94\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:119\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:142\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StompSubscription.html":{"url":"interfaces/StompSubscription.html","title":"interface - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            unsubscribe\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id associated with this subscription.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsubscribe\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsubscribe:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unsubscribe. See Client#unsubscribe for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:27\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:10\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.1'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:14\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.2'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:18\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        versions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        protocolVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    protocolVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:47\n                \n            \n\n\n            \n                \n                    Used while creating a WebSocket\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        supportedVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    supportedVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:40\n                \n            \n\n\n            \n                \n                    Used as part of CONNECT STOMP Frame\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n  ]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {}\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp-r.service.ts\n            \n            injectable\n            StompRService\n            \n                95 %\n                (21/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n            \n            injectable\n            StompService\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n            \n            injectable\n            InjectableRxStompConfig\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            injectable\n            InjectableRxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            variable\n            InjectableRxStompRpcConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n            \n            injectable\n            RxStompRPCService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n            \n            function\n            rxStompServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n            \n            injectable\n            RxStompService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n            \n            interface\n            IRxStompPublishParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-watch-params.ts\n            \n            interface\n            IWatchParams\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            class\n            RxStompConfig\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            class\n            RxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            class\n            RxStompRPC\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            class\n            RxStomp\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (41/41)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            class\n            CompatClient\n            \n                100 %\n                (44/44)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            class\n            Stomp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-frame.ts\n            \n            interface\n            IFrame\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-message.ts\n            \n            interface\n            IMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-transaction.ts\n            \n            interface\n            ITransaction\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            class\n            StompConfig\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            class\n            StompHeaders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            interface\n            StompSubscription\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            interface\n            IPublishParams\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            class\n            Versions\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActivationState   (consolidated/.../types.ts)\n                        \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompSocketState   (consolidated/.../types.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivationState\n                    \n                \n                    \n                        \n                            Possible activation state\n\n                        \n                    \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                 DEACTIVATING\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StompSocketState\n                    \n                \n                    \n                        \n                            Possible states for the IStompSocket\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPart of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/app/compatibility/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rxStompServiceFactory\n                        \n                    \n                \n            \n            \n                \nrxStompServiceFactory(rxStompConfig: InjectableRxStompConfig)\n                \n            \n\n\n\n\n            \n                \n                    Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: \nfor a step-by-step guide.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                InjectableRxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RxStompService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNavigating through the API docs\nThese docs correspond to development versions. Please see api-docs for NPM released versions.\nThe API docs cover three libraries:\n\n@stomp/stompjs\n@stomp/rx-stomp - builds over @stomp/stompjs\n@stomp/ng2-stompjs - thin wrapper over @stomp/rx-stomp\n\nThe documentation for classes indicate which library each of the classes\nbelong. See the guides for more information and tutorials.\nThese documents have been generated using Compodoc.\nstompjs\nPreferred entry point is Client.\nIf you are using compatibility mode your entry point would be\nStomp.\nrx-stomp\nYour entry point would be RxStomp.\nFor RPC RxStompRPC.\nng2-stompjs\nInjectable versions of rx-stomp classes:\n\nRxStompService for RxStomp\nInjectableRxStompConfig for RxStompConfig\nRxStompRPCService for RxStompRPC\nInjectableRxStompRPCConfig for RxStompRPCConfig\nrxStompServiceFactory\n\nDeprecated classes:\n\nStompRService\nStompService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : Documentation for StompJS family\n        \n            License : Apache-2.0\n        \n            Author : Deepak Kumar\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            Frame   (consolidated/.../i-frame.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            Message   (consolidated/.../i-message.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            publishParams   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                        \n                            wsErrorCallbackType   (consolidated/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    closeEventCallbackType\n                \n            \n            \n                \n                    This callback will receive a [CloseEvent]://developer.mozilla.org/en-US/docs/Web/API/CloseEventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    debugFnType\n                \n            \n            \n                \n                    This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    frameCallbackType\n                \n            \n            \n                \n                    This callback will receive a IFrame as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    messageCallbackType\n                \n            \n            \n                \n                    This callback will receive a IMessage as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    publishParams\n                \n            \n            \n                \n                    Backward compatibility, switch to IPublishParams.\n\n                \n            \n            \n                \n                            IPublishParams\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    wsErrorCallbackType\n                \n            \n            \n                \n                    This callback will receive an [Event]://developer.mozilla.org/en-US/docs/Web/API/Eventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-frame.ts\n    \n    \n        \n            \n                \n                    \n                    Frame\n                \n            \n            \n                \n                    Alias for IFrame\n\n                \n            \n            \n                \n                            IFrame\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-message.ts\n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                    Aliased to IMessage.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            IMessage\n\n                \n            \n        \n    \n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n    \n        \n            \n                \n                    \n                    setupReplyQueueFnType\n                \n            \n            \n                \n                    See the guide for example\nPart of @stomp/rx-stomp\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InjectableRxStompRpcConfig   (consolidated/.../injectable-rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InjectableRxStompRpcConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : InjectableRxStompRPCConfig\n                    \n                \n\n            \n                \n                    Deprecated, use InjectableRxStompRPCConfig instead\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
