var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/IFrame.html",[0,0.652,1,1.162]],["body/interfaces/IFrame.html",[0,0.745,1,2.219,2,1.459,3,0.472,4,0.472,5,0.412,6,1.976,7,2.513,8,0.412,9,3.783,10,0.252,11,2.467,12,3.783,13,3.263,14,3.263,15,3.263,16,1.722,17,4.571,18,3.263,19,2.087,20,2.566,21,1.651,22,0.392,23,0.87,24,1.568,25,3.783,26,0.25,27,0.694,28,3.836,29,3.306,30,4.722,31,5.373,32,3.975,33,0.577,34,0.037,35,1.121,36,1.387,37,3.263,38,1.722,39,4.571,40,1.741,41,3.263,42,2.566,43,4.571,44,4.571,45,1.722,46,3.783,47,0.67,48,1.976,49,2.913,50,2.913,51,1.568,52,0.612,53,2.566,54,2.913,55,0.027,56,0.027]],["title/interfaces/IMessage.html",[0,0.652,24,1.058]],["body/interfaces/IMessage.html",[0,0.753,1,1.923,2,1.475,3,0.477,4,0.477,5,0.417,6,1.998,8,0.417,10,0.155,20,2.584,21,1.45,22,0.437,23,0.972,24,1.851,25,3.81,26,0.253,27,0.819,29,1.998,33,0.516,34,0.037,36,1.317,45,1.735,47,0.877,48,1.998,49,2.945,51,1.579,52,0.617,55,0.027,56,0.027,57,2.541,58,2.325,59,2.51,60,2.584,61,1.475,62,2.896,63,4.604,64,1.09,65,3.21,66,1.963,67,2.102,68,4.086,69,4.736,70,1.533,71,4.465,72,5.396,73,3.852,74,2.033,75,3.394,76,4.604,77,4.604,78,2.945,79,3.559,80,2.945,81,3.559,82,3.559,83,3.559,84,2.945,85,3.559,86,1.735,87,3.559,88,2.541]],["title/interfaces/IPublishParams.html",[0,0.652,89,1.278]],["body/interfaces/IPublishParams.html",[0,1.054,1,1.519,2,0.948,3,0.307,4,0.307,5,0.268,8,0.268,10,0.099,11,1.671,16,1.276,21,1.465,22,0.463,23,1.029,24,1.383,26,0.162,27,0.514,28,3.396,29,2.971,30,1.893,32,3.182,33,0.57,34,0.038,35,1.105,36,1.286,40,1.816,41,2.878,47,0.849,48,1.284,51,1.529,52,0.771,53,1.284,55,0.02,56,0.02,59,0.948,61,1.971,78,1.893,86,1.994,88,2.418,89,1.847,90,1.439,91,1.276,92,2.802,93,2.878,94,3.386,95,1.217,96,2.515,97,3.688,98,2.418,99,2.802,100,0.962,101,2.802,102,2.802,103,2.804,104,2.802,105,1.546,106,1.901,107,3.386,108,2.288,109,1.276,110,1.633,111,2.172,112,2.402,113,1.901,114,1.284,115,2.418,116,3.556,117,2.288,118,3.386,119,2.288,120,2.418,121,3.386,122,3.386,123,2.288,124,2.288,125,2.418,126,2.288,127,1.633,128,1.439,129,1.633,130,0.785,131,3.386,132,3.396,133,3.386,134,2.288,135,1.633,136,1.284,137,2.288,138,3.386,139,3.386,140,4.457,141,4.757,142,2.288,143,1.045,144,2.288,145,2.288,146,2.288,147,1.633,148,3.68,149,2.288,150,4.457,151,3.396,152,2.288,153,2.288,154,2.288,155,2.288,156,1.162,157,1.893,158,2.13,159,2.288,160,2.288,161,1.284,162,2.288,163,1.901,164,2.036,165,1.893,166,2.802,167,2.288,168,2.25,169,2.288,170,1.633,171,2.288,172,0.862,173,2.288,174,2.418,175,1.893,176,3.386,177,1.439,178,1.893,179,1.893,180,1.439,181,1.893,182,1.633,183,1.439,184,1.893,185,1.893,186,2.288,187,1.155,188,1.439,189,1.155,190,1.439,191,1.155,192,1.155,193,1.439,194,1.439,195,1.439,196,1.439,197,1.439,198,1.439,199,1.893,200,1.893,201,1.893,202,1.893,203,1.893,204,1.893,205,1.893,206,1.893]],["title/interfaces/IRxStompPublishParams.html",[0,0.652,207,1.94]],["body/interfaces/IRxStompPublishParams.html",[0,0.868,2,1.699,3,0.55,4,0.55,5,0.48,8,0.48,10,0.237,16,1.897,22,0.431,23,0.781,26,0.291,27,0.764,33,0.414,34,0.037,40,1.868,47,0.781,52,0.55,55,0.03,56,0.03,59,2.086,67,2.299,89,2.257,95,1.065,100,1.43,105,2.299,106,3.188,164,2.868,207,3.167,208,1.699,209,2.928,210,1.407,211,2.58,212,2.928,213,3.594,214,2.826,215,5.034,216,1.43,217,4.7,218,5.034,219,5.034,220,4.166,221,3.594,222,5.034,223,5.034,224,4.102]],["title/interfaces/ITransaction.html",[0,0.652,225,2.202]],["body/interfaces/ITransaction.html",[0,0.855,2,1.675,3,0.542,4,0.542,5,0.473,6,2.269,8,0.473,19,2.278,20,2.801,22,0.346,23,0.77,26,0.287,27,0.757,33,0.547,34,0.037,35,1.03,52,0.542,55,0.029,56,0.029,64,1.076,66,1.991,68,3.562,69,4.129,70,1.606,86,1.88,225,3.562,226,3.345,227,5.992,228,3.345,229,3.345,230,4.042,231,4.042,232,4.042,233,5.913,234,5.913,235,2.342,236,4.989,237,4.989,238,3.139,239,4.129,240,4.042,241,4.042]],["title/interfaces/IWatchParams.html",[0,0.652,242,1.731]],["body/interfaces/IWatchParams.html",[0,0.566,2,1.109,3,0.359,4,0.359,5,0.313,8,0.313,10,0.165,16,1.982,21,1.619,22,0.325,23,0.51,26,0.19,27,0.576,33,0.485,34,0.038,35,0.964,36,1.451,38,1.43,40,1.512,45,1.807,47,0.51,52,0.359,53,2.692,55,0.022,56,0.022,59,1.987,60,2.692,61,1.987,95,1.169,96,2.877,100,1.078,103,2.387,105,1.733,172,1.43,208,1.109,209,1.911,212,1.911,214,2.13,216,1.078,220,3.14,242,2.13,243,1.684,244,4.796,245,5.259,246,4.796,247,5.259,248,3.795,249,3.795,250,4.796,251,3.14,252,2.709,253,2.709,254,2.709,255,3.795,256,2.709,257,2.709,258,3.795,259,3.795,260,2.709,261,2.523,262,5.259,263,2.179,264,4.796,265,4.796,266,4.796,267,4.796,268,3.969,269,3.969,270,4.796,271,2.692,272,2.709,273,3.795,274,2.387,275,2.13,276,3.795,277,2.709,278,3.795,279,2.13,280,2.709,281,3.795,282,3.14,283,2.709,284,2.709,285,3.795,286,5.259,287,3.017,288,2.709,289,1.916,290,2.709,291,3.795,292,3.795,293,3.795,294,3.14]],["title/injectables/InjectableRxStompConfig.html",[295,0.876,296,1.557]],["body/injectables/InjectableRxStompConfig.html",[3,0.265,4,0.265,5,0.232,8,0.232,10,0.234,11,1.258,16,1.85,18,1.413,19,1.687,20,1.111,21,1.05,22,0.26,26,0.141,27,0.461,33,0.584,34,0.037,35,0.578,36,0.784,38,1.144,40,1.533,42,1.111,47,0.578,51,1.267,52,0.265,55,0.018,56,0.018,61,1.954,64,0.898,66,1.267,67,1.387,70,1.439,74,0.746,86,0.746,95,1.296,96,1.533,100,0.863,105,2.241,109,1.561,111,0.904,112,1,113,1.111,114,1.705,130,1.267,136,1.705,143,1.687,156,0.679,161,1.111,164,1.865,168,2.256,172,1.561,177,1.245,180,1.245,187,1.865,188,1.91,189,1.533,190,1.91,191,1.533,192,1.533,193,1.91,194,1.91,195,1.91,196,1.91,197,1.91,198,1.91,210,0.679,216,0.562,235,0.82,252,2.168,256,1.413,257,1.413,261,1.387,263,1.717,271,1.705,272,1.413,274,1.245,279,1.111,282,2.513,283,2.958,295,1.177,296,1.533,297,1,298,0.746,299,1.245,300,0.82,301,0.948,302,0.948,303,0.373,304,1.392,305,2.249,306,2.513,307,2.168,308,2.513,309,1.533,310,1.892,311,2.513,312,2.513,313,2.513,314,2.958,315,1.258,316,4.143,317,1.865,318,3.037,319,3.037,320,2.074,321,2.513,322,3.037,323,3.037,324,3.037,325,2.168,326,3.037,327,3.037,328,3.037,329,2.513,330,1.913,331,2.168,332,1.705,333,2.168,334,2.513,335,1.705,336,2.168,337,3.245,338,1.642,339,1.98,340,1.413,341,1.98,342,1.638,343,1.042,344,1.638,345,1.638,346,2.168,347,1.245,348,1.638,349,1.245,350,1.638,351,1.705,352,1.111,353,1.91,354,1.111,355,1.638,356,1.638,357,1.638,358,1.638,359,1.638,360,1.638,361,1,362,1.413,363,1.245,364,1.638,365,3.522,366,1.413,367,1.98,368,1.413,369,1.638,370,1.638,371,1.413,372,2.513,373,2.513,374,2.324,375,1.98,376,1.638,377,2.513,378,1.245,379,1.245,380,1.638,381,1.638,382,2.168,383,1.413,384,1.638,385,1.638,386,1.245,387,0.904,388,1.245,389,1.413,390,1.98,391,1.638,392,1.245,393,1.638,394,3.428,395,2.606,396,1.638,397,1.638,398,1.638,399,1.413,400,2.168,401,1.638,402,1.245,403,1.98,404,1.91,405,1.638,406,1.638,407,1.245,408,1.638,409,1.638,410,1.638,411,1.638,412,1.638,413,1.638,414,1.413,415,1.245,416,1.638,417,2.513,418,1.705,419,1.705,420,1.98,421,2.513,422,1,423,1.638,424,1.245,425,1.245,426,1.98,427,1.413,428,1.98,429,1.638,430,1.413,431,1.98,432,1.413,433,1.98,434,1.638,435,2.513,436,2.513,437,3.057,438,1.413,439,1.98,440,2.513,441,1.413,442,1.98,443,1.638,444,1.245,445,1.638,446,1.638,447,1.638,448,1.638,449,1.638,450,1.111,451,1.638,452,1.413,453,1.638,454,1.638,455,1.413,456,1.413,457,1.98,458,1.413,459,1.98,460,1.111,461,1.638,462,1.413,463,1.98,464,1.111,465,1.638,466,1.245,467,2.168,468,1.638,469,1.638,470,1.638,471,1.638,472,2.168,473,1.638,474,1.638,475,1.638,476,1.245,477,1.98,478,1.245,479,1.413,480,2.168,481,2.168,482,1.638,483,1.638,484,1.687,485,1.638,486,1.638,487,1.413,488,1.98,489,1.413,490,1.413,491,2.168,492,1.413,493,1.638,494,1.638,495,1.245,496,1.413,497,0.82,498,2.513,499,1.638,500,1.413,501,1.638,502,1.245,503,1.111]],["title/injectables/InjectableRxStompRPCConfig.html",[295,0.876,504,1.557]],["body/injectables/InjectableRxStompRPCConfig.html",[3,0.514,4,0.514,5,0.449,8,0.449,10,0.21,22,0.414,26,0.272,27,0.733,33,0.488,34,0.037,35,0.73,47,0.919,51,1.812,52,0.647,55,0.028,56,0.028,64,1.056,67,2.204,95,1.173,100,1.089,127,2.737,128,2.412,210,1.315,216,1.089,261,1.751,295,1.576,297,1.936,298,1.445,299,2.412,300,1.589,301,1.732,302,1.508,303,0.387,304,1.819,310,2.204,315,2.298,330,1.732,337,2.71,338,1.372,497,1.589,503,2.152,504,2.886,505,1.589,506,2.991,507,3.995,508,3.037,509,3.037,510,3.037,511,3.995,512,3.995,513,3.834,514,1.315,515,3.447,516,3.037,517,2.737,518,2.737,519,2.737,520,3.173,521,2.412,522,3.173,523,2.412,524,3.834,525,3.173,526,1.936,527,2.152]],["title/classes/RxStompConfig.html",[303,0.312,305,1.162]],["body/classes/RxStompConfig.html",[1,0.864,3,0.186,4,0.186,5,0.163,8,0.163,9,1.897,10,0.256,11,1.405,16,1.944,18,1.636,19,1.047,20,1.287,21,1.147,22,0.196,23,0.265,26,0.099,27,0.348,33,0.546,34,0.038,35,0.714,36,0.968,40,1.633,42,1.287,45,0.864,47,0.436,52,0.186,55,0.013,56,0.013,58,1.157,61,2.066,64,0.646,66,1.385,70,1.314,74,0.864,86,1.102,95,1.256,96,1.712,100,0.964,105,2.355,109,1.742,111,1.047,112,1.157,113,1.641,114,1.904,130,1.385,136,1.904,143,1.843,156,0.786,161,1.287,164,2.038,168,2.404,177,1.442,180,1.442,187,1.894,188,1.839,189,1.476,190,1.839,191,1.476,192,1.476,193,1.839,194,1.839,195,1.839,196,1.839,197,1.839,198,1.839,208,2.261,210,0.477,216,0.651,235,0.95,252,2.421,256,1.636,257,1.636,263,1.848,271,1.904,272,1.636,274,1.442,279,1.287,294,1.151,300,0.576,303,0.141,304,0.864,305,0.864,310,1.549,317,1.712,320,1.287,330,1.905,331,2.088,332,1.641,333,2.088,334,2.42,335,1.641,336,2.088,338,1.537,340,1.636,342,1.897,343,1.53,344,1.897,345,1.897,346,2.421,347,1.442,348,1.897,349,0.875,350,1.897,351,1.904,352,1.287,353,2.133,354,1.287,355,1.897,356,1.897,357,1.897,358,1.897,359,1.897,360,1.897,361,1.157,362,1.636,363,1.442,364,1.897,365,3.637,366,1.636,368,1.636,369,1.897,370,1.897,371,1.636,372,2.806,373,2.806,374,2.539,376,1.897,377,2.806,378,1.442,379,1.442,380,1.897,381,1.897,382,2.421,383,1.636,384,1.897,385,1.897,386,1.442,387,1.047,388,1.442,389,1.636,391,1.897,392,1.442,393,1.897,394,3.692,395,2.806,396,1.897,397,1.897,398,1.897,399,1.636,400,2.421,401,1.897,402,1.442,404,2.36,405,1.897,406,1.897,407,1.442,408,1.897,409,1.897,410,1.897,411,1.897,412,1.897,413,1.897,414,1.636,415,1.442,416,1.897,417,2.806,418,1.904,419,1.904,421,2.806,422,1.476,423,1.897,424,1.442,425,1.442,427,1.636,429,1.897,430,1.636,432,1.636,434,1.897,435,2.806,436,2.806,437,3.34,438,1.636,440,2.806,441,1.636,443,1.897,444,1.442,445,1.897,446,1.897,447,1.897,448,1.897,449,1.897,450,1.287,451,1.897,452,1.636,453,1.897,454,1.897,455,1.636,456,1.636,458,1.636,460,1.287,461,1.897,462,1.636,464,1.287,465,1.897,466,1.442,467,2.421,468,1.897,469,1.897,470,1.897,471,1.897,472,2.421,473,1.897,474,1.897,475,1.897,476,1.442,478,1.442,479,1.636,480,2.421,481,2.678,482,1.897,483,1.897,484,1.843,485,1.897,486,1.151,487,1.636,489,1.636,490,1.636,491,2.421,492,2.421,493,1.897,494,1.897,495,1.442,496,1.636,497,0.95,498,2.806,499,1.897,500,1.636,501,1.897,502,1.442,528,0.524,529,2.756,530,2.292,531,2.292,532,1.897,533,1.391,534,1.391,535,1.391,536,1.391,537,1.391,538,1.391,539,1.391,540,1.391,541,1.391,542,1.391,543,1.391,544,1.391,545,1.391,546,1.391,547,1.391,548,1.391,549,1.391,550,1.391,551,0.875,552,1.391,553,2.292,554,2.088,555,1.897,556,1.151,557,1.151,558,0.993,559,1.151,560,1.151,561,1.151,562,1.151,563,1.897,564,1.151,565,1.151,566,1.151,567,1.151,568,1.151,569,1.151,570,1.391,571,1.391,572,1.391,573,1.391,574,1.391,575,1.391,576,1.151,577,1.391]],["title/classes/RxStompRPC.html",[303,0.312,578,1.731]],["body/classes/RxStompRPC.html",[3,0.337,4,0.337,5,0.295,8,0.295,10,0.231,21,1.325,22,0.311,23,0.479,24,1.461,26,0.179,33,0.43,34,0.038,36,0.937,40,0.863,45,1.368,47,0.941,52,0.337,55,0.021,56,0.021,58,1.833,59,1.043,60,2.618,64,1.035,66,1.246,74,1.757,89,2.2,91,1.605,95,0.901,106,1.413,130,1.461,156,1.246,172,1.368,208,1.932,210,1.246,216,1.032,235,2.2,238,1.583,261,1.945,263,2.049,269,2.083,274,2.284,288,1.797,289,2.601,290,2.592,301,1.456,303,0.254,309,1.833,310,2.129,315,1.932,330,1.609,338,1.21,343,1.767,352,1.413,371,1.797,450,2.038,505,2.33,506,2.355,508,2.934,509,3.241,510,2.934,514,1.461,515,1.797,516,1.583,517,1.797,518,1.797,519,1.797,523,2.284,527,2.038,528,0.948,529,2.355,551,1.583,578,2.038,579,2.083,580,3.005,581,3.631,582,3.631,583,1.833,584,2.934,585,2.038,586,2.083,587,3.859,588,2.517,589,2.038,590,1.583,591,3.005,592,2.517,593,3.859,594,3.111,595,3.005,596,2.592,597,3.005,598,3.005,599,3.525,600,3.005,601,2.517,602,2.284,603,3.005,604,3.005,605,3.859,606,2.592,607,2.517,608,2.517,609,2.592,610,2.517,611,3.041,612,2.517,613,3.859,614,5.311,615,2.517,616,2.517,617,2.517,618,2.517,619,2.517,620,1.797,621,3.631,622,1.583,623,3.631,624,2.517,625,3.631,626,4.26,627,3.631,628,3.631,629,3.631,630,2.517,631,2.517,632,2.517,633,2.517,634,2.517,635,2.517,636,4.26,637,3.631,638,2.517,639,2.517,640,2.517,641,2.517,642,2.517,643,3.631,644,4.26,645,3.631,646,2.517,647,2.517,648,2.517,649,2.517,650,2.517,651,2.517,652,2.517,653,2.517]],["title/classes/RxStompRPCConfig.html",[303,0.312,506,1.557]],["body/classes/RxStompRPCConfig.html",[3,0.489,4,0.489,5,0.428,8,0.428,10,0.237,22,0.313,23,0.695,24,1.253,26,0.259,27,0.71,33,0.522,34,0.037,35,0.984,47,0.984,52,0.627,55,0.027,56,0.027,64,1.116,95,1.152,100,1.33,208,2.14,210,1.253,216,1.038,288,2.608,289,2.364,300,1.513,301,1.462,303,0.369,310,2.488,315,2.334,330,1.8,338,1.33,343,1.772,505,2.334,506,2.364,508,2.945,509,2.945,510,2.945,511,4.508,512,4.275,514,1.606,515,3.89,516,3.427,517,3.342,518,3.342,519,3.342,520,3.874,521,2.945,522,3.874,523,3.25,525,3.874,528,1.376,529,2.608,551,2.298,613,3.874,654,3.342,655,3.688,656,3.652,657,3.652]],["title/injectables/RxStompRPCService.html",[295,0.876,658,1.94]],["body/injectables/RxStompRPCService.html",[3,0.45,4,0.45,5,0.394,8,0.394,10,0.229,21,0.955,22,0.38,26,0.239,33,0.501,34,0.037,45,1.266,47,1.005,51,1.521,52,0.45,55,0.026,56,0.026,58,2.239,64,1.005,66,1.153,67,2.025,74,1.266,89,2.187,91,1.87,95,1.16,130,1.153,147,3.166,156,1.521,210,1.521,216,0.955,235,1.838,289,2.239,290,2.4,295,1.559,297,1.697,298,1.671,301,1.648,302,1.385,303,0.34,304,1.671,315,2.187,320,2.489,330,1.648,337,2.489,338,1.41,343,1.702,354,2.489,450,1.887,503,1.887,504,2.665,505,2.273,507,3.67,508,2.79,509,2.79,510,2.79,514,1.702,527,1.887,578,3.225,583,2.239,584,3.122,585,2.489,586,2.781,587,4.54,589,2.489,590,2.114,591,2.781,593,3.67,594,2.79,595,2.781,596,2.4,597,2.781,598,2.781,599,3.67,600,2.781,602,2.114,603,2.781,604,2.781,605,3.67,606,2.4,654,2.4,658,2.79,659,2.79,660,2.781,661,2.41,662,3.361,663,4.435,664,3.67,665,4.435,666,3.361,667,3.361,668,3.361,669,4.435,670,3.361]],["title/injectables/RxStompService.html",[295,0.876,661,1.408]],["body/injectables/RxStompService.html",[1,1.412,3,0.221,4,0.221,5,0.193,8,0.193,10,0.248,11,1.972,13,1.177,14,1.878,15,3.272,16,2.073,19,1.499,21,1.241,22,0.225,24,0.565,26,0.117,27,0.399,28,1.878,29,2.572,32,1.878,33,0.57,34,0.036,35,0.831,38,1.412,40,0.565,41,2.344,42,0.925,45,0.621,47,0.501,51,1.286,52,0.221,53,3.088,55,0.015,56,0.015,59,1.809,61,1.553,62,1.037,64,0.934,65,1.037,66,0.902,67,1.201,70,0.933,73,2.344,74,1.412,75,2.358,86,1.645,89,0.683,91,1.727,92,1.364,95,0.866,96,1.328,97,2.177,98,1.177,100,0.748,101,3.792,102,3.39,103,2.994,104,2.717,105,1.499,106,1.843,111,0.753,112,1.658,114,1.477,130,0.902,135,3.398,136,1.477,143,1.201,151,1.177,156,1.572,158,1.037,161,0.925,163,0.925,164,2.54,168,0.832,170,1.177,172,0.621,183,1.037,187,0.832,189,0.832,191,0.832,192,0.832,207,2.066,211,2.066,213,1.177,214,1.477,216,0.468,217,1.364,221,3.117,235,1.09,238,2.066,242,1.843,243,1.655,254,1.177,260,1.878,261,0.753,263,0.683,271,0.925,275,1.843,277,1.878,279,1.477,280,1.177,284,1.177,287,1.037,289,1.658,295,1.065,297,0.832,298,0.621,301,0.822,302,0.822,303,0.332,304,1.237,305,1.237,306,2.177,307,1.878,308,2.177,309,2.068,310,1.499,311,2.177,312,2.177,313,2.177,314,2.676,315,1.09,317,1.328,320,1.477,330,1.853,332,0.925,335,0.925,337,3.056,338,1.547,343,1.99,347,1.037,349,2.066,351,0.925,352,0.925,354,1.843,363,1.037,365,3.086,378,1.037,379,1.037,386,1.655,387,1.499,388,2.066,392,1.655,395,1.037,400,1.177,402,1.037,404,2.358,407,1.037,415,1.037,418,0.925,419,0.925,424,1.037,425,1.037,444,1.655,460,1.843,464,0.925,466,1.655,476,2.358,478,1.037,484,0.753,490,1.177,495,1.037,496,1.177,497,1.553,503,0.925,514,1.405,521,1.037,583,1.328,584,2.066,594,2.066,602,1.037,609,2.924,611,1.177,620,2.344,622,2.577,659,1.037,661,1.201,671,1.364,672,1.477,673,3.34,674,2.177,675,2.177,676,2.177,677,2.177,678,2.177,679,2.177,680,2.177,681,2.717,682,2.177,683,2.177,684,2.177,685,1.364,686,1.364,687,1.364,688,1.364,689,1.364,690,1.364,691,1.177,692,2.717,693,2.177,694,1.364,695,1.364,696,1.364,697,1.364,698,1.364,699,1.364,700,1.364,701,1.364,702,1.364,703,1.364,704,2.177,705,1.364,706,1.364,707,1.364,708,1.177,709,1.364,710,2.177,711,1.364,712,1.364,713,1.177,714,1.364,715,1.364,716,1.364,717,1.364,718,2.177,719,3.613,720,1.364,721,1.364,722,1.364,723,1.364,724,1.364,725,2.177,726,1.648,727,1.648,728,1.364,729,1.648,730,1.648,731,1.648,732,1.648,733,1.364,734,1.648,735,1.648,736,1.878,737,1.648,738,1.648,739,1.648,740,1.648,741,2.177,742,1.648,743,2.676,744,1.364,745,2.177,746,1.648,747,1.648,748,1.648,749,1.364,750,2.177,751,1.364,752,1.364,753,1.177,754,2.177,755,1.648,756,3.102,757,2.631,758,1.648,759,1.648,760,3.283,761,2.631,762,1.648,763,1.648,764,1.364,765,2.631,766,1.648,767,1.648,768,1.648,769,2.177,770,1.648,771,1.364,772,1.364,773,2.676,774,2.177,775,2.177,776,1.364,777,1.364,778,1.364,779,1.364,780,1.364,781,1.364,782,1.177,783,1.364,784,1.177,785,1.364,786,1.364,787,1.364,788,1.364,789,1.364,790,1.364,791,1.364,792,3.102,793,1.364,794,1.177,795,1.364,796,3.792,797,2.717,798,1.364,799,1.364,800,1.364,801,1.364,802,1.364,803,2.177,804,2.177,805,1.364,806,1.364,807,1.364,808,2.717,809,1.364,810,1.364,811,1.364,812,1.364,813,1.364,814,1.364,815,3.39,816,1.364,817,1.878,818,1.364,819,1.364,820,2.177,821,1.364,822,1.364,823,2.177,824,2.177,825,1.364,826,1.177,827,1.364,828,1.177,829,1.364,830,1.364,831,3.39,832,1.364,833,1.364,834,3.102,835,1.177,836,1.364,837,2.177,838,1.364,839,1.364,840,1.364,841,1.364,842,1.177,843,1.364,844,1.364,845,1.364,846,1.364,847,1.364,848,1.364,849,1.364,850,1.364,851,1.364,852,1.364,853,1.364,854,1.177,855,1.364,856,1.364,857,1.364,858,1.364,859,1.177]],["title/classes/Stomp.html",[10,0.134,303,0.312]],["body/classes/Stomp.html",[3,0.293,4,0.293,5,0.256,8,0.256,10,0.227,19,1.494,22,0.28,23,0.623,26,0.155,27,0.497,33,0.396,34,0.038,35,1.017,38,0.823,47,0.747,51,1.6,52,0.293,55,0.019,56,0.019,58,2.2,64,0.623,66,1.122,70,1.484,74,0.823,75,2.935,91,1.233,95,0.692,100,0.621,109,0.823,110,1.56,111,0.998,129,3.728,130,0.749,132,1.56,143,2.582,148,2.801,151,2.801,156,1.122,158,2.741,161,1.837,172,1.968,174,1.56,229,1.808,239,2.708,253,2.336,261,1.791,263,2.104,302,1.022,303,0.513,304,1.968,309,2.696,325,2.801,330,1.225,338,1.115,352,1.837,368,3.497,374,2.059,383,3.331,419,1.837,422,2.964,452,3.812,460,1.226,464,1.837,484,2.483,489,2.336,491,2.336,492,2.336,497,1.933,502,2.741,514,1.346,526,2.564,527,1.226,528,0.823,554,1.56,555,3.247,558,2.336,580,1.808,583,1.652,589,1.837,590,1.374,622,2.741,673,2.059,713,1.56,736,2.336,764,4.053,773,2.336,784,1.56,794,1.56,826,2.336,860,1.808,861,3.272,862,5.222,863,5.222,864,4.419,865,3.923,866,2.185,867,3.272,868,3.272,869,3.272,870,3.272,871,4.357,872,2.185,873,3.272,874,5.078,875,2.185,876,2.708,877,3.272,878,3.272,879,2.185,880,3.861,881,3.272,882,2.185,883,3.272,884,3.272,885,3.272,886,3.923,887,3.272,888,3.272,889,3.272,890,2.708,891,3.272,892,3.272,893,3.272,894,3.272,895,3.272,896,3.272,897,3.272,898,3.272,899,3.272,900,4.357,901,2.185,902,2.185,903,1.808,904,2.185,905,2.185,906,2.185,907,2.185,908,2.185,909,2.185,910,3.272,911,3.272,912,2.185,913,2.185,914,2.185,915,3.923,916,2.185,917,2.185,918,4.357,919,2.185,920,2.185,921,3.272,922,2.185,923,2.185,924,2.185,925,2.185,926,2.185,927,2.185]],["title/classes/StompConfig.html",[303,0.312,928,1.94]],["body/classes/StompConfig.html",[3,0.257,4,0.257,5,0.225,8,0.225,10,0.157,22,0.254,23,0.565,26,0.136,27,0.45,33,0.603,34,0.038,35,0.565,36,1.138,37,2.118,40,1.803,45,1.118,47,0.69,48,1.078,51,1.398,52,0.257,55,0.017,56,0.017,62,1.866,64,1.188,70,1.03,80,1.589,86,1.118,95,1.318,109,1.366,110,1.371,113,2.034,115,2.587,116,3.821,120,2.587,125,2.587,130,1.017,163,1.078,168,2.655,182,2.118,187,1.83,188,2.28,189,1.83,190,2.28,191,1.83,192,1.83,193,2.28,194,2.28,195,2.28,196,2.28,197,2.28,198,2.28,199,2.999,200,2.999,201,2.999,202,2.999,203,2.999,204,2.999,205,2.999,206,2.999,214,1.665,275,1.665,296,1.498,300,0.796,301,0.926,302,0.926,303,0.366,305,1.118,307,2.91,317,1.498,330,1.974,331,2.587,332,2.034,333,2.587,335,2.034,336,2.587,338,1.695,340,2.118,351,1.078,366,2.118,374,1.866,389,2.118,399,2.118,422,2.352,427,2.118,430,2.118,432,2.118,438,2.118,441,2.118,456,2.118,458,2.118,462,2.118,472,2.118,487,2.118,502,1.866,514,1.398,528,0.723,554,1.371,556,1.589,557,1.589,558,1.371,559,1.589,560,1.589,561,1.589,562,1.589,563,1.589,564,1.589,565,1.589,566,1.589,567,1.589,568,1.589,569,1.589,576,1.589,585,1.665,708,2.118,835,2.118,842,2.118,854,2.118,859,2.118,903,1.589,928,1.866,929,3.765,930,2.966,931,2.455,932,2.966,933,3.624,934,1.92,935,1.92,936,1.92,937,1.92,938,1.92,939,1.92,940,2.966,941,1.92,942,1.92,943,1.92,944,1.92,945,1.92,946,1.92,947,1.92,948,1.92,949,2.966,950,1.92,951,2.966,952,1.92,953,2.966,954,1.92,955,1.92,956,1.92,957,1.92,958,1.92,959,2.966,960,1.92,961,1.92,962,1.92,963,1.92,964,1.92,965,1.92,966,1.92,967,1.92,968,1.92,969,1.92,970,1.92,971,1.92,972,1.92,973,1.92,974,1.92]],["title/classes/StompHeaders.html",[36,0.796,303,0.312]],["body/classes/StompHeaders.html",[3,0.599,4,0.599,5,0.524,8,0.524,10,0.194,12,3.7,16,1.685,21,1.606,22,0.383,23,0.851,34,0.035,35,1.113,36,1.369,37,4.175,38,1.685,50,3.7,52,0.599,55,0.031,56,0.031,91,1.685,303,0.452,338,1.27,346,3.192,455,3.192,528,1.685,532,3.7,743,3.192,929,3.336,975,3.7,976,3.192,977,4.471,978,4.471,979,4.471,980,4.471,981,4.471,982,4.471,983,4.471,984,4.471]],["title/injectables/StompService.html",[295,0.876,985,1.94]],["body/injectables/StompService.html",[1,1.305,3,0.193,4,0.193,5,0.169,8,0.276,10,0.245,11,1.996,13,1.027,14,1.683,15,3.228,16,1.961,19,0.657,21,1.231,22,0.202,24,0.494,26,0.102,27,0.358,29,1.323,33,0.56,34,0.037,35,0.959,36,0.894,38,1.815,40,0.494,42,1.323,45,1.128,47,0.57,51,0.809,52,0.193,53,2.997,55,0.014,56,0.014,59,1.94,60,0.808,61,1.874,62,0.905,64,0.659,65,0.905,66,1.027,67,1.076,68,1.683,70,0.984,71,1.191,73,2.929,74,1.305,75,2.581,86,1.815,91,1.704,93,1.683,95,0.956,96,0.727,98,1.683,100,0.984,103,2.403,105,1.076,106,1.323,111,0.657,112,1.19,114,1.323,130,1.188,135,3.228,136,0.808,143,1.076,156,1.758,158,0.905,163,1.943,164,2.491,165,1.951,168,1.19,170,1.027,172,1.439,183,0.905,187,0.727,189,0.727,191,0.727,192,0.727,211,1.884,213,1.027,214,1.323,221,3.228,235,1.435,238,1.884,242,1.681,243,1.483,254,1.027,260,1.683,261,0.657,263,0.596,268,1.951,271,0.808,275,1.943,277,1.683,279,1.323,280,1.683,284,1.027,287,0.905,289,2.283,295,0.67,297,0.727,298,0.888,301,1.081,302,0.736,303,0.303,304,0.542,305,1.128,309,1.748,310,0.657,317,1.748,320,1.943,330,1.877,332,0.808,335,0.808,337,3.109,338,1.585,343,1.851,347,0.905,349,1.884,351,0.808,353,0.905,354,2.144,361,1.929,362,1.683,363,1.483,365,2.845,378,0.905,379,0.905,386,0.905,387,0.657,388,1.884,392,1.483,395,0.905,402,0.905,404,1.483,407,1.483,414,1.027,415,2.178,418,1.323,419,0.808,424,0.905,425,0.905,444,2.178,460,1.943,464,0.808,466,1.483,476,2.403,478,0.905,484,0.657,495,0.905,497,1.7,503,0.808,514,1.551,516,1.884,521,0.905,526,1.19,551,1.483,583,1.19,584,1.483,585,1.681,590,0.905,594,2.581,602,1.483,606,1.683,609,2.727,611,1.683,620,1.027,622,2.725,654,1.683,655,1.683,661,1.076,672,1.323,673,3.274,674,1.951,675,1.951,676,1.951,677,1.951,678,1.951,679,1.951,680,1.951,681,2.478,682,2.865,683,1.951,684,1.951,685,1.191,686,1.191,687,1.191,688,1.191,689,1.191,690,1.191,691,1.027,692,3.396,693,1.951,694,1.191,695,1.191,696,1.191,697,1.191,698,1.191,699,1.191,700,1.191,701,1.191,702,1.191,703,1.191,704,1.951,705,1.191,706,1.191,707,1.191,708,1.027,709,1.191,710,1.951,711,1.191,712,1.191,713,1.683,714,1.191,715,1.191,716,1.191,717,1.191,718,1.951,719,3.396,720,1.191,721,1.191,722,1.191,723,1.191,724,1.191,725,1.951,728,1.191,736,1.027,741,1.951,743,2.138,745,1.191,749,1.191,750,1.951,751,1.191,752,1.191,753,1.683,754,1.191,756,1.951,769,1.191,771,1.191,772,1.191,773,2.929,774,2.865,775,2.478,776,1.951,777,1.951,778,1.951,779,1.191,780,1.951,781,1.951,782,2.472,783,1.951,784,1.683,785,1.191,786,1.191,787,1.191,788,1.191,789,1.191,790,1.191,791,1.951,792,3.585,793,1.951,794,2.138,795,1.951,796,4.307,797,3.396,798,1.951,799,1.951,800,1.951,801,1.951,802,1.951,803,2.478,804,2.478,805,1.951,806,1.951,807,1.951,808,3.396,809,1.951,810,1.191,811,1.951,812,1.951,813,1.951,814,1.191,815,3.161,816,1.191,817,1.683,818,1.191,819,1.191,820,2.865,821,1.191,822,1.951,823,2.865,824,2.865,825,1.191,826,1.683,827,1.191,828,1.027,829,1.191,830,1.191,831,3.161,832,1.191,833,1.191,834,2.865,835,1.027,836,1.191,837,1.951,838,1.191,839,1.191,840,1.191,841,1.191,842,1.027,843,1.191,844,1.191,845,1.191,846,1.951,847,1.191,848,1.191,849,1.191,850,1.191,851,1.191,852,1.191,853,1.191,854,1.027,855,1.191,856,1.191,857,1.191,858,1.191,859,1.027,876,1.191,928,2.178,931,1.191,985,1.884,986,1.191,987,1.951,988,1.951,989,1.951,990,2.357,991,2.357,992,2.357,993,2.357,994,2.357,995,2.357,996,2.357,997,2.357,998,3.439,999,2.994,1000,2.357,1001,2.357,1002,1.439,1003,2.357,1004,2.357,1005,1.439,1006,1.439,1007,1.439,1008,1.439,1009,1.439,1010,1.439,1011,1.439,1012,1.439,1013,1.439,1014,1.439,1015,1.439,1016,1.439,1017,1.439,1018,1.439,1019,1.439,1020,1.439,1021,1.439,1022,1.439,1023,1.439,1024,1.439,1025,1.439,1026,1.439,1027,1.439]],["title/interfaces/StompSubscription.html",[0,0.652,1028,2.202]],["body/interfaces/StompSubscription.html",[0,0.885,2,1.734,3,0.561,4,0.561,5,0.49,8,0.49,10,0.182,21,1.189,22,0.437,23,0.971,26,0.297,27,0.774,33,0.515,34,0.037,35,1.046,36,1.316,47,0.797,48,2.35,52,0.561,55,0.03,56,0.03,60,2.861,64,0.971,65,3.207,66,1.748,70,1.448,74,1.921,84,3.464,86,1.577,235,2.471,287,3.751,589,2.861,929,2.633,1028,4.084,1029,3.464,1030,5.097,1031,5.097,1032,4.186]],["title/classes/Versions.html",[109,1.162,303,0.312]],["body/classes/Versions.html",[3,0.428,4,0.428,5,0.374,8,0.374,10,0.241,11,1.778,22,0.415,23,0.609,26,0.227,27,0.651,33,0.545,34,0.037,35,1.112,38,1.824,46,3.55,52,0.428,55,0.025,56,0.025,58,2.166,91,1.205,95,0.676,100,1.47,109,2.26,130,1.775,132,2.283,143,1.959,156,1.472,157,4.597,263,1.778,303,0.489,304,2.093,330,1.873,338,1.612,353,2.699,382,3.966,418,2.408,450,2.408,479,3.063,480,3.966,481,3.966,484,1.46,500,3.063,514,1.097,528,1.205,583,2.166,585,1.795,733,4.597,753,3.063,864,4.885,1033,2.646,1034,4.841,1035,4.841,1036,4.841,1037,4.841,1038,5.174,1039,5.174,1040,3.198,1041,3.198,1042,4.29,1043,4.29,1044,4.29,1045,4.29,1046,3.198,1047,3.198,1048,3.198,1049,3.198,1050,3.198,1051,3.198,1052,3.198,1053,3.198,1054,3.198,1055,3.198,1056,3.198,1057,3.198,1058,3.198]],["title/coverage.html",[1059,3.464]],["body/coverage.html",[0,1.216,1,1.268,5,0.394,6,2.788,7,2.403,10,0.259,24,1.155,33,0.34,34,0.037,36,0.869,55,0.026,56,0.026,57,2.403,70,0.956,89,1.395,90,2.118,109,1.268,207,2.118,208,2.336,209,3.169,210,1.811,211,2.118,212,3.169,225,2.403,226,2.786,242,1.89,243,2.118,295,1.602,296,1.7,298,2.198,299,3.125,300,2.336,303,0.602,305,1.268,343,1.155,361,1.7,387,1.537,422,1.7,484,1.537,504,2.241,505,2.058,506,1.7,529,2.666,578,1.89,579,2.786,658,2.118,659,3.125,660,2.786,661,1.537,671,2.786,672,1.89,860,2.786,880,2.786,928,2.118,929,3.125,975,2.786,985,2.118,986,2.786,998,2.403,1028,2.403,1029,2.786,1033,2.786,1059,2.786,1060,3.366,1061,3.366,1062,2.786,1063,3.366,1064,3.366,1065,3.366,1066,6.25,1067,3.366,1068,4.439,1069,5.281,1070,3.366,1071,4.967,1072,5.281,1073,2.786,1074,3.366,1075,3.366,1076,3.366,1077,3.366,1078,3.366,1079,3.366,1080,3.366,1081,3.366,1082,3.366,1083,3.366,1084,3.366,1085,4.439,1086,3.366,1087,3.366,1088,3.366,1089,3.366,1090,3.366]],["title/miscellaneous/enumerations.html",[1091,1.072,1092,3.064]],["body/miscellaneous/enumerations.html",[10,0.251,22,0.444,26,0.306,34,0.03,55,0.03,56,0.03,90,2.709,148,3.075,163,2.418,166,4.292,174,4.123,175,4.605,177,3.262,178,4.292,179,4.292,180,3.501,181,3.564,182,3.703,183,2.709,184,3.564,185,3.564,208,1.785,216,1.224,298,1.623,301,1.62,302,1.345,303,0.435,343,1.477,361,2.175,526,2.175,529,2.175,673,2.709,691,3.075,987,3.564,988,3.564,989,3.564,1062,3.564,1091,1.785,1092,3.564,1093,4.292,1094,5.565,1095,3.075,1096,5.776,1097,5.186,1098,4.307,1099,4.307]],["title/miscellaneous/functions.html",[976,2.644,1091,1.072]],["body/miscellaneous/functions.html",[10,0.228,22,0.376,26,0.311,33,0.443,34,0.034,55,0.031,56,0.031,64,0.835,70,1.593,91,1.652,95,0.927,147,3.129,156,1.503,172,1.652,228,3.627,283,3.129,296,2.646,298,1.652,301,1.369,302,1.369,305,1.652,314,3.742,315,1.816,317,2.213,321,3.627,325,3.129,329,3.627,361,2.646,497,1.816,514,1.503,589,2.46,659,2.757,661,2.711,664,3.627,672,2.942,817,3.129,828,3.129,976,3.129,1073,4.337,1091,1.816,1095,3.129,1100,4.383,1101,4.383,1102,4.383,1103,4.383,1104,4.383,1105,4.383]],["title/index.html",[26,0.184,1106,2.586,1107,2.586]],["body/index.html",[10,0.254,23,0.965,34,0.03,55,0.03,56,0.03,64,0.965,99,4.53,109,2.063,128,2.609,172,1.91,210,1.739,216,1.44,251,3.432,253,3.619,275,2.328,295,1.178,296,2.094,301,1.295,302,1.709,305,1.563,309,2.094,343,1.739,387,1.894,422,2.094,467,2.961,504,2.094,505,1.718,506,2.094,526,2.094,528,2.148,578,2.845,596,2.961,658,2.609,661,1.894,672,2.328,744,3.432,782,2.961,890,3.432,985,2.609,998,2.961,1108,4.147,1109,4.147,1110,5.474,1111,5.702,1112,4.147,1113,4.147,1114,4.147,1115,4.147,1116,4.147,1117,4.147,1118,4.147,1119,4.147,1120,4.147,1121,4.147,1122,4.147,1123,4.147,1124,4.147,1125,4.147,1126,4.147,1127,4.147,1128,5.474,1129,4.147]],["title/modules.html",[1130,3.464]],["body/modules.html",[34,0.033,55,0.033,56,0.033,1130,4.084]],["title/overview.html",[1131,3.464]],["body/overview.html",[2,2.018,34,0.033,55,0.033,56,0.033,297,2.459,528,1.835,1131,4.03,1132,4.87,1133,4.87,1134,4.87]],["title/properties.html",[27,0.562,1135,2.586]],["body/properties.html",[8,0.558,27,0.723,34,0.036,55,0.032,56,0.032,302,1.489,304,1.796,387,2.176,1136,4.766,1137,4.766,1138,4.766,1139,4.766,1140,4.766,1141,4.766,1142,4.766,1143,4.766]],["title/miscellaneous/typealiases.html",[1091,1.072,1144,3.703]],["body/miscellaneous/typealiases.html",[1,2.036,6,2.794,7,3.554,10,0.235,11,2.063,22,0.513,23,1.125,24,1.853,26,0.286,33,0.407,34,0.032,35,0.767,54,3.333,55,0.029,56,0.029,57,3.554,59,2.063,61,2.403,64,0.767,70,1.648,88,2.875,89,2.063,90,2.534,93,3.554,111,2.648,112,2.928,113,2.794,115,3.554,116,3.554,120,3.554,125,3.554,127,2.875,128,2.534,129,2.875,208,1.669,216,1.144,300,2.063,315,1.669,505,2.063,523,3.132,529,2.034,655,2.875,1091,1.669,1093,4.889,1095,2.875,1145,4.028,1146,4.978,1147,4.028,1148,4.028,1149,4.028,1150,4.028]],["title/miscellaneous/variables.html",[1091,1.072,1151,3.064]],["body/miscellaneous/variables.html",[10,0.237,26,0.333,34,0.034,38,1.77,55,0.032,56,0.032,100,1.334,210,1.872,298,1.77,299,2.954,300,2.262,497,1.946,504,3,505,2.262,526,2.371,527,2.636,1091,1.946,1151,3.886,1152,4.696]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":395,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["0.1.0",{"_index":1136,"title":{},"body":{"properties.html":{}}}],["0.1.1",{"_index":348,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["0.3.5",{"_index":364,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.0",{"_index":481,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.0']);maps",{"_index":486,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.1",{"_index":480,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.2",{"_index":382,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1133,"title":{},"body":{"overview.html":{}}}],["100",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["16/16",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["19/19",{"_index":1068,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":1140,"title":{},"body":{"properties.html":{}}}],["2.0.0",{"_index":722,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["2/2",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":706,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["20000",{"_index":705,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["21/22",{"_index":1065,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":1067,"title":{},"body":{"coverage.html":{}}}],["27/27",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1069,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["41/41",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["44/44",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1132,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1134,"title":{},"body":{"overview.html":{}}}],["7/8",{"_index":1088,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":759,"title":{},"body":{"injectables/RxStompService.html":{}}}],["94",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1064,"title":{},"body":{"coverage.html":{}}}],["_customreplyqueue",{"_index":619,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_dummysubscription",{"_index":624,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_not_",{"_index":577,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["_repliesobservable",{"_index":618,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuename",{"_index":615,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupreplyqueue",{"_index":616,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["abort",{"_index":233,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["accept",{"_index":977,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":20,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ack",{"_index":68,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/StompService.html":{}}}],["acknowledgement",{"_index":73,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["acknowledges",{"_index":811,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activate",{"_index":681,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activated",{"_index":1104,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activation",{"_index":181,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["activationstate",{"_index":182,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["active",{"_index":183,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["activemq",{"_index":522,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["acts",{"_index":861,"title":{},"body":{"classes/Stomp.html":{}}}],["actual",{"_index":444,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["actually",{"_index":803,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["add",{"_index":700,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["added",{"_index":104,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["addition",{"_index":979,"title":{},"body":{"classes/StompHeaders.html":{}}}],["additional",{"_index":213,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["advance",{"_index":319,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["advanced",{"_index":17,"title":{},"body":{"interfaces/IFrame.html":{}}}],["alias",{"_index":54,"title":{},"body":{"interfaces/IFrame.html":{},"miscellaneous/typealiases.html":{}}}],["aliased",{"_index":88,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1145,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":794,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["allowing",{"_index":255,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["allows",{"_index":736,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["already",{"_index":817,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["alternate",{"_index":786,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["alternative",{"_index":883,"title":{},"body":{"classes/Stomp.html":{}}}],["alternatively",{"_index":896,"title":{},"body":{"classes/Stomp.html":{}}}],["always",{"_index":745,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular",{"_index":663,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["angular's",{"_index":327,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/core",{"_index":503,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":990,"title":{},"body":{"injectables/StompService.html":{}}}],["angular7.html",{"_index":313,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["another",{"_index":911,"title":{},"body":{"classes/Stomp.html":{}}}],["anything",{"_index":839,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["apache",{"_index":1139,"title":{},"body":{"properties.html":{}}}],["api",{"_index":1110,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":328,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["appendmissingnullonincoming",{"_index":197,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["application/octet",{"_index":770,"title":{},"body":{"injectables/RxStompService.html":{}}}],["appropriate",{"_index":715,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["around",{"_index":597,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["array",{"_index":1042,"title":{},"body":{"classes/Versions.html":{}}}],["arraybuffer",{"_index":141,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["associated",{"_index":1030,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["assumes",{"_index":453,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["async",{"_index":349,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["async](https://developer.mozilla.org/en",{"_index":571,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["asynchronous",{"_index":362,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{}}}],["asynchronously",{"_index":793,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":478,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempted",{"_index":417,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["attempting",{"_index":342,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["attempts",{"_index":694,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attributes",{"_index":531,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["author",{"_index":1141,"title":{},"body":{"properties.html":{}}}],["auto",{"_index":713,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["automatic",{"_index":256,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["automatically",{"_index":279,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["available",{"_index":978,"title":{},"body":{"classes/StompHeaders.html":{}}}],["avoid",{"_index":144,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["backward",{"_index":127,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":42,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["before",{"_index":272,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":331,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":754,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["behaviorsubject",{"_index":820,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["belong",{"_index":1121,"title":{},"body":{"index.html":{}}}],["binary",{"_index":41,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarybody",{"_index":28,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarydata",{"_index":765,"title":{},"body":{"injectables/RxStompService.html":{}}}],["binarytype",{"_index":162,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["body",{"_index":29,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["body/binarybody",{"_index":44,"title":{},"body":{"interfaces/IFrame.html":{}}}],["body]{@link",{"_index":82,"title":{},"body":{"interfaces/IMessage.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["both",{"_index":373,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["box",{"_index":742,"title":{},"body":{"injectables/RxStompService.html":{}}}],["breaks",{"_index":687,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["broker",{"_index":16,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["brokers",{"_index":476,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["brokerurl",{"_index":332,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["builds",{"_index":1119,"title":{},"body":{"index.html":{}}}],["bye",{"_index":264,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["call",{"_index":74,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["call.html",{"_index":510,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["callable",{"_index":889,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":61,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":79,"title":{},"body":{"interfaces/IMessage.html":{}}}],["callbacks",{"_index":13,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["called",{"_index":354,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["calling",{"_index":229,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["calls",{"_index":532,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["care",{"_index":603,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["carry",{"_index":791,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["case",{"_index":352,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["cases",{"_index":285,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["caution",{"_index":400,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["caveat",{"_index":232,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["change",{"_index":252,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["check",{"_index":386,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["class",{"_index":303,"title":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["classes",{"_index":528,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":652,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["client",{"_index":422,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"coverage.html":{},"index.html":{}}}],["client#abort",{"_index":236,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#abort]{@link",{"_index":241,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#ack",{"_index":76,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#ack]{@link",{"_index":85,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#activate",{"_index":695,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#appendmissingnullonincoming",{"_index":340,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#appendmissingnullonincoming]{@link",{"_index":565,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect",{"_index":366,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":576,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":230,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#brokerurl",{"_index":374,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":554,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":237,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#commit]{@link",{"_index":240,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#configure",{"_index":708,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#configure]{@link",{"_index":965,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#connectheaders",{"_index":389,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":568,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout",{"_index":399,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout]{@link",{"_index":559,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactivate",{"_index":725,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#debug",{"_index":940,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":973,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure",{"_index":427,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure]{@link",{"_index":567,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders",{"_index":430,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":569,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes",{"_index":432,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes]{@link",{"_index":564,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming",{"_index":438,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":561,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing",{"_index":441,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":562,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication",{"_index":456,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication]{@link",{"_index":557,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize",{"_index":458,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize]{@link",{"_index":566,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":77,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#nack]{@link",{"_index":87,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#onchangestate",{"_index":949,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onchangestate]{@link",{"_index":974,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect",{"_index":951,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":968,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":953,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":969,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":835,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onstomperror]{@link",{"_index":970,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe",{"_index":842,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledframe]{@link",{"_index":967,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessage",{"_index":62,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledmessage]{@link",{"_index":80,"title":{},"body":{"interfaces/IMessage.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":854,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":966,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose",{"_index":959,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":971,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror",{"_index":859,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onwebsocketerror]{@link",{"_index":972,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":92,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["client#publish]{@link",{"_index":126,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["client#reconnectdelay",{"_index":462,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":560,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes",{"_index":472,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes]{@link",{"_index":563,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions",{"_index":487,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":556,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscribe",{"_index":65,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":84,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/StompSubscription.html":{}}}],["client#unsubscribe",{"_index":1031,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":1032,"title":{},"body":{"interfaces/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":813,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#websocketfactory",{"_index":502,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":558,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":873,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":888,"title":{},"body":{"classes/Stomp.html":{}}}],["client.js",{"_index":902,"title":{},"body":{"classes/Stomp.html":{}}}],["client.ts",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["close",{"_index":170,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["closed",{"_index":180,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["closeevent]://developer.mozilla.org/en",{"_index":1147,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":117,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktype",{"_index":120,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closes",{"_index":169,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closing",{"_index":179,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["combination",{"_index":801,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["combined",{"_index":326,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["command",{"_index":30,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{}}}],["commit",{"_index":234,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["communication",{"_index":446,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["compat",{"_index":901,"title":{},"body":{"classes/Stomp.html":{}}}],["compatclient",{"_index":880,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":921,"title":{},"body":{"classes/Stomp.html":{}}}],["compatibility",{"_index":128,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["complaint",{"_index":802,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["completed",{"_index":804,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compliant",{"_index":466,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compodoc",{"_index":1126,"title":{},"body":{"index.html":{}}}],["config",{"_index":654,"title":{},"body":{"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["config.js",{"_index":612,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["config.ts",{"_index":300,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.ts:100",{"_index":547,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:101",{"_index":955,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:106",{"_index":935,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:107",{"_index":543,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:111",{"_index":950,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:114",{"_index":544,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:116",{"_index":952,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:121",{"_index":954,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:123",{"_index":548,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:126",{"_index":958,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:128",{"_index":542,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:131",{"_index":960,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:133",{"_index":533,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:136",{"_index":946,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:138",{"_index":546,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:141",{"_index":939,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:143",{"_index":540,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:146",{"_index":941,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:151",{"_index":948,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:152",{"_index":536,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:159",{"_index":541,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:179",{"_index":534,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:190",{"_index":538,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:22",{"_index":535,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:23",{"_index":656,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:26",{"_index":936,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:27",{"_index":657,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:31",{"_index":963,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:35",{"_index":549,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:36",{"_index":964,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:41",{"_index":938,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:46",{"_index":961,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:47",{"_index":545,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:51",{"_index":944,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:56",{"_index":945,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:60",{"_index":539,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:61",{"_index":962,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:66",{"_index":943,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:71",{"_index":934,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:76",{"_index":947,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:81",{"_index":937,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:83",{"_index":550,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:86",{"_index":942,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:91",{"_index":956,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:93",{"_index":537,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:96",{"_index":957,"title":{},"body":{"classes/StompConfig.html":{}}}],["configuration",{"_index":317,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":682,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configure(rxstompconfig",{"_index":696,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configured",{"_index":1103,"title":{},"body":{"miscellaneous/functions.html":{}}}],["connect",{"_index":353,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["connected",{"_index":673,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["connectheaders",{"_index":189,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["connecting",{"_index":177,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["connection",{"_index":164,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectionstate",{"_index":674,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectiontimeout",{"_index":333,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["consider",{"_index":259,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["console.log(new",{"_index":424,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["console.warn",{"_index":924,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/.../i",{"_index":1146,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/.../injectable",{"_index":1152,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolidated/.../rx",{"_index":1095,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1098,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.ts",{"_index":1093,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":298,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consolidated/rx",{"_index":208,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.ts",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts",{"_index":860,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:103",{"_index":882,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:41",{"_index":866,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:57",{"_index":875,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/i",{"_index":6,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":929,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/types.ts",{"_index":90,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.ts",{"_index":1033,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":1046,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":1047,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":1048,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:27",{"_index":1041,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:35",{"_index":1049,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:40",{"_index":1051,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:47",{"_index":1050,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":261,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["constructor",{"_index":585,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":1001,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(public",{"_index":1055,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":586,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(versions",{"_index":1040,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":980,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":101,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["copied",{"_index":142,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["copy",{"_index":634,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correlateerrors",{"_index":334,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["correlation",{"_index":605,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["correlationid",{"_index":644,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":1112,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":407,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["corresponds",{"_index":930,"title":{},"body":{"classes/StompConfig.html":{}}}],["cover",{"_index":1116,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1059,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":737,"title":{},"body":{"injectables/RxStompService.html":{}}}],["cr",{"_index":981,"title":{},"body":{"classes/StompHeaders.html":{}}}],["create",{"_index":589,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"interfaces/StompSubscription.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":228,"title":{},"body":{"interfaces/ITransaction.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":876,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["creating",{"_index":46,"title":{},"body":{"interfaces/IFrame.html":{},"classes/Versions.html":{}}}],["credentials",{"_index":358,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["current",{"_index":823,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["currently",{"_index":405,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["custom",{"_index":639,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["data",{"_index":140,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["date",{"_index":425,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivate",{"_index":683,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivate(options",{"_index":711,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivating",{"_index":184,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":187,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["debugfntype",{"_index":113,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["debugging",{"_index":423,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["declare",{"_index":904,"title":{},"body":{"classes/Stomp.html":{}}}],["declared",{"_index":1045,"title":{},"body":{"classes/Versions.html":{}}}],["deepak",{"_index":1142,"title":{},"body":{"properties.html":{}}}],["default",{"_index":100,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessagessubscription",{"_index":643,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscribe",{"_index":653,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaults",{"_index":250,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["defensively",{"_index":633,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["define",{"_index":321,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":338,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["defining",{"_index":1101,"title":{},"body":{"miscellaneous/functions.html":{}}}],["delay",{"_index":461,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["dependency",{"_index":147,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["dependent",{"_index":249,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["deprecated",{"_index":526,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["designed",{"_index":783,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destination",{"_index":96,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destinations",{"_index":732,"title":{},"body":{"injectables/RxStompService.html":{}}}],["details",{"_index":310,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["development",{"_index":1113,"title":{},"body":{"index.html":{}}}],["disable",{"_index":437,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["discard",{"_index":724,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["discardwebsocketoncommfailure",{"_index":198,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnect",{"_index":692,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["disconnectheaders",{"_index":190,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnecting",{"_index":1099,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disconnection",{"_index":429,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["disposed",{"_index":721,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["docs",{"_index":1111,"title":{},"body":{"index.html":{}}}],["docs/latest/classes/stomp.html#over",{"_index":927,"title":{},"body":{"classes/Stomp.html":{}}}],["documentation",{"_index":387,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["documents",{"_index":1124,"title":{},"body":{"index.html":{}}}],["dom",{"_index":145,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["down",{"_index":219,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["dropped",{"_index":988,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["drops",{"_index":777,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["during",{"_index":418,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":490,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["each",{"_index":275,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"index.html":{}}}],["effect",{"_index":451,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["elements",{"_index":1043,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":822,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["emitted",{"_index":406,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["enable",{"_index":421,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["end",{"_index":98,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["endpoint",{"_index":849,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["enqueued",{"_index":218,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["ensure",{"_index":621,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["entry",{"_index":1128,"title":{},"body":{"index.html":{}}}],["enum",{"_index":176,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["enumerations",{"_index":1092,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":868,"title":{},"body":{"classes/Stomp.html":{}}}],["erroneous",{"_index":416,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["error",{"_index":404,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["errors",{"_index":857,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["es6",{"_index":992,"title":{},"body":{"injectables/StompService.html":{}}}],["established",{"_index":392,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["etc",{"_index":360,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ev",{"_index":150,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["even",{"_index":776,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event",{"_index":858,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event]://developer.mozilla.org/en",{"_index":1149,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["event]{@link",{"_index":123,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["evt",{"_index":121,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["exact",{"_index":833,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["exactly",{"_index":306,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["example",{"_index":66,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["examples",{"_index":655,"title":{},"body":{"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["existing",{"_index":701,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["experimental",{"_index":402,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["explicitly",{"_index":1011,"title":{},"body":{"injectables/StompService.html":{}}}],["export",{"_index":52,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["exposed",{"_index":159,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["extended",{"_index":25,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["extends",{"_index":67,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["factory",{"_index":325,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":1073,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":620,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["family",{"_index":1137,"title":{},"body":{"properties.html":{}}}],["favor",{"_index":987,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["feature",{"_index":401,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["fetch",{"_index":357,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["field",{"_index":931,"title":{},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["fields",{"_index":316,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":607,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["filter((message",{"_index":647,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["first",{"_index":608,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["fixed",{"_index":318,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["flag",{"_index":278,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["force",{"_index":723,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["forcebinarywsframes",{"_index":195,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["forever",{"_index":398,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["frame",{"_index":11,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["frame.js",{"_index":78,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{}}}],["frame.ts",{"_index":7,"title":{},"body":{"interfaces/IFrame.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["framecallbacktype",{"_index":116,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["frameimpl",{"_index":63,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#body",{"_index":83,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#headers",{"_index":81,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frames",{"_index":136,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["framework",{"_index":665,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["function",{"_index":70,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":308,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["functions",{"_index":976,"title":{"miscellaneous/functions.html":{}},"body":{"classes/StompHeaders.html":{},"miscellaneous/functions.html":{}}}],["generatebinarydata",{"_index":766,"title":{},"body":{"injectables/RxStompService.html":{}}}],["generated",{"_index":1125,"title":{},"body":{"index.html":{}}}],["generating",{"_index":604,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["gets",{"_index":752,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["getting",{"_index":1106,"title":{"index.html":{}},"body":{}}],["good",{"_index":767,"title":{},"body":{"injectables/RxStompService.html":{}}}],["guest",{"_index":704,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["guide",{"_index":315,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":311,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["guide/rx",{"_index":507,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](/guide/rx",{"_index":613,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["guides",{"_index":1122,"title":{},"body":{"index.html":{}}}],["hack",{"_index":910,"title":{},"body":{"classes/Stomp.html":{}}}],["handle",{"_index":270,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["handles",{"_index":1024,"title":{},"body":{"injectables/StompService.html":{}}}],["handshake",{"_index":479,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["header",{"_index":103,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["headers",{"_index":21,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["headers.js",{"_index":48,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"interfaces/StompSubscription.html":{}}}],["headers.ts",{"_index":975,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":984,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correlation",{"_index":645,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['reply",{"_index":650,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers]{@link",{"_index":49,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["heartbeat",{"_index":435,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["heartbeatincoming",{"_index":191,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["heartbeatoutgoing",{"_index":192,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["hello",{"_index":760,"title":{},"body":{"injectables/RxStompService.html":{}}}],["here",{"_index":840,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["host",{"_index":380,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["html5",{"_index":886,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":118,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["https://stomp",{"_index":925,"title":{},"body":{"classes/Stomp.html":{}}}],["i.e",{"_index":350,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["id",{"_index":235,"title":{},"body":{"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["identifier",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["iframe",{"_index":1,"title":{"interfaces/IFrame.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["iframe#headers",{"_index":50,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["ignore",{"_index":818,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["imessage",{"_index":24,"title":{"interfaces/IMessage.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["immediate",{"_index":345,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["immediately",{"_index":719,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["impact",{"_index":344,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["implementation",{"_index":580,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["implies",{"_index":396,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["import",{"_index":47,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["important",{"_index":376,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["importantly",{"_index":410,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["inactive",{"_index":185,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["incoming",{"_index":434,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":983,"title":{},"body":{"classes/StompHeaders.html":{}}}],["indicate",{"_index":744,"title":{},"body":{"injectables/RxStompService.html":{},"index.html":{}}}],["indicates",{"_index":157,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Versions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["information",{"_index":251,"title":{},"body":{"interfaces/IWatchParams.html":{},"index.html":{}}}],["inherited",{"_index":337,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["initandconnect",{"_index":999,"title":{},"body":{"injectables/StompService.html":{}}}],["initialize",{"_index":997,"title":{},"body":{"injectables/StompService.html":{}}}],["initiate",{"_index":686,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":322,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injectable",{"_index":295,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":296,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstomprpcconfig",{"_index":504,"title":{"injectables/InjectableRxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":297,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"overview.html":{}}}],["injected",{"_index":324,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injection",{"_index":664,"title":{},"body":{"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["instance",{"_index":58,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":527,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"interfaces/StompSubscription.html":{},"overview.html":{}}}],["internal",{"_index":132,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["internally",{"_index":290,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["interval",{"_index":436,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["invoke",{"_index":1017,"title":{},"body":{"injectables/StompService.html":{}}}],["invoked",{"_index":271,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["invoking",{"_index":284,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["ipublishparams",{"_index":89,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irawframetype",{"_index":131,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["irxstomppublishparams",{"_index":207,"title":{"interfaces/IRxStompPublishParams.html":{}},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"coverage.html":{}}}],["isbinarybody",{"_index":31,"title":{},"body":{"interfaces/IFrame.html":{}}}],["issue",{"_index":781,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["issued",{"_index":291,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["istompsocket",{"_index":148,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["istompsocketmessageevent",{"_index":139,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["istompthandlerconfig",{"_index":186,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["itransaction",{"_index":225,"title":{"interfaces/ITransaction.html":{}},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["iwatchparams",{"_index":242,"title":{"interfaces/IWatchParams.html":{}},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["iwatchparams#subscribeonlyonce",{"_index":779,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["java",{"_index":474,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["javascript",{"_index":555,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["js.github.io/api",{"_index":926,"title":{},"body":{"classes/Stomp.html":{}}}],["json",{"_index":739,"title":{},"body":{"injectables/RxStompService.html":{}}}],["keep",{"_index":690,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["key",{"_index":37,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["keys",{"_index":377,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["klass",{"_index":919,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":920,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":631,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":283,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["kumar",{"_index":1143,"title":{},"body":{"properties.html":{}}}],["large",{"_index":469,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["later",{"_index":323,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leave",{"_index":1013,"title":{},"body":{"injectables/StompService.html":{}}}],["length",{"_index":102,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["lf",{"_index":982,"title":{},"body":{"classes/StompHeaders.html":{}}}],["libraries",{"_index":1118,"title":{},"body":{"index.html":{}}}],["library",{"_index":782,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"index.html":{}}}],["license",{"_index":1138,"title":{},"body":{"properties.html":{}}}],["line:variable",{"_index":908,"title":{},"body":{"classes/Stomp.html":{}}}],["link",{"_index":51,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["literal",{"_index":260,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["locally",{"_index":749,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["located",{"_index":877,"title":{},"body":{"classes/Stomp.html":{}}}],["log",{"_index":443,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["login",{"_index":378,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["lograwcommunication",{"_index":196,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["logs",{"_index":448,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["loop",{"_index":714,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["major",{"_index":863,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":593,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["mandatory",{"_index":761,"title":{},"body":{"injectables/RxStompService.html":{}}}],["manual",{"_index":72,"title":{},"body":{"interfaces/IMessage.html":{}}}],["manually",{"_index":996,"title":{},"body":{"injectables/StompService.html":{}}}],["many",{"_index":12,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["maps",{"_index":365,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["marks",{"_index":384,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["matched",{"_index":805,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["matching",{"_index":56,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxwebsocketchunksize",{"_index":194,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["means",{"_index":414,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{}}}],["mechanism",{"_index":329,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":59,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["message.headers['correlation",{"_index":648,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["message.js",{"_index":108,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["message.ts",{"_index":57,"title":{},"body":{"interfaces/IMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagecallbacktype",{"_index":115,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messages",{"_index":221,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["messaging",{"_index":582,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["method",{"_index":75,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["methods",{"_index":583,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["milliseconds",{"_index":394,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["miscellaneous",{"_index":1091,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed",{"_index":780,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["missing",{"_index":748,"title":{},"body":{"injectables/RxStompService.html":{}}}],["mode",{"_index":467,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"index.html":{}}}],["modules",{"_index":1130,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":890,"title":{},"body":{"classes/Stomp.html":{},"index.html":{}}}],["mozwebsocket",{"_index":912,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":114,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["msg});maps",{"_index":812,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["multiple",{"_index":698,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["nack",{"_index":69,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["name",{"_index":514,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":728,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["naming",{"_index":731,"title":{},"body":{"injectables/RxStompService.html":{}}}],["navigating",{"_index":1108,"title":{},"body":{"index.html":{}}}],["need",{"_index":19,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["needed",{"_index":895,"title":{},"body":{"classes/Stomp.html":{}}}],["needs",{"_index":797,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["new",{"_index":484,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":452,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["ng2",{"_index":1129,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":867,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":464,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["normally",{"_index":838,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["note",{"_index":602,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["notify",{"_index":852,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["now",{"_index":413,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["npm",{"_index":1114,"title":{},"body":{"index.html":{}}}],["null",{"_index":151,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["number",{"_index":168,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["object",{"_index":492,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["objects",{"_index":834,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable",{"_index":289,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable(s",{"_index":408,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["observable.create((rpcobserver",{"_index":642,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["observables",{"_index":412,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["observer",{"_index":609,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["occasionally",{"_index":282,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{}}}],["occurs",{"_index":816,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["octet(s",{"_index":747,"title":{},"body":{"injectables/RxStompService.html":{}}}],["once",{"_index":891,"title":{},"body":{"classes/Stomp.html":{}}}],["onchangestate",{"_index":933,"title":{},"body":{"classes/StompConfig.html":{}}}],["onclose",{"_index":149,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onconnect",{"_index":199,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":200,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["one",{"_index":371,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onerror",{"_index":152,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onmessage",{"_index":153,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onopen",{"_index":154,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onstomperror",{"_index":201,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledframe",{"_index":206,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledmessage",{"_index":204,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":205,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onwebsocketclose",{"_index":202,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["onwebsocketerror",{"_index":203,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{}}}],["open",{"_index":178,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["operation",{"_index":792,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["optional",{"_index":95,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":214,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["opts",{"_index":788,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["order",{"_index":887,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwise",{"_index":710,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["out",{"_index":741,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["outgoing",{"_index":440,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["over",{"_index":253,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/Stomp.html":{},"index.html":{}}}],["over(ws",{"_index":881,"title":{},"body":{"classes/Stomp.html":{}}}],["override",{"_index":1044,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1131,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1135,"title":{"properties.html":{}},"body":{}}],["packets",{"_index":471,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["pairs",{"_index":39,"title":{},"body":{"interfaces/IFrame.html":{}}}],["param",{"_index":669,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["parameter",{"_index":112,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":599,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["params.headers",{"_index":635,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["params.ts",{"_index":212,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["parsed",{"_index":449,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["parser",{"_index":134,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":22,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":14,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passcode",{"_index":379,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passed",{"_index":45,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["passing",{"_index":897,"title":{},"body":{"classes/Stomp.html":{}}}],["payload",{"_index":738,"title":{},"body":{"injectables/RxStompService.html":{}}}],["per",{"_index":688,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["pipe",{"_index":646,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["please",{"_index":309,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"index.html":{}}}],["point",{"_index":99,"title":{},"body":{"interfaces/IPublishParams.html":{},"index.html":{}}}],["possible",{"_index":174,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practice",{"_index":768,"title":{},"body":{"injectables/RxStompService.html":{}}}],["prefer",{"_index":495,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["preferred",{"_index":1127,"title":{},"body":{"index.html":{}}}],["present",{"_index":385,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["prior",{"_index":913,"title":{},"body":{"classes/Stomp.html":{}}}],["priority",{"_index":758,"title":{},"body":{"injectables/RxStompService.html":{}}}],["private",{"_index":614,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["probably",{"_index":473,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["procedure",{"_index":509,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["processing",{"_index":848,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["promise",{"_index":351,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["promise](https://developer.mozilla.org/en",{"_index":573,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["properly",{"_index":720,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["properties",{"_index":27,"title":{"properties.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["protocol",{"_index":733,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["protocols",{"_index":874,"title":{},"body":{"classes/Stomp.html":{}}}],["protocolversions",{"_index":1038,"title":{},"body":{"classes/Versions.html":{}}}],["prototype",{"_index":905,"title":{},"body":{"classes/Stomp.html":{}}}],["provider",{"_index":1102,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":828,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":330,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["publish",{"_index":211,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["publish(parameters",{"_index":726,"title":{},"body":{"injectables/RxStompService.html":{}}}],["publish(queuename",{"_index":1007,"title":{},"body":{"injectables/StompService.html":{}}}],["published",{"_index":222,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["publishing",{"_index":807,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["publishparams",{"_index":93,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["queue",{"_index":516,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":518,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":757,"title":{},"body":{"injectables/RxStompService.html":{}}}],["queued",{"_index":750,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["queuename",{"_index":268,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/StompService.html":{}}}],["queues",{"_index":774,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["r.service",{"_index":1023,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.ts",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["rabbitmq",{"_index":521,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raise",{"_index":755,"title":{},"body":{"injectables/RxStompService.html":{}}}],["random",{"_index":800,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["randomtext",{"_index":809,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raw",{"_index":445,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rawheadertype",{"_index":133,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re",{"_index":257,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["re)connection",{"_index":277,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["re)subscription",{"_index":273,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["reactivate",{"_index":716,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readme",{"_index":1003,"title":{},"body":{"injectables/StompService.html":{}}}],["readonly",{"_index":53,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readystate",{"_index":167,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["receipt",{"_index":796,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiptid",{"_index":808,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receive",{"_index":111,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["received",{"_index":15,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiving",{"_index":845,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["recent",{"_index":829,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reconnect",{"_index":460,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnectdelay",{"_index":335,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["reconnecting",{"_index":892,"title":{},"body":{"classes/Stomp.html":{}}}],["reconnection",{"_index":419,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnects",{"_index":778,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reestablished",{"_index":223,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["refer",{"_index":729,"title":{},"body":{"injectables/RxStompService.html":{}}}],["released",{"_index":1115,"title":{},"body":{"index.html":{}}}],["reliably",{"_index":356,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["remains",{"_index":623,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["remarks",{"_index":916,"title":{},"body":{"classes/Stomp.html":{}}}],["remote",{"_index":581,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["removed",{"_index":862,"title":{},"body":{"classes/Stomp.html":{}}}],["replaced",{"_index":932,"title":{},"body":{"classes/StompConfig.html":{}}}],["replies",{"_index":519,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["repliesobservable",{"_index":637,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["repliesobservable.subscribe",{"_index":641,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["reply",{"_index":515,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuename",{"_index":511,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":746,"title":{},"body":{"injectables/RxStompService.html":{}}}],["represents",{"_index":9,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":594,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requested",{"_index":851,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requesting",{"_index":795,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["require('../../esm5",{"_index":869,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":906,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket;deprecated",{"_index":872,"title":{},"body":{"classes/Stomp.html":{}}}],["resolve",{"_index":718,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["resolved",{"_index":355,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["resubscribe",{"_index":280,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["results",{"_index":55,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":391,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["retryifdisconnected",{"_index":217,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{}}}],["return",{"_index":263,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["returned",{"_index":830,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["returns",{"_index":156,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["rpc",{"_index":505,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rpc(params",{"_index":591,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rpc.service.ts",{"_index":660,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":662,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.ts",{"_index":579,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:32",{"_index":588,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:58",{"_index":592,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:69",{"_index":601,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(message",{"_index":649,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":210,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":288,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["rxstomp",{"_index":343,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rxstomp#activate",{"_index":717,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#configure",{"_index":530,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":552,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate",{"_index":347,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#deactivate]{@link",{"_index":570,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#publish",{"_index":215,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#publish]{@link",{"_index":224,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#watch",{"_index":244,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watch]{@link",{"_index":293,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watchforreceipt",{"_index":853,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.activate();maps",{"_index":707,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.configure",{"_index":702,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":763,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp.publish({destination",{"_index":756,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":1018,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp.watch",{"_index":267,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":810,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:107",{"_index":836,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:119",{"_index":850,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:132",{"_index":832,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:142",{"_index":855,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:161",{"_index":1008,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp:268",{"_index":697,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:300",{"_index":685,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:353",{"_index":712,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:366",{"_index":709,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:426",{"_index":727,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:474",{"_index":772,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:54",{"_index":821,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:617",{"_index":790,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:62",{"_index":814,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:77",{"_index":827,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:94",{"_index":843,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp]{@link",{"_index":575,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig",{"_index":305,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":689,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstompconfig#websocketfactory",{"_index":372,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":553,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.stompversions",{"_index":483,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactory",{"_index":498,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig:100",{"_index":459,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:107",{"_index":433,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:114",{"_index":439,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:123",{"_index":463,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:128",{"_index":431,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:133",{"_index":339,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:138",{"_index":457,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:143",{"_index":426,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:152",{"_index":375,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:159",{"_index":428,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:179",{"_index":341,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:190",{"_index":403,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:22",{"_index":367,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:35",{"_index":477,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:47",{"_index":442,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:60",{"_index":420,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:83",{"_index":488,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:93",{"_index":390,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstomprpc",{"_index":578,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpc#stream",{"_index":598,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rxstomprpc#stream]{@link",{"_index":630,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rxstomprpc:58",{"_index":666,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpc:69",{"_index":667,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpcconfig",{"_index":506,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpcconfig:23",{"_index":513,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcconfig:27",{"_index":524,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcservice",{"_index":658,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstompservice",{"_index":661,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory",{"_index":672,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1100,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstate",{"_index":1094,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["safely",{"_index":775,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["same",{"_index":307,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["samples",{"_index":1004,"title":{},"body":{"injectables/StompService.html":{}}}],["scripts",{"_index":160,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["see",{"_index":64,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":238,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["send(data",{"_index":173,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sent",{"_index":743,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["sequence",{"_index":799,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["server",{"_index":773,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["serverheaders",{"_index":675,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["service",{"_index":361,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":105,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["setting",{"_index":496,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["setup",{"_index":525,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueue",{"_index":512,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntype",{"_index":523,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["show",{"_index":1021,"title":{},"body":{"injectables/StompService.html":{}}}],["showing",{"_index":825,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["similar",{"_index":489,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simple",{"_index":595,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["simplest",{"_index":1105,"title":{},"body":{"miscellaneous/functions.html":{}}}],["skip",{"_index":762,"title":{},"body":{"injectables/RxStompService.html":{}}}],["skipcontentlengthheader",{"_index":97,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["skipped",{"_index":107,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["socket",{"_index":158,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["sockjs",{"_index":491,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":501,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["sometimes",{"_index":740,"title":{},"body":{"injectables/RxStompService.html":{}}}],["soon",{"_index":751,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{}}}],["specific",{"_index":388,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["specification",{"_index":993,"title":{},"body":{"injectables/StompService.html":{}}}],["specified",{"_index":393,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["specifies",{"_index":734,"title":{},"body":{"injectables/RxStompService.html":{}}}],["specify",{"_index":885,"title":{},"body":{"classes/Stomp.html":{}}}],["splitlargeframes",{"_index":193,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["splitting",{"_index":468,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["spring",{"_index":475,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["standard",{"_index":383,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["standards",{"_index":465,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["started",{"_index":1107,"title":{"index.html":{}},"body":{}}],["state",{"_index":163,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["state.ts",{"_index":1096,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":175,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["static",{"_index":864,"title":{},"body":{"classes/Stomp.html":{},"classes/Versions.html":{}}}],["status",{"_index":824,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["step",{"_index":314,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":10,"title":{"classes/Stomp.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stomp#client",{"_index":884,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":922,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":914,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":909,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url);deprecated",{"_index":879,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":1022,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp.js",{"_index":551,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{}}}],["stomp.over",{"_index":915,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(function",{"_index":898,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.service",{"_index":668,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.ts",{"_index":671,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.ts",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["stomp.websocketclass",{"_index":871,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":301,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stomp/rx",{"_index":216,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/i",{"_index":209,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["stomp/src/rx",{"_index":529,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.js",{"_index":991,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp/stompjs",{"_index":23,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stompconfig",{"_index":928,"title":{"classes/StompConfig.html":{}},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomperrors",{"_index":676,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompheaders",{"_index":36,"title":{"classes/StompHeaders.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["stompjs",{"_index":302,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["stompjs.stomp",{"_index":870,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/ng2",{"_index":312,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["stompjs/remote",{"_index":508,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/src/app/compatibility/stomp",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts",{"_index":986,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts:25",{"_index":1002,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs/src/app/injectable",{"_index":299,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stompjs/src/app/rx",{"_index":659,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs@8.x.x",{"_index":989,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":587,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuename",{"_index":625,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueue",{"_index":627,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservice",{"_index":998,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stomprservice:136",{"_index":1006,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:147",{"_index":1005,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:195",{"_index":1010,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:230",{"_index":1016,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:40",{"_index":1020,"title":{},"body":{"injectables/StompService.html":{}}}],["stompservice",{"_index":985,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stompsocketstate",{"_index":166,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate",{"_index":1097,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stompstate.open",{"_index":819,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompsubscription",{"_index":1028,"title":{"interfaces/StompSubscription.html":{}},"body":{"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["stompversions",{"_index":188,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":693,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stray",{"_index":847,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream",{"_index":584,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream(params",{"_index":600,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["streaming",{"_index":994,"title":{},"body":{"injectables/StompService.html":{}}}],["string",{"_index":35,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":455,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["structure",{"_index":137,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sub",{"_index":266,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["sub.unsubscribe",{"_index":292,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaders",{"_index":245,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaderscallback",{"_index":262,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subject",{"_index":831,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe",{"_index":415,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe((message",{"_index":269,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{}}}],["subscribe(queuename",{"_index":1009,"title":{},"body":{"injectables/StompService.html":{}}}],["subscribed",{"_index":274,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["subscribeonlyonce",{"_index":246,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subscribing",{"_index":71,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/StompService.html":{}}}],["subscription",{"_index":60,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["subscription.ts",{"_index":1029,"title":{},"body":{"interfaces/StompSubscription.html":{},"coverage.html":{}}}],["subscriptions",{"_index":258,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["successful",{"_index":276,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["such",{"_index":220,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{}}}],["suggests",{"_index":735,"title":{},"body":{"injectables/RxStompService.html":{}}}],["suitable",{"_index":520,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":1025,"title":{},"body":{"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":670,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["support",{"_index":161,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["supported",{"_index":1034,"title":{},"body":{"classes/Versions.html":{}}}],["supportedversions",{"_index":1039,"title":{},"body":{"classes/Versions.html":{}}}],["supports",{"_index":493,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["switch",{"_index":129,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["syntaxes",{"_index":787,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["t",{"_index":122,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["table",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":450,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Versions.html":{}}}],["target",{"_index":248,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["tcp",{"_index":894,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":517,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporary",{"_index":846,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["terminate",{"_index":155,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["terminating",{"_index":409,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["test.destination",{"_index":1019,"title":{},"body":{"injectables/StompService.html":{}}}],["text",{"_index":470,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["thin",{"_index":1120,"title":{},"body":{"index.html":{}}}],["this._customreplyqueue",{"_index":628,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._dummysubscription",{"_index":640,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable",{"_index":636,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuename",{"_index":626,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue",{"_index":629,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.config",{"_index":1026,"title":{},"body":{"injectables/StompService.html":{}}}],["this.initandconnect",{"_index":1027,"title":{},"body":{"injectables/StompService.html":{}}}],["this.rxstomp",{"_index":638,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish",{"_index":651,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessage",{"_index":617,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.stream(params).pipe(first",{"_index":632,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.versions.join",{"_index":1056,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map(x",{"_index":1057,"title":{},"body":{"classes/Versions.html":{}}}],["those",{"_index":411,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["though",{"_index":381,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["three",{"_index":1117,"title":{},"body":{"index.html":{}}}],["through",{"_index":1109,"title":{},"body":{"index.html":{}}}],["time",{"_index":254,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["times",{"_index":699,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["todo",{"_index":231,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["token",{"_index":359,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["topic/special",{"_index":769,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["transaction",{"_index":227,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["transaction.ts",{"_index":226,"title":{},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["transmits",{"_index":171,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["transport",{"_index":893,"title":{},"body":{"classes/Stomp.html":{}}}],["trigger",{"_index":815,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["true",{"_index":106,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["try",{"_index":482,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["trying",{"_index":691,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["tslint:disable",{"_index":907,"title":{},"body":{"classes/Stomp.html":{}}}],["tutorials",{"_index":1123,"title":{},"body":{"index.html":{}}}],["two",{"_index":785,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["type",{"_index":33,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1144,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typelib",{"_index":146,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["typeof",{"_index":923,"title":{},"body":{"classes/Stomp.html":{}}}],["types",{"_index":730,"title":{},"body":{"injectables/RxStompService.html":{}}}],["types.js",{"_index":903,"title":{},"body":{"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["typescript",{"_index":294,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{}}}],["typical",{"_index":500,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["typically",{"_index":320,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["uint8array",{"_index":32,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["undefined",{"_index":138,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["underlying",{"_index":622,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["understand",{"_index":1012,"title":{},"body":{"injectables/StompService.html":{}}}],["unhandled",{"_index":837,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledframe",{"_index":677,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledmessage",{"_index":678,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledreceipts",{"_index":679,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unique",{"_index":798,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unless",{"_index":841,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unset",{"_index":447,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["unsubheaders",{"_index":247,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubheaderscallback",{"_index":286,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubscribe",{"_index":287,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["unsubscribing",{"_index":281,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["url",{"_index":368,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us/docs/web/api/closeevent",{"_index":119,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/closeeventhttps",{"_index":1148,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/api/event",{"_index":124,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/eventhttps",{"_index":1150,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/javascript/reference/global_objects/promise",{"_index":574,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["us/docs/web/javascript/reference/statements/async_function",{"_index":572,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["usage",{"_index":18,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["use",{"_index":497,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":130,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["useful",{"_index":844,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["user",{"_index":826,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["using",{"_index":172,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["utf8",{"_index":454,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["uuid",{"_index":611,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["v${x.replace",{"_index":1058,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1035,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1036,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1037,"title":{},"body":{"classes/Versions.html":{}}}],["v4",{"_index":610,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["valid",{"_index":346,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":165,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{}}}],["var",{"_index":764,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["variable",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1151,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":304,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"properties.html":{}}}],["versions",{"_index":109,"title":{"classes/Versions.html":{}},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{},"index.html":{}}}],["versions(['1.1",{"_index":485,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["versions.default.protocolversions",{"_index":917,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.js",{"_index":110,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["versions.v1_0",{"_index":1054,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_1",{"_index":1053,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1052,"title":{},"body":{"classes/Versions.html":{}}}],["via",{"_index":606,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":86,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"interfaces/StompSubscription.html":{}}}],["wait",{"_index":397,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["waitforreceipt",{"_index":1000,"title":{},"body":{"injectables/StompService.html":{}}}],["waitforreceipt(receiptid",{"_index":1015,"title":{},"body":{"injectables/StompService.html":{}}}],["want",{"_index":753,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":243,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["watch(opts",{"_index":771,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt",{"_index":684,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt(receiptid",{"_index":789,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watching",{"_index":806,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["way",{"_index":363,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["web",{"_index":856,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocket",{"_index":143,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/ws",{"_index":499,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/ws",{"_index":899,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":865,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketerrors",{"_index":680,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocketfactory",{"_index":336,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["websockets",{"_index":494,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["well",{"_index":94,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["whether",{"_index":43,"title":{},"body":{"interfaces/IFrame.html":{}}}],["wiring",{"_index":995,"title":{},"body":{"injectables/StompService.html":{}}}],["within",{"_index":239,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["work",{"_index":784,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["working",{"_index":1014,"title":{},"body":{"injectables/StompService.html":{}}}],["world",{"_index":265,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["wrapper",{"_index":596,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"index.html":{}}}],["ws",{"_index":900,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/ws",{"_index":703,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["ws://broker.329broker.com:15674/ws",{"_index":369,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":878,"title":{},"body":{"classes/Stomp.html":{}}}],["wserrorcallbacktype",{"_index":125,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["wsfn",{"_index":918,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/ws",{"_index":370,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["yes",{"_index":590,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["yield",{"_index":135,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFrame.html":{"url":"interfaces/IFrame.html","title":"interface - IFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-frame.ts\n        \n\n\n            \n                Description\n            \n            \n                It represents a STOMP frame. Many of the callbacks pass an IFrame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nIMessage is an extended IFrame.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            command\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            isBinaryBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body as Uint8Array\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body of the frame as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        command:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    STOMP Command\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Headers, key value pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBinaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isBinaryBody:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\n\n/**\n * It represents a STOMP frame. Many of the callbacks pass an IFrame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link IFrame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link IMessage} is an extended IFrame.\n */\nexport interface IFrame {\n  /**\n   * STOMP Command\n   */\n  command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  isBinaryBody: boolean;\n\n  /**\n   * body of the frame as string\n   */\n  readonly body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  readonly binaryBody: Uint8Array;\n}\n\n/**\n * Alias for {@link IFrame}\n */\nexport type Frame = IFrame;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMessage.html":{"url":"interfaces/IMessage.html","title":"interface - IMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-message.ts\n        \n\n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended FrameImpl, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                        IFrame\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ack\n                                        \n                                \n                                \n                                        \n                                            nack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame.js';\nimport { StompHeaders } from './stomp-headers.js';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link FrameImpl}, you can access [headers]{@link FrameImpl#headers}\n * and [body]{@link FrameImpl#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport interface IMessage extends IFrame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  nack: (headers?: StompHeaders) => void;\n}\n\n/**\n * Aliased to {@link IMessage}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type Message = IMessage;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Parameters for Client#publish.\nAliased as publishParams as well.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skipContentLengthHeader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame.js';\nimport { IMessage } from './i-message.js';\nimport { StompHeaders } from './stomp-headers.js';\nimport { Versions } from './versions.js';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link IMessage} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: IMessage) => void;\n\n/**\n * This callback will receive a {@link IFrame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = ((frame: IFrame) => void) | (() => void);\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: T) => void;\n\n/**\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type wsErrorCallbackType = (evt: T) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}.\n * Aliased as publishParams as well.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Backward compatibility, switch to {@link IPublishParams}.\n */\nexport type publishParams = IPublishParams;\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType {\n  command: string | undefined;\n  headers: RawHeaderType[];\n  binaryBody: Uint8Array | undefined;\n}\n\n/**\n * @internal\n */\nexport interface IStompSocketMessageEvent {\n  data?: string | ArrayBuffer;\n}\n\n/**\n * Copied from Websocket interface to avoid dom typelib dependency.\n *\n * @internal\n */\nexport interface IStompSocket {\n  onclose: ((this: IStompSocket, ev?: any) => any) | null;\n  onerror: ((this: IStompSocket, ev: any) => any) | null;\n  onmessage: ((this: IStompSocket, ev: IStompSocketMessageEvent) => any) | null;\n  onopen: ((this: IStompSocket, ev?: any) => any) | null;\n  terminate?: ((this: IStompSocket) => any) | null;\n\n  /**\n   * Returns a string that indicates how binary data from the socket is exposed to scripts:\n   * We support only 'arraybuffer'.\n   */\n  binaryType: 'arraybuffer';\n\n  /**\n   * Returns the state of the socket connection. It can have the values of StompSocketState.\n   */\n  readonly readyState: number;\n\n  /**\n   * Closes the connection.\n   */\n  close(): void;\n  /**\n   * Transmits data using the connection. data can be a string or an ArrayBuffer.\n   */\n  send(data: string | ArrayBuffer): void;\n}\n\n/**\n * Possible states for the IStompSocket\n */\nexport enum StompSocketState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED,\n}\n\n/**\n * Possible activation state\n */\nexport enum ActivationState {\n  ACTIVE,\n  DEACTIVATING,\n  INACTIVE,\n}\n\n/**\n * @internal\n */\nexport interface IStomptHandlerConfig {\n  debug: debugFnType;\n  stompVersions: Versions;\n  connectHeaders: StompHeaders;\n  disconnectHeaders: StompHeaders;\n  heartbeatIncoming: number;\n  heartbeatOutgoing: number;\n  splitLargeFrames: boolean;\n  maxWebSocketChunkSize: number;\n  forceBinaryWSFrames: boolean;\n  logRawCommunication: boolean;\n  appendMissingNULLonIncoming: boolean;\n  discardWebsocketOnCommFailure: boolean;\n  onConnect: frameCallbackType;\n  onDisconnect: frameCallbackType;\n  onStompError: frameCallbackType;\n  onWebSocketClose: closeEventCallbackType;\n  onWebSocketError: wsErrorCallbackType;\n  onUnhandledMessage: messageCallbackType;\n  onUnhandledReceipt: frameCallbackType;\n  onUnhandledFrame: frameCallbackType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRxStompPublishParams.html":{"url":"interfaces/IRxStompPublishParams.html","title":"interface - IRxStompPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRxStompPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Additional options for RxStomp#publish\nPart of @stomp/rx-stomp\n\n            \n\n            \n                Extends\n            \n            \n                        IPublishParams\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            retryIfDisconnected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        retryIfDisconnected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryIfDisconnected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When set to true message will be enqueued if the connection\nto the broker is down.\nSuch messages will be published when connection is reestablished.\nDefault is true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IPublishParams } from '@stomp/stompjs';\n\n/**\n * Additional options for [RxStomp#publish]{@link RxStomp#publish}\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IRxStompPublishParams extends IPublishParams {\n  /**\n   * When set to `true` message will be enqueued if the connection\n   * to the broker is down.\n   * Such messages will be published when connection is reestablished.\n   *\n   * Default is `true`.\n   */\n  retryIfDisconnected?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransaction.html":{"url":"interfaces/ITransaction.html","title":"interface - ITransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-transaction.ts\n        \n\n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            abort\n                                        \n                                \n                                \n                                        \n                                            commit\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        abort:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Abort this transaction. See Client#abort for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commit:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Commit this transaction. See Client#commit for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    You will need to access this to send, ack, or nack within this transaction.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ITransaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IWatchParams.html":{"url":"interfaces/IWatchParams.html","title":"interface - IWatchParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IWatchParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-watch-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for RxStomp#watch.\nPart of @stomp/rx-stomp\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subHeaders\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subscribeOnlyOnce\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            unsubHeaders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The subscription target. It is likely to be broker dependent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subscription headers, defaults to {}\nIf header information can change over time, and you are allowing automatic re-subscriptions,\nconsider using a callback as the value rather than a string literal.\n             const subHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // The subHeadersCallback will be invoked before every (re)subscription.\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribeOnlyOnce\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribeOnlyOnce:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, the destination will be subscribed after each successful (re)connection to the broker.\nSet this flag to not automatically resubscribe.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsubHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsubHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Headers to be passed while unsubscribing, defaults to {}.\nOccasionally, headers may not be known while invoking RxStomp#watch,\nin such cases a callback can be passed that would return the headers.\n             const unsubHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n             // `unsubHeadersCallback` will be invoked to get the headers.\n             sub.unsubscribe();\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from '@stomp/stompjs';\n\n/**\n * Options for [RxStomp#watch]{@link RxStomp#watch}.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IWatchParams {\n  /**\n   * The subscription target. It is likely to be broker dependent.\n   */\n  readonly destination?: string;\n\n  /**\n   * Subscription headers, defaults to `{}`\n   *\n   * If header information can change over time, and you are allowing automatic re-subscriptions,\n   * consider using a callback as the value rather than a string literal.\n   *\n   * ```typescript\n   *              const subHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // The subHeadersCallback will be invoked before every (re)subscription.\n   * ```\n   */\n  readonly subHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * Headers to be passed while unsubscribing, defaults to `{}`.\n   *\n   * Occasionally, headers may not be known while invoking [RxStomp#watch]{@link RxStomp#watch},\n   * in such cases a callback can be passed that would return the headers.\n   *\n   * ```typescript\n   *              const unsubHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n   *              // `unsubHeadersCallback` will be invoked to get the headers.\n   *              sub.unsubscribe();\n   * ```\n   */\n  readonly unsubHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * By default, the destination will be subscribed after each successful (re)connection to the broker.\n   * Set this flag to not automatically resubscribe.\n   */\n  readonly subscribeOnlyOnce?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                correlateErrors\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:133\n\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:179\n\n                        \n                    \n\n            \n                \n                    Callback, invoked before attempting connection to the STOMP broker.\nYou can change the configuration of the rxStomp, which will impact the immediate connecting.\nIt is valid to call RxStomp#deactivate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case, connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive RxStomp as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:22\n\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:152\n\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:93\n\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait forever.\nMaps to: Client#connectionTimeout.\nCaution: This feature is experimental.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        correlateErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:190\n\n                        \n                    \n\n            \n                \n                    Callback invoked on every ERROR frame. If the callback returns the ID of a currently\nsubscribed destination, the frame will be emitted as an error on the corresponding\nobservable(s), terminating them.\nImportantly, since those observables are now closed, this means a re-SUBSCRIBE to\nthe erroneous destination will not be attempted during an automatic reconnection of\nthe websocket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:60\n\n                        \n                    \n\n            \n                \n                    Enable client debugging\nExample:\n    debug: (msg: string): void => {\n      console.log(new Date(), msg);\n    },\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:143\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:159\n\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:128\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:107\n\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatIncoming\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:114\n\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:47\n\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs only the headers of the parsed frames.\nChange in this takes effect from the next broker reconnection.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:138\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:100\n\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: Client#reconnectDelay\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:123\n\n                        \n                    \n\n            \n                \n                    Enable a non-standards compliant mode of splitting outgoing large text packets.\nSee Client#splitLargeFrames for details.\nProbably, only Java Spring based brokers support this mode.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:35\n\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default, versions 1.2, 1.1, and 1.0 are attempted.\nExample:\n       // Try only versions 1.1 and 1.0\n       rxStompConfig.stompVersions= new Versions(['1.1', '1.0']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:83\n\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRPCConfig.html":{"url":"injectables/InjectableRxStompRPCConfig.html","title":"injectable - InjectableRxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPCConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:23\n\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:27\n\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompRPCConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRPCConfig extends RxStompRPCConfig {}\n\n// Backward compatibility\n/**\n * Deprecated, use {@link InjectableRxStompRPCConfig} instead\n */\nexport const InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of these calls are optional.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                correlateErrors\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:133\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:179\n                        \n                    \n\n            \n                \n                    Callback, invoked before attempting connection to the STOMP broker.\nYou can change the configuration of the rxStomp, which will impact the immediate connecting.\nIt is valid to call RxStomp#deactivate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case, connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive RxStomp as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:22\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:152\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:93\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait forever.\nMaps to: Client#connectionTimeout.\nCaution: This feature is experimental.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        correlateErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:190\n                        \n                    \n\n            \n                \n                    Callback invoked on every ERROR frame. If the callback returns the ID of a currently\nsubscribed destination, the frame will be emitted as an error on the corresponding\nobservable(s), terminating them.\nImportantly, since those observables are now closed, this means a re-SUBSCRIBE to\nthe erroneous destination will not be attempted during an automatic reconnection of\nthe websocket.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:60\n                        \n                    \n\n            \n                \n                    Enable client debugging\nExample:\n    debug: (msg: string): void => {\n      console.log(new Date(), msg);\n    },\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:143\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:159\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:128\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:107\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatIncoming\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:114\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:47\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs only the headers of the parsed frames.\nChange in this takes effect from the next broker reconnection.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:138\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:100\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: Client#reconnectDelay\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:123\n                        \n                    \n\n            \n                \n                    Enable a non-standards compliant mode of splitting outgoing large text packets.\nSee Client#splitLargeFrames for details.\nProbably, only Java Spring based brokers support this mode.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:35\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default, versions 1.2, 1.1, and 1.0 are attempted.\nExample:\n       // Try only versions 1.1 and 1.0\n       rxStompConfig.stompVersions= new Versions(['1.1', '1.0']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:83\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { debugFnType, IFrame, StompHeaders, Versions } from '@stomp/stompjs';\nimport { RxStomp } from './rx-stomp.js';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of these calls are optional.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.1 and 1.0\n   *        rxStompConfig.stompVersions= new Versions(['1.1', '1.0']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs only the headers of the parsed frames.\n   *\n   * Change in this takes effect from the next broker reconnection.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   *\n   * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * Enable client debugging\n   *\n   * Example:\n   *\n   * ```typescript\n   *     debug: (msg: string): void => {\n   *       console.log(new Date(), msg);\n   *     },\n   * ```\n   */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * Will retry if Stomp connection is not established in specified milliseconds.\n   * Default 0, which implies wait forever.\n   *\n   * Maps to: [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   *\n   * Caution: This feature is experimental.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * Automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@link Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Enable a non-standards compliant mode of splitting outgoing large text packets.\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n   * Probably, only Java Spring based brokers support this mode.\n   *\n   * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * Maps to: [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked before attempting connection to the STOMP broker.\n   *\n   * You can change the configuration of the rxStomp, which will impact the immediate connecting.\n   * It is valid to call [RxStomp#deactivate]{@link RxStomp#deactivate} in this callback.\n   *\n   * As of version 0.1.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case, connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   *\n   * As of 0.3.5, this callback will receive [RxStomp]{@link RxStomp} as parameter.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: (client: RxStomp) => void | Promise;\n\n  /**\n   * Callback invoked on every ERROR frame. If the callback returns the ID of a currently\n   * subscribed destination, the frame will be emitted as an error on the corresponding\n   * observable(s), terminating them.\n   *\n   * Importantly, since those observables are now closed, this means a re-SUBSCRIBE to\n   * the erroneous destination will _not_ be attempted during an automatic reconnection of\n   * the websocket.\n   */\n  public correlateErrors?: (error: IFrame) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:32\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:58\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:69\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { filter, first, Observable, Observer, Subscription } from 'rxjs';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { IMessage, IPublishParams, StompHeaders } from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp.js';\nimport {\n  RxStompRPCConfig,\n  setupReplyQueueFnType,\n} from './rx-stomp-rpc-config.js';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  };\n\n  private _repliesObservable: Observable;\n\n  private _customReplyQueue: boolean = false;\n\n  // This is used to ensure that underlying subscription remains subscribed\n  private _dummySubscription: Subscription;\n\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n   */\n  constructor(\n    private rxStomp: RxStomp,\n    private stompRPCConfig?: RxStompRPCConfig\n  ) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._customReplyQueue = true;\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  public rpc(params: IPublishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  public stream(params: IPublishParams): Observable {\n    // defensively copy\n    const headers: StompHeaders = { ...(params.headers || {}) };\n\n    if (!this._repliesObservable) {\n      const repliesObservable = this._setupReplyQueue(\n        this._replyQueueName,\n        this.rxStomp\n      );\n\n      // In case of custom queue, ensure it remains subscribed\n      if (this._customReplyQueue) {\n        this._dummySubscription = repliesObservable.subscribe(() => {});\n      }\n\n      this._repliesObservable = repliesObservable;\n    }\n\n    return Observable.create((rpcObserver: Observer) => {\n      let defaultMessagesSubscription: Subscription;\n\n      const correlationId = headers['correlation-id'] || uuid();\n\n      defaultMessagesSubscription = this._repliesObservable\n        .pipe(\n          filter((message: IMessage) => {\n            return message.headers['correlation-id'] === correlationId;\n          })\n        )\n        .subscribe((message: IMessage) => {\n          rpcObserver.next(message);\n        });\n\n      // send an RPC request\n      headers['reply-to'] = this._replyQueueName;\n      headers['correlation-id'] = correlationId;\n\n      this.rxStomp.publish({ ...params, headers });\n\n      return () => {\n        // Cleanup\n        defaultMessagesSubscription.unsubscribe();\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RPC Config. For examples see the guide.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:23\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:27\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMessage } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp.js';\n\n/**\n * For examples see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n *\n * Part of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (\n  replyQueueName: string,\n  rxStomp: RxStomp\n) => Observable;\n\n/**\n * RPC Config. For examples see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPC\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            Create an instance, typically called by Angular Dependency Injection framework.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        InjectableRxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:58\n\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:69\n\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\n\nimport { RxStompRPC } from '@stomp/rx-stomp';\nimport { RxStompService } from './rx-stomp.service';\nimport { InjectableRxStompRPCConfig } from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  /**\n   * Create an instance, typically called by Angular Dependency Injection framework.\n   *\n   * @param rxStomp\n   * @param stompRPCConfig\n   */\n  constructor(\n    rxStomp: RxStompService,\n    @Optional() stompRPCConfig?: InjectableRxStompRPCConfig\n  ) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStomp\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:300\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:268\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:366\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate(options: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:353\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if the underlying STOMP connection was connected.\nTo reactivate, you can call RxStomp#activate.\nThis call is async. It will resolve immediately if there is no underlying active websocket,\notherwise, it will resolve after the underlying websocket is properly disposed of.\nExperimental: Since version 2.0.0, pass force: true to immediately discard the underlying connection.\nSee Client#deactivate for details.\nMaps to: Client#deactivate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(parameters: IRxStompPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:426\n\n                \n            \n\n\n            \n                \n                    Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker-specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body, use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\nThe  content-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages, content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if the message body has NULL octet(s)\nand content-length header is missing.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nIf you do not want that behavior,\nplease set retryIfDisconnected to false\nin the parameters.\nWhen false, this function will raise an error if a message could not be sent immediately.\nMaps to: Client#publish\nSee: IRxStompPublishParams and IPublishParams\n       rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n\n       // Only destination is mandatory parameter\n       rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n\n       // Skip content-length header in the frame to the broker\n       rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n\n       var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n       // setting content-type header is not mandatory, however a good practice\n       rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n                        headers: {'content-type': 'application/octet-stream'}});\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                                IRxStompPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:474\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library, but the way STOMP brokers are designed to work.\nThis method has two alternate syntaxes, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:617\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically, a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based on the value of the receipt-id.\nThis method allows watching for a receipt and invoking the callback\nwhen the corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:62\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected, it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:54\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to showing current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:77\n\n                        \n                    \n\n            \n                \n                    Provides headers from the most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established, it will trigger immediately.\nIt will trigger for each (re)connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:132\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:107\n\n                        \n                    \n\n            \n                \n                    This will yield any unhandled frame.\nNormally, you should not receive anything here unless a non-compliant STOMP broker\nis in use or an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:94\n\n                        \n                    \n\n            \n                \n                    This will yield any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt may also yield stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:119\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:142\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        WebSocketClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/compatibility/stomp.ts:41\n                        \n                    \n\n            \n                \n                    In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n       StompJs = require('../../esm5/');\n       Stomp = StompJs.Stomp;\n       Stomp.WebSocketClass = require('websocket').w3cwebsocket;Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        client\n                        \n                    \n                \n            \n            \n                \n                    \n                    client(url: string, protocols?: string[])\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:57\n                \n            \n\n\n            \n                \n                    This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n       var url = \"ws://localhost:61614/stomp\";\n       var client = Stomp.client(url);Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocols\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        over\n                        \n                    \n                \n            \n            \n                \n                    \n                    over(ws: any)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:103\n                \n            \n\n\n            \n                \n                    This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n       var client = Stomp.over(function(){\n         return new WebSocket('ws://localhost:15674/ws')\n       });Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ws\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\nimport { IStompSocket } from '../types.js';\n\n/**\n * @internal\n */\ndeclare const WebSocket: {\n  prototype: IStompSocket;\n  new (url: string, protocols?: string | string[]): IStompSocket;\n};\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn(\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\n      );\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nThere used to be a class with the same name in @stomp/ng2-stompjs, which has been replaced by\nRxStompConfig and InjectableRxStompConfig.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                onChangeState\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketError\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:71\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:106\n                        \n                    \n\n            \n                \n                    See Client#beforeConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:26\n                        \n                    \n\n            \n                \n                    See Client#brokerURL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:81\n                        \n                    \n\n            \n                \n                    See Client#connectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:41\n                        \n                    \n\n            \n                \n                    See Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:141\n                        \n                    \n\n            \n                \n                    See Client#debug.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:146\n                        \n                    \n\n            \n                \n                    See Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:86\n                        \n                    \n\n            \n                \n                    See Client#disconnectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:66\n                        \n                    \n\n            \n                \n                    See Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:51\n                        \n                    \n\n            \n                \n                    See Client#heartbeatIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:56\n                        \n                    \n\n            \n                \n                    See Client#heartbeatOutgoing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:136\n                        \n                    \n\n            \n                \n                    See Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:76\n                        \n                    \n\n            \n                \n                    See Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onChangeState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:151\n                        \n                    \n\n            \n                \n                    See Client#onChangeState.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:111\n                        \n                    \n\n            \n                \n                    See Client#onConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDisconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:116\n                        \n                    \n\n            \n                \n                    See Client#onDisconnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onStompError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:121\n                        \n                    \n\n            \n                \n                    See Client#onStompError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:101\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledFrame.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         messageCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:91\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledMessage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledReceipt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:96\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledReceipt.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketClose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         closeEventCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:126\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketClose.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         wsErrorCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:131\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:46\n                        \n                    \n\n            \n                \n                    See Client#reconnectDelay.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:61\n                        \n                    \n\n            \n                \n                    See Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:31\n                        \n                    \n\n            \n                \n                    See See Client#stompVersions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:36\n                        \n                    \n\n            \n                \n                    See Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\nimport {\n  ActivationState,\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType,\n} from './types.js';\nimport { Versions } from './versions.js';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * There used to be a class with the same name in `@stomp/ng2-stompjs`, which has been replaced by\n * {@link RxStompConfig} and {@link InjectableRxStompConfig}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void | Promise;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n\n  /**\n   * See [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * See [Client#onChangeState]{@link Client#onChangeState}.\n   */\n  public onChangeState?: (state: ActivationState) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as IFrame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders {\n  [key: string]: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you want to manually configure and initialize the service\nplease use StompRService\n\n            \n\n            \n                Extends\n            \n            \n                        StompRService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:147\n\n                \n            \n\n\n            \n                \n                    It will disconnect from the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        initAndConnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    initAndConnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:136\n\n                \n            \n\n\n            \n                \n                    It will connect to the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:161\n\n                \n            \n\n\n            \n                \n                    It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string | publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(queueName: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:195\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        waitForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:230\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.waitForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:300\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:268\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:366\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate(options: literal type)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:353\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if the underlying STOMP connection was connected.\nTo reactivate, you can call RxStomp#activate.\nThis call is async. It will resolve immediately if there is no underlying active websocket,\notherwise, it will resolve after the underlying websocket is properly disposed of.\nExperimental: Since version 2.0.0, pass force: true to immediately discard the underlying connection.\nSee Client#deactivate for details.\nMaps to: Client#deactivate\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:474\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library, but the way STOMP brokers are designed to work.\nThis method has two alternate syntaxes, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:617\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically, a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based on the value of the receipt-id.\nThis method allows watching for a receipt and invoking the callback\nwhen the corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         StompRService\n\n                            \n                        \n                    \n                        \n                                Defined in         StompRService:40\n\n                        \n                    \n\n            \n                \n                    State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:62\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected, it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:54\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to showing current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:77\n\n                        \n                    \n\n            \n                \n                    Provides headers from the most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established, it will trigger immediately.\nIt will trigger for each (re)connection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:132\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:107\n\n                        \n                    \n\n            \n                \n                    This will yield any unhandled frame.\nNormally, you should not receive anything here unless a non-compliant STOMP broker\nis in use or an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:94\n\n                        \n                    \n\n            \n                \n                    This will yield any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt may also yield stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:119\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:142\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StompSubscription.html":{"url":"interfaces/StompSubscription.html","title":"interface - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            unsubscribe\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Id associated with this subscription.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsubscribe\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsubscribe:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unsubscribe. See Client#unsubscribe for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from './stomp-headers.js';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:27\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:10\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.1'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:14\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.2'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:18\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        versions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        protocolVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    protocolVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:47\n                \n            \n\n\n            \n                \n                    Used while creating a WebSocket\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        supportedVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    supportedVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:40\n                \n            \n\n\n            \n                \n                    Used as part of CONNECT STOMP Frame\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n  ]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {}\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp-r.service.ts\n            \n            injectable\n            StompRService\n            \n                95 %\n                (21/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n            \n            injectable\n            StompService\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n            \n            injectable\n            InjectableRxStompConfig\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            injectable\n            InjectableRxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            variable\n            InjectableRxStompRpcConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n            \n            injectable\n            RxStompRPCService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n            \n            function\n            rxStompServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n            \n            injectable\n            RxStompService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n            \n            interface\n            IRxStompPublishParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-watch-params.ts\n            \n            interface\n            IWatchParams\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            class\n            RxStompConfig\n            \n                100 %\n                (19/19)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            class\n            RxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            class\n            RxStompRPC\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            class\n            RxStomp\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (41/41)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            class\n            CompatClient\n            \n                100 %\n                (44/44)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            class\n            Stomp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-frame.ts\n            \n            interface\n            IFrame\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-message.ts\n            \n            interface\n            IMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-transaction.ts\n            \n            interface\n            ITransaction\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            class\n            StompConfig\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            class\n            StompHeaders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            interface\n            StompSubscription\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            interface\n            IPublishParams\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            class\n            Versions\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActivationState   (consolidated/.../types.ts)\n                        \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompSocketState   (consolidated/.../types.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivationState\n                    \n                \n                    \n                        \n                            Possible activation state\n\n                        \n                    \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                 DEACTIVATING\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StompSocketState\n                    \n                \n                    \n                        \n                            Possible states for the IStompSocket\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPart of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/app/compatibility/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rxStompServiceFactory\n                        \n                    \n                \n            \n            \n                \nrxStompServiceFactory(rxStompConfig: InjectableRxStompConfig)\n                \n            \n\n\n\n\n            \n                \n                    Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: \nfor a step-by-step guide.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                InjectableRxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RxStompService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNavigating through the API docs\nThese docs correspond to development versions. Please see api-docs for NPM released versions.\nThe API docs cover three libraries:\n\n@stomp/stompjs\n@stomp/rx-stomp - builds over @stomp/stompjs\n@stomp/ng2-stompjs - thin wrapper over @stomp/rx-stomp\n\nThe documentation for classes indicate which library each of the classes\nbelong. See the guides for more information and tutorials.\nThese documents have been generated using Compodoc.\nstompjs\nPreferred entry point is Client.\nIf you are using compatibility mode your entry point would be\nStomp.\nrx-stomp\nYour entry point would be RxStomp.\nFor RPC RxStompRPC.\nng2-stompjs\nInjectable versions of rx-stomp classes:\n\nRxStompService for RxStomp\nInjectableRxStompConfig for RxStompConfig\nRxStompRPCService for RxStompRPC\nInjectableRxStompRPCConfig for RxStompRPCConfig\nrxStompServiceFactory\n\nDeprecated classes:\n\nStompRService\nStompService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : Documentation for StompJS family\n        \n            License : Apache-2.0\n        \n            Author : Deepak Kumar\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            Frame   (consolidated/.../i-frame.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            Message   (consolidated/.../i-message.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            publishParams   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                        \n                            wsErrorCallbackType   (consolidated/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    closeEventCallbackType\n                \n            \n            \n                \n                    This callback will receive a [CloseEvent]://developer.mozilla.org/en-US/docs/Web/API/CloseEventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    debugFnType\n                \n            \n            \n                \n                    This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    frameCallbackType\n                \n            \n            \n                \n                    This callback will receive a IFrame as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                         | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    messageCallbackType\n                \n            \n            \n                \n                    This callback will receive a IMessage as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    publishParams\n                \n            \n            \n                \n                    Backward compatibility, switch to IPublishParams.\n\n                \n            \n            \n                \n                            IPublishParams\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    wsErrorCallbackType\n                \n            \n            \n                \n                    This callback will receive an [Event]://developer.mozilla.org/en-US/docs/Web/API/Eventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-frame.ts\n    \n    \n        \n            \n                \n                    \n                    Frame\n                \n            \n            \n                \n                    Alias for IFrame\n\n                \n            \n            \n                \n                            IFrame\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-message.ts\n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                    Aliased to IMessage.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            IMessage\n\n                \n            \n        \n    \n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n    \n        \n            \n                \n                    \n                    setupReplyQueueFnType\n                \n            \n            \n                \n                    For examples see the guide.\nPart of @stomp/rx-stomp\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InjectableRxStompRpcConfig   (consolidated/.../injectable-rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InjectableRxStompRpcConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : InjectableRxStompRPCConfig\n                    \n                \n\n            \n                \n                    Deprecated, use InjectableRxStompRPCConfig instead\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
