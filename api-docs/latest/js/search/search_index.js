var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/Frame.html",[0,0.156,1,1.009]],["body/classes/Frame.html",[0,0.214,1,1.966,2,0.211,3,0.211,4,0.179,5,1.637,6,0.245,7,2.503,8,0.244,9,2.503,10,1.235,11,1.999,12,1.513,13,1.657,14,2.154,15,2.503,16,1.234,17,2.154,18,1.751,19,0.835,20,1.235,21,0.245,22,0.918,23,1.368,24,3.387,25,3.403,26,2.154,27,2.497,28,3.016,29,1.19,30,0.629,31,0.039,32,0.713,33,1.983,34,1.215,35,1.983,36,1.837,37,1.42,38,2.503,39,2.668,40,1.983,41,2.047,42,1.894,43,2.503,44,2.503,45,1.016,46,1.983,47,1.983,48,1.717,49,1.983,50,1.983,51,3.218,52,0.591,53,3.681,54,1.686,55,1.637,56,1.409,57,0.494,58,0.211,59,4.442,60,4.684,61,2.262,62,1.983,63,3.799,64,1.983,65,4.122,66,1.983,67,1.983,68,5.027,69,2.775,70,0.808,71,1.637,72,3.156,73,1.983,74,2.794,75,1.409,76,4.122,77,1.983,78,1.102,79,1.409,80,1.238,81,3.039,82,3.032,83,3.681,84,1.983,85,1.637,86,1.983,87,2.926,88,1.983,89,1.983,90,1.637,91,1.983,92,1.409,93,1.983,94,2.503,95,2.154,96,1.637,97,0.664,98,1.983,99,1.983,100,1.983,101,1.983,102,1.983,103,3.681,104,1.855,105,1.983,106,1.983,107,1.983,108,1.983,109,3.032,110,4.122,111,1.983,112,2.503,113,1.238,114,1.983,115,1.983,116,1.983,117,1.983,118,1.983,119,3.032,120,1.983,121,1.983,122,1.983,123,1.983,124,1.983,125,1.637,126,1.983,127,1.238,128,0.603,129,1.983,130,1.983,131,1.983,132,1.983,133,1.983,134,1.983,135,1.983,136,1.983,137,3.032,138,1.983,139,1.983,140,2.299,141,1.983,142,2.292,143,1.983,144,3.681,145,1.983,146,1.983,147,1.983,148,1.983,149,1.983,150,1.983,151,1.983,152,1.983,153,1.983,154,1.983,155,1.983,156,1.983,157,1.983,158,1.983,159,1.983,160,3.032,161,1.983,162,1.983,163,1.983,164,1.983,165,3.032,166,1.983,167,1.238,168,1.983,169,1.983,170,1.983,171,1.983,172,1.983,173,1.983,174,1.983,175,1.983,176,1.983,177,1.983,178,1.983,179,1.983,180,1.983,181,1.983,182,1.983,183,1.983,184,0.019,185,0.019]],["title/interfaces/IPublishParams.html",[186,1.503,187,1.881]],["body/interfaces/IPublishParams.html",[1,1.933,2,0.336,3,0.336,4,0.284,6,0.389,8,0.144,10,2.234,12,2.658,13,1.904,16,1.056,18,1.801,19,1.511,21,0.389,22,1.054,24,1.967,27,2.563,28,2.962,29,1.188,30,0.833,31,0.039,34,1.273,37,0.868,39,2.658,41,2.352,48,0.958,51,3.189,52,0.767,54,1.751,57,1.191,58,0.607,69,3.189,80,2.642,127,2.642,184,0.026,185,0.026,186,2.383,187,2.642,188,1.967,189,1.544,190,3.006,191,1.494,192,3.05,193,2.642,194,3.492,195,1.723,196,3.006,197,3.006,198,2.352,199,3.006,200,1.572,201,1.967,202,1.886,203,1.967,204,2.238,205,1.967,206,1.967,207,2.6,208,2.6,209,2.6,210,1.967,211,2.6,212,2.238,213,2.238,214,2.238,215,1.967,216,2.238,217,3.006]],["title/interfaces/IRawFrameType.html",[54,1.675,186,1.503]],["body/interfaces/IRawFrameType.html",[1,1.937,2,0.359,3,0.359,4,0.304,8,0.154,10,2.276,12,2.717,13,1.515,16,1.128,18,1.777,19,1.54,21,0.416,22,1.102,24,3.274,27,2.222,28,3.028,29,1.181,30,0.828,31,0.039,34,1.102,37,0.927,39,2.463,41,1.872,48,1.023,51,3.274,52,0.793,54,2.458,57,1.23,58,0.616,69,2.102,80,2.102,127,2.102,184,0.027,185,0.027,186,2.463,187,2.102,188,2.102,189,1.54,190,2.391,191,1.23,192,2.458,193,2.102,194,2.778,195,1.371,196,2.391,197,2.391,198,1.872,199,2.391,200,1.679,201,2.102,202,1.936,203,2.102,204,2.391,205,2.102,206,2.102,207,2.778,208,2.778,209,2.778,210,2.102,211,2.778,212,2.391,213,2.391,214,2.391,215,2.102,216,2.391,217,3.725]],["title/injectables/InjectableRxStompConfig.html",[218,0.609,219,2.14]],["body/injectables/InjectableRxStompConfig.html",[0,0.271,2,0.402,3,0.402,4,0.34,6,0.466,8,0.25,14,3.379,16,1.594,20,1.536,31,0.038,32,0.764,37,1.31,52,0.764,57,1.299,58,0.402,74,2.373,97,1.833,184,0.029,185,0.029,218,1.206,219,3.379,220,1.392,221,2.679,222,1.697,223,1.697,224,1.594,225,1.937,226,1.594,227,1.446,228,2.592,229,3.926,230,2.971,231,1.105,232,2.373,233,1.105,234,2.645,235,3.379,236,3.379,237,3.379,238,3.887,239,1.937,240,3.417,241,2.141,242,4.756,243,4.516,244,2.645,245,4.756,246,3.379,247,4.756,248,3.379,249,4.756,250,4.756,251,3.926,252,1.881,253,2.097]],["title/injectables/InjectableRxStompRpcConfig.html",[218,0.609,254,1.881]],["body/injectables/InjectableRxStompRpcConfig.html",[0,0.224,2,0.459,3,0.459,4,0.389,6,0.533,8,0.236,20,1.756,31,0.038,52,0.829,57,1.287,58,0.459,184,0.032,185,0.032,218,1.184,220,1.592,221,3.062,222,1.94,223,1.94,224,1.73,225,2.334,226,1.73,227,1.57,233,1.043,239,2.103,252,2.151,253,2.397,254,3.225,255,2.151,256,3.187,257,4.262,258,4.262,259,3.669,260,3.669]],["title/classes/Message.html",[0,0.156,19,0.83]],["body/classes/Message.html",[0,0.229,1,1.991,2,0.356,3,0.356,4,0.302,6,0.414,8,0.201,10,1.363,11,2.215,17,3.129,18,1.755,19,1.647,20,2.13,21,0.414,22,1.304,23,1.49,24,3.267,25,4.063,27,1.506,29,0.89,30,0.769,31,0.038,32,0.873,34,1.354,36,1.669,37,0.922,38,2.762,39,2.197,41,1.86,42,2.09,43,2.762,44,2.762,45,1.121,52,0.707,55,2.762,56,2.377,57,0.834,58,0.356,184,0.027,185,0.027,202,1.626,231,1.057,233,1.127,261,2.762,262,2.197,263,2.449,264,3.129,265,3.497,266,1.696,267,3.964,268,4.605,269,3.346,270,3.267,271,4.317,272,3.716,273,1.932,274,2.61,275,4.403,276,3.346,277,4.403,278,4.922,279,3.346,280,3.346,281,3.346,282,3.346,283,2.377,284,3.346,285,3.346,286,2.377,287,3.346,288,3.346]],["title/classes/RxStomp.html",[0,0.156,289,1.009]],["body/classes/RxStomp.html",[0,0.123,1,1.755,2,0.087,3,0.087,4,0.074,6,0.101,8,0.258,10,1.715,11,0.652,12,2.154,13,2.49,16,1.411,18,1.62,19,1.502,21,0.101,22,0.361,23,1.374,26,1.03,27,1.943,28,1.316,29,0.872,30,0.678,31,0.039,32,0.709,34,0.675,36,0.723,37,0.895,39,0.723,41,1.667,42,0.905,45,0.486,48,1.491,51,1.221,52,0.482,57,0.675,58,0.087,61,1.558,69,1.478,70,1.103,72,0.58,74,1.727,78,1.805,79,0.58,80,1.478,81,1.197,92,1.03,94,1.197,97,1.479,104,2.595,125,0.674,127,2.382,128,1.052,140,1.221,142,0.806,167,1.873,184,0.009,185,0.015,189,1.091,190,1.03,191,0.59,192,2.275,193,0.905,195,1.103,196,3.067,197,2.13,198,1.805,199,1.03,200,0.723,201,1.873,202,1.72,206,2.812,213,0.58,215,1.873,222,0.652,224,0.274,226,0.274,227,0.441,228,1.461,230,0.51,231,0.699,232,1.181,233,0.293,240,0.51,241,1.461,244,1.667,248,1.03,262,1.181,263,1.316,264,1.03,265,1.03,266,0.987,270,2.952,272,2.592,273,1.848,274,2.042,283,0.58,286,0.58,289,1.16,290,2.026,291,2.026,292,0.674,293,1.45,294,2.101,295,1.45,296,1.506,297,2.366,298,2.366,299,3.148,300,1.873,301,2.874,302,2.366,303,2.162,304,1.45,305,1.389,306,1.45,307,1.45,308,1.925,309,1.45,310,1.681,311,1.45,312,2.366,313,2.366,314,2.366,315,2.366,316,2.366,317,2.236,318,2.366,319,2.475,320,2.236,321,1.45,322,1.954,323,0.817,324,0.817,325,3.475,326,2.236,327,1.953,328,1.197,329,1.197,330,1.925,331,2.459,332,1.953,333,1.197,334,1.953,335,1.45,336,2.68,337,0.817,338,2.592,339,1.197,340,2.236,341,1.953,342,1.197,343,1.389,344,0.817,345,1.03,346,1.197,347,2.459,348,2.459,349,2.696,350,3.563,351,0.817,352,1.953,353,1.45,354,1.953,355,1.953,356,1.873,357,2.13,358,1.45,359,1.45,360,3.309,361,1.197,362,0.817,363,2.366,364,1.197,365,1.197,366,1.692,367,2.13,368,1.45,369,1.45,370,2.71,371,2.236,372,0.817,373,2.366,374,3.269,375,1.953,376,1.197,377,1.45,378,1.197,379,0.817,380,1.389,381,1.45,382,1.45,383,1.45,384,1.197,385,2.279,386,2.366,387,1.925,388,1.45,389,1.45,390,0.817,391,1.45,392,1.45,393,1.45,394,1.45,395,1.03,396,1.45,397,1.03,398,1.197,399,2.366,400,1.197,401,1.03,402,1.03,403,1.45,404,1.03,405,1.45,406,1.389,407,1.197,408,1.197,409,1.45,410,1.197,411,0.817,412,2.366,413,0.817,414,1.953,415,1.45,416,1.45,417,2.306,418,1.45,419,1.45,420,1.45,421,1.45,422,2.306,423,0.817,424,2.382,425,1.45,426,1.197,427,1.197,428,1.45,429,2.13,430,1.45,431,1.45,432,1.197,433,1.45,434,1.45,435,0.905,436,1.953,437,1.45,438,1.681,439,1.954,440,1.45,441,1.45,442,1.953,443,1.45,444,1.953,445,2.857,446,2.366,447,1.45,448,1.45,449,2.999,450,2.366,451,1.45,452,1.197,453,2.366,454,1.45,455,1.954,456,1.45,457,2.366,458,1.45,459,1.613,460,2.68,461,1.197,462,1.613,463,1.45,464,0.817,465,1.197,466,0.905,467,1.197,468,1.197,469,1.478,470,1.197,471,1.681,472,1.197,473,1.197,474,1.953,475,1.45,476,1.45,477,1.954,478,1.954,479,1.45,480,1.45,481,1.45,482,1.45,483,1.45,484,1.197,485,1.197,486,1.45,487,1.45,488,1.45,489,0.817,490,1.197,491,1.03,492,1.316,493,1.197,494,1.197,495,1.03,496,1.197,497,1.197,498,1.03,499,2.236,500,1.197,501,1.45,502,1.197,503,0.817,504,0.817,505,1.45,506,1.45,507,1.45,508,1.45,509,1.197,510,0.817,511,0.58,512,1.181,513,1.478,514,0.408,515,1.389,516,1.45,517,1.45,518,1.45,519,0.817,520,3.648,521,0.817,522,0.817,523,1.45,524,1.45,525,0.674,526,0.674,527,0.674,528,0.817,529,0.817,530,1.197,531,0.817,532,1.197,533,0.817,534,0.817,535,1.954,536,0.817,537,0.817,538,0.817,539,1.954,540,1.954,541,1.45,542,0.817,543,0.817,544,1.954,545,0.817,546,0.817,547,0.817,548,1.613,549,1.613,550,2.709,551,1.45,552,0.817,553,0.817,554,0.817,555,0.674,556,0.817,557,0.817,558,0.674,559,1.221,560,0.674,561,1.954,562,0.817,563,0.817,564,1.45,565,0.817,566,0.817,567,0.817,568,0.817,569,0.817,570,0.817,571,0.674,572,0.817,573,0.817,574,0.674,575,0.817,576,0.674,577,1.954,578,0.817,579,0.817,580,0.817,581,0.817,582,1.389,583,1.45,584,0.817,585,0.817,586,0.817,587,0.817,588,0.817,589,0.674,590,0.817,591,0.817,592,0.817,593,0.817,594,0.817,595,0.817,596,1.45,597,1.45,598,1.954,599,0.817,600,0.817,601,0.817,602,0.817,603,0.817,604,0.817,605,0.817,606,0.817,607,0.674,608,0.817,609,0.817,610,1.45,611,0.817,612,0.58,613,0.817,614,1.45,615,0.817,616,0.817,617,0.817,618,0.817,619,1.45,620,0.817,621,0.674,622,0.817,623,0.817,624,0.817,625,1.45,626,0.817,627,0.817,628,0.674,629,0.817,630,0.817,631,0.817,632,0.817,633,0.817,634,0.817,635,0.817,636,1.45,637,0.817,638,0.817,639,0.817,640,0.817,641,0.817,642,0.817,643,0.817,644,0.817,645,0.817,646,0.817,647,0.674,648,0.817,649,0.817,650,0.817,651,0.674,652,0.817,653,0.817,654,0.674,655,0.817,656,0.817,657,0.817]],["title/classes/RxStompConfig.html",[0,0.156,228,1.356]],["body/classes/RxStompConfig.html",[0,0.158,2,0.213,3,0.213,4,0.18,6,0.247,7,2.518,8,0.268,10,1.686,11,1.373,13,2.371,15,2.518,16,1.022,18,1.259,21,0.247,22,0.76,23,1.494,29,0.747,30,0.746,31,0.039,32,0.846,34,1.218,36,2.066,48,1.429,52,0.594,58,0.213,61,2.115,78,2.302,95,2.167,97,1.575,104,2.371,113,2.935,140,2.935,142,2.872,184,0.019,185,0.019,191,1.458,195,1.242,198,3.09,200,2.066,202,0.738,223,0.899,227,1.602,228,1.373,231,1.064,234,1.696,241,1.863,244,2.302,262,1.522,266,1.259,273,1.529,289,1.387,290,2.411,291,2.411,294,1.522,296,1.111,305,2.941,308,2.167,331,2.167,349,1.905,355,2.518,356,1.905,357,2.167,360,4.072,367,2.167,376,2.518,384,1.65,385,1.905,387,2.941,395,2.941,397,2.941,398,2.518,400,2.518,401,2.941,402,2.941,404,2.941,406,3.338,432,2.518,435,1.905,438,2.167,469,1.905,484,3.417,532,2.518,559,1.905,658,3.05,659,3.05,660,3.417,661,3.417,662,3.417,663,1.998,664,3.05,665,3.05,666,2.518,667,1.998,668,2.518,669,1.65,670,2.518,671,3.05,672,3.05,673,2.518,674,4.139,675,3.879,676,1.998,677,3.05,678,3.05,679,3.417,680,3.05,681,3.05,682,2.518,683,1.998,684,3.05,685,1.998,686,2.518,687,1.998,688,3.05,689,4.139,690,4.139,691,4.699,692,4.699,693,3.05,694,1.65,695,3.05,696,2.518,697,1.998,698,3.05,699,3.05,700,1.998,701,2.518,702,3.417,703,3.879,704,3.05,705,3.05,706,2.518,707,1.998,708,2.518,709,3.417,710,3.417,711,3.05,712,3.05,713,2.518,714,1.998,715,3.05,716,3.054,717,1.65,718,1.65,719,1.65,720,1.65,721,1.65,722,1.998,723,1.65]],["title/classes/RxStompRPC.html",[0,0.156,724,1.881]],["body/classes/RxStompRPC.html",[0,0.203,2,0.299,3,0.299,4,0.254,6,0.347,8,0.242,18,1.189,19,1.46,21,0.347,23,1.321,27,1.761,28,2.175,30,0.637,31,0.039,32,0.723,34,0.975,45,1.311,48,1.653,52,0.851,58,0.299,63,3.458,70,1.144,74,2.246,75,3.197,78,1.562,79,1.996,96,2.319,97,1.311,128,1.368,184,0.024,185,0.024,189,1.24,191,1.122,192,1.562,222,1.761,232,1.952,233,1.12,234,2.706,239,1.982,255,2.845,256,2.706,259,3.764,260,3.458,262,1.952,263,2.175,266,1.189,273,1.445,274,1.952,289,1.775,290,2.19,291,2.19,296,1.562,300,1.755,301,3.082,303,3.04,370,3.635,422,3.862,424,1.755,492,2.175,495,2.779,509,2.319,511,1.996,514,1.402,612,2.779,621,2.319,628,2.319,673,2.319,724,2.443,725,2.319,726,5.298,727,2.319,728,4.017,729,2.809,730,1.755,731,3.911,732,2.809,733,4.867,734,3.911,735,2.809,736,1.996,737,2.779,738,4.867,739,4.867,740,2.809,741,2.319,742,2.319,743,3.229,744,2.809,745,2.809,746,2.809,747,2.809,748,3.911,749,3.911,750,3.911,751,2.809,752,2.809,753,2.809,754,2.809,755,3.911,756,2.809,757,2.809,758,2.809,759,3.911,760,4.5,761,2.809,762,2.809,763,2.809,764,2.809,765,2.809,766,2.809,767,2.809,768,2.809,769,2.809]],["title/classes/RxStompRPCConfig.html",[0,0.156,256,1.675]],["body/classes/RxStompRPCConfig.html",[0,0.244,2,0.394,3,0.394,4,0.334,6,0.457,8,0.248,19,1.019,21,0.457,22,1.171,23,1.428,29,1.097,30,0.731,31,0.039,32,0.754,52,0.829,58,0.5,112,3.877,128,1.428,184,0.029,185,0.029,191,1.354,195,1.913,222,1.664,223,1.664,233,1.176,234,3.02,239,2.371,255,2.798,256,2.612,266,1.57,289,1.73,290,2.323,291,2.323,296,2.055,300,2.309,301,2.612,364,3.877,366,3.393,514,2.343,549,3.877,737,3.859,741,3.877,742,3.877,743,4.73,770,5.607,771,5.431,772,3.696,773,4.696,774,3.696]],["title/injectables/RxStompRPCService.html",[218,0.609,775,2.14]],["body/injectables/RxStompRPCService.html",[0,0.208,2,0.427,3,0.427,4,0.362,6,0.496,8,0.255,20,1.634,30,0.568,31,0.038,32,0.644,52,0.898,57,1.232,58,0.427,70,1.634,128,1.22,184,0.03,185,0.03,189,1.105,191,1.336,218,1.182,220,1.826,222,2.225,224,1.657,225,2.278,226,1.657,227,1.503,233,0.999,239,2.014,252,2.002,253,2.231,254,3.493,255,2.002,257,4.08,258,4.08,259,3.512,260,3.512,289,1.344,514,2.002,724,3.493,727,4.08,728,4.617,730,2.506,775,3.512,776,3.088,777,3.311,778,2.517,779,4.011,780,4.011,781,4.011]],["title/injectables/RxStompService.html",[218,0.609,778,1.356]],["body/injectables/RxStompService.html",[0,0.281,2,0.435,3,0.435,4,0.369,6,0.505,8,0.246,20,1.664,31,0.038,52,0.803,57,1.403,58,0.435,184,0.031,185,0.031,218,1.166,220,1.508,224,1.675,225,2.036,226,1.675,227,1.52,229,4.126,230,3.122,231,1.01,232,2.494,233,1.187,234,2.779,235,3.551,236,3.551,237,3.551,238,3.998,239,2.036,252,2.038,253,2.271,289,1.969,776,2.551,778,2.25,782,3.371,783,3.122]],["title/classes/Stomp.html",[0,0.156,8,0.137]],["body/classes/Stomp.html",[0,0.281,2,0.271,3,0.271,4,0.229,6,0.314,8,0.246,11,1.64,16,1.559,21,0.314,22,0.908,23,1.062,29,1.036,30,0.603,31,0.039,32,0.684,37,0.7,45,1.559,48,1.672,52,0.585,57,0.633,58,0.271,61,2.476,74,2.126,78,2.026,87,3.436,92,2.589,95,3.5,97,1.811,104,1.64,113,3.566,128,1.295,184,0.022,185,0.022,189,1.004,191,0.908,195,1.035,226,1.221,227,1.108,231,1.092,233,0.513,246,2.589,262,2.322,266,1.108,273,1.346,274,2.635,294,2.82,343,2.589,347,2.589,349,2.907,417,3.306,426,4.232,427,3.007,429,3.027,435,2.276,442,3.516,452,4.232,559,2.661,607,2.097,612,1.805,670,4.067,708,3.007,709,3.007,730,1.587,784,2.097,785,3.643,786,4.653,787,3.643,788,2.54,789,3.643,790,3.007,791,3.643,792,3.643,793,3.643,794,3.643,795,4.653,796,3.643,797,3.643,798,2.54,799,3.643,800,3.643,801,3.643,802,4.067,803,3.643,804,2.54,805,4.653,806,3.643,807,4.26,808,3.643,809,3.643,810,3.643,811,3.643,812,3.643,813,3.643,814,3.643,815,4.653,816,3.643,817,3.643,818,4.26,819,2.54,820,2.54,821,2.54,822,3.643,823,3.643,824,2.097,825,2.54,826,2.54,827,2.54,828,1.587,829,3.643,830,2.54,831,2.54,832,2.54,833,3.643,834,2.54,835,2.54,836,3.643,837,2.54,838,2.54]],["title/classes/StompConfig.html",[0,0.156,512,1.503]],["body/classes/StompConfig.html",[0,0.179,2,0.25,3,0.25,4,0.212,6,0.29,8,0.186,11,1.55,18,0.714,21,0.29,22,0.858,23,1.552,29,0.823,30,0.831,31,0.039,32,0.938,34,1.285,36,1.718,52,0.654,57,0.858,58,0.25,70,1.403,128,1.047,142,3,184,0.021,185,0.021,191,1.531,200,2.239,202,0.868,203,2.803,205,3.627,210,2.803,223,1.058,227,1.452,230,2.151,231,0.907,233,1.241,240,2.151,241,1.55,264,2.446,283,1.67,294,2.491,305,3.188,348,2.446,361,2.842,378,2.842,395,3.188,397,3.188,401,3.188,402,3.188,404,3.188,406,3.188,410,2.842,498,2.446,512,1.718,525,1.94,526,1.94,560,1.94,571,3.704,574,3.704,576,3.704,660,3.704,661,3.704,662,3.704,668,2.842,669,1.94,675,2.842,682,2.842,686,2.842,694,1.94,696,2.842,706,2.842,713,2.842,716,1.94,717,1.94,718,1.94,719,1.94,720,1.94,721,1.94,723,1.94,839,3.667,840,4.487,841,4.487,842,4.487,843,4.487,844,2.35,845,2.35,846,2.35,847,3.443,848,2.35,849,2.35,850,3.443,851,2.35,852,3.443,853,2.35,854,3.443,855,2.35,856,2.35,857,3.443,858,2.35,859,2.35,860,2.35,861,3.443,862,2.35,863,3.443,864,2.35,865,2.35,866,2.35,867,2.35,868,2.35,869,2.35,870,2.35,871,2.35,872,2.35]],["title/classes/StompHeaders.html",[0,0.156,34,0.751]],["body/classes/StompHeaders.html",[0,0.273,2,0.474,3,0.474,4,0.401,6,0.55,8,0.203,9,3.67,13,2.001,18,1.703,21,0.55,29,1.194,31,0.036,32,0.714,34,1.311,36,2.889,37,1.225,56,3.159,58,0.474,71,3.67,167,2.777,184,0.032,185,0.032,189,1.225,231,0.898,273,1.642,666,3.67,839,3.285,873,3.67,874,4.446,875,4.446,876,4.446,877,4.446,878,4.446,879,4.446]],["title/injectables/StompRService.html",[218,0.609,880,1.881]],["body/injectables/StompRService.html",[0,0.19,1,1.605,2,0.143,3,0.143,4,0.121,6,0.166,8,0.255,10,1.846,11,1.881,12,1.111,13,2.395,14,1.582,16,1.465,18,1.681,19,1.533,20,0.548,21,0.166,22,0.825,23,1.369,26,1.582,27,1.281,29,1.064,30,0.468,31,0.039,32,0.814,34,1.042,37,1.397,42,1.391,45,0.746,48,1.717,52,0.702,57,0.555,58,0.143,61,0.606,63,0.956,70,1.16,74,1.111,75,2.604,85,1.838,87,0.841,90,1.838,97,1.745,104,2.473,128,1.2,142,1.238,167,1.391,184,0.014,185,0.02,189,1.088,191,0.825,192,1.238,193,1.391,195,1.348,198,2.324,201,1.391,202,1.808,206,3.253,218,0.575,220,1.899,224,0.746,225,1.348,226,0.746,228,1.281,231,0.575,232,1.651,240,1.391,241,1.65,244,1.84,248,1.582,252,0.672,253,0.748,263,1.84,266,0.677,267,2.351,270,2.466,272,3.106,273,1.222,274,2.181,289,0.746,294,1.97,296,0.748,299,3.259,300,0.841,301,2.664,303,1.391,310,2.805,319,3.259,320,1.838,325,4.041,326,2.731,327,1.838,328,1.838,329,2.731,330,2.351,331,2.805,332,2.731,333,1.838,334,1.838,336,3.259,338,2.969,339,3.259,340,2.731,341,2.731,342,1.838,343,2.351,345,1.582,346,2.731,347,3.106,348,1.582,349,2.611,350,3.742,352,2.731,356,2.067,360,2.023,365,1.838,366,2.918,367,1.582,370,3.106,374,3.259,375,1.838,380,1.582,385,2.611,387,2.023,407,1.111,408,1.111,414,2.35,417,2.351,422,2.351,424,2.067,429,2.351,436,2.731,438,1.582,444,1.838,445,1.838,459,1.838,460,2.731,461,1.838,462,1.838,465,1.838,466,2.067,467,1.838,468,1.838,469,1.391,470,1.838,471,2.351,472,1.838,473,1.838,474,2.731,485,1.838,490,2.731,491,2.351,492,1.84,493,1.838,494,1.838,495,1.582,496,1.838,497,1.838,498,1.582,499,3.025,500,1.838,502,1.838,511,0.956,512,1.111,514,1.421,515,2.351,530,1.111,548,1.111,555,1.111,558,1.111,559,0.841,582,2.023,589,1.111,647,1.111,651,1.111,654,1.111,710,1.111,730,0.841,736,1.582,778,1.002,828,1.391,880,1.391,881,3.653,882,1.111,883,1.582,884,1.582,885,1.84,886,1.838,887,2.226,888,2.226,889,1.838,890,1.838,891,1.838,892,1.838,893,1.391,894,2.067,895,3.309,896,2.226,897,2.847,898,2.847,899,2.847,900,2.847,901,2.847,902,1.346,903,1.346,904,1.346,905,2.226,906,1.346,907,4.179,908,2.226,909,1.346,910,2.226,911,2.226,912,2.226,913,2.226,914,2.226,915,1.346,916,2.226,917,2.226,918,1.346,919,1.346,920,1.346,921,2.847,922,1.346,923,1.346,924,2.226,925,2.226,926,2.226,927,1.346,928,1.346,929,1.346,930,1.346,931,1.346,932,1.346,933,1.346,934,1.346,935,1.346,936,1.346,937,1.111,938,1.346,939,3.309,940,1.346,941,2.226,942,1.346,943,1.346,944,1.346,945,1.346,946,1.346,947,1.346,948,1.346,949,2.226,950,1.346,951,1.346,952,1.346,953,1.346,954,1.346,955,1.346,956,1.346,957,1.346,958,1.346,959,1.346,960,1.346,961,1.346,962,1.346,963,2.226,964,1.346,965,1.346,966,1.346,967,1.346,968,1.346,969,1.346,970,1.346,971,1.346,972,1.111,973,1.346,974,1.346,975,1.346,976,1.346]],["title/injectables/StompService.html",[218,0.609,894,1.881]],["body/injectables/StompService.html",[0,0.267,2,0.39,3,0.39,4,0.33,6,0.577,8,0.247,19,1.286,20,1.491,23,1.163,30,0.518,31,0.039,32,0.588,37,1.286,48,1.113,52,0.825,57,1.163,58,0.39,70,2.093,97,1.814,128,1.113,184,0.029,185,0.029,189,1.009,191,0.912,218,1.038,220,1.724,224,1.564,225,2.204,226,1.564,232,1.826,233,0.943,241,2.313,252,1.826,266,1.562,270,2.286,271,3.021,301,2.595,303,2.286,310,2.601,356,2.286,366,2.286,380,2.601,466,2.915,471,2.601,491,2.601,512,2.7,514,2.329,736,3.316,778,2.101,783,2.915,828,2.915,880,3.21,883,3.316,884,3.316,885,3.009,886,3.853,889,3.021,890,3.021,891,3.021,892,3.021,894,2.915,937,3.021,972,3.021,977,3.021,978,4.667,979,3.66,980,4.667,981,4.667,982,3.66,983,3.021,984,3.66,985,3.66]],["title/classes/StompSubscription.html",[0,0.156,513,1.881]],["body/classes/StompSubscription.html",[0,0.261,2,0.439,3,0.439,4,0.372,6,0.509,8,0.188,18,1.528,21,0.509,22,1.253,23,1.467,29,1.096,30,0.712,31,0.038,32,0.807,34,1.253,45,1.684,52,0.662,58,0.439,184,0.031,185,0.031,202,1.522,231,1.015,233,1.015,263,2.795,265,3.571,266,1.528,273,1.856,286,2.928,371,4.86,492,3.274,513,3.526,839,3.387,986,3.402,987,4.121,988,5.026,989,4.121,990,5.026,991,4.121]],["title/classes/Transaction.html",[0,0.156,992,2.14]],["body/classes/Transaction.html",[0,0.253,2,0.418,3,0.418,4,0.354,6,0.486,16,1.635,17,3.467,21,0.486,22,1.216,23,1.498,29,1.072,30,0.752,31,0.038,32,0.852,45,1.316,58,0.418,184,0.03,185,0.03,202,1.802,231,1.122,233,1.122,266,1.736,267,3.467,268,4.028,273,1.451,424,3.048,492,3.087,790,4.028,992,4.271,993,3.242,994,3.928,995,3.928,996,3.928,997,5.819,998,5.819,999,3.928,1000,4.879,1001,3.928,1002,4.879,1003,3.928,1004,3.928,1005,3.928]],["title/classes/Versions.html",[0,0.156,227,0.916]],["body/classes/Versions.html",[0,0.268,1,1.446,2,0.346,3,0.346,4,0.293,6,0.401,8,0.252,21,0.401,22,1.076,23,1.483,29,1.209,30,0.762,31,0.039,32,0.907,37,1.336,45,1.446,48,1.571,58,0.346,61,1.46,70,1.322,72,2.305,87,3.661,97,1.732,104,1.942,113,2.695,128,0.987,184,0.027,185,0.027,189,0.894,191,0.809,195,2.105,224,1.446,227,1.809,244,2.399,262,2.153,274,2.153,435,3.028,469,2.695,527,3.562,679,4.566,701,3.562,702,4.566,703,4.566,983,3.562,1006,2.678,1007,5.167,1008,5.167,1009,5.167,1010,5.167,1011,5.167,1012,3.245,1013,3.245,1014,4.315,1015,4.315,1016,4.315,1017,4.315,1018,3.245,1019,3.245,1020,3.245,1021,3.245,1022,3.245,1023,3.245,1024,3.245,1025,3.245,1026,3.245,1027,3.245,1028,3.245,1029,3.245,1030,3.245]],["title/coverage.html",[1031,3.388]],["body/coverage.html",[0,0.315,1,1.172,4,0.316,5,2.886,8,0.266,19,0.963,30,0.495,31,0.038,34,0.871,54,1.944,61,1.574,140,2.184,184,0.028,185,0.028,186,2.261,187,2.184,188,2.831,218,1.141,219,2.484,220,2.123,221,3.22,222,2.04,223,2.48,227,1.063,228,1.574,231,0.706,254,2.184,255,2.261,256,1.944,261,2.886,289,1.172,290,2.394,291,2.394,292,2.886,294,1.744,357,2.484,512,1.744,513,2.184,724,2.184,725,2.886,775,2.484,776,3.141,777,2.886,778,1.574,782,2.886,783,2.184,784,2.886,802,2.886,839,3.141,873,2.886,880,2.184,881,2.484,882,2.886,885,1.944,894,2.184,977,2.886,986,2.886,992,2.484,993,2.886,1006,2.886,1031,2.886,1032,3.496,1033,3.496,1034,6.166,1035,5.511,1036,3.496,1037,3.496,1038,2.886,1039,4.532,1040,4.532,1041,3.496,1042,3.496,1043,4.532,1044,5.319,1045,3.496,1046,3.496,1047,3.496,1048,3.496,1049,3.496,1050,3.496,1051,4.532,1052,3.496,1053,3.496,1054,3.496,1055,3.496]],["title/dependencies.html",[893,2.261,1056,2.518]],["body/dependencies.html",[31,0.036,184,0.034,185,0.034,893,3.027,1057,4.847,1058,4.847]],["title/miscellaneous/enumerations.html",[1059,1.257,1060,2.989]],["body/miscellaneous/enumerations.html",[0,0.232,8,0.256,21,0.552,31,0.032,104,2.373,184,0.032,185,0.032,220,1.648,224,1.496,225,2.147,226,1.496,289,1.496,290,2.009,291,2.009,308,3.171,338,3.746,354,4.632,385,2.788,466,2.788,515,3.987,582,3.746,824,4.352,828,2.788,881,3.171,883,3.171,884,3.171,885,2.482,1059,2.227,1060,3.684,1061,3.171,1062,5.797,1063,4.463,1064,4.463]],["title/miscellaneous/functions.html",[231,0.732,1059,1.257]],["body/miscellaneous/functions.html",[8,0.253,21,0.539,31,0.034,32,0.835,45,1.742,97,1.742,128,1.326,184,0.032,185,0.032,189,1.201,191,1.087,218,0.881,220,1.61,224,1.461,225,1.776,226,1.461,228,1.962,231,1.162,233,0.881,235,3.098,236,3.098,237,3.098,238,3.694,239,1.776,241,2.34,243,3.599,246,3.098,251,3.599,317,3.599,330,3.098,345,3.694,776,2.723,778,2.589,783,3.248,885,2.891,893,2.723,1038,4.292,1059,2.176,1061,3.098,1065,4.36,1066,4.36]],["title/index.html",[21,0.372,1067,2.486]],["body/index.html",[0,0.25,31,0.034,184,0.034,185,0.034,186,2.403,218,0.973,1067,3.975,1068,4.816,1069,4.816,1070,4.816]],["title/modules.html",[1071,3.388]],["body/modules.html",[31,0.034,184,0.034,185,0.034,1071,4.027]],["title/miscellaneous/typealiases.html",[1059,1.257,1072,3.62]],["body/miscellaneous/typealiases.html",[1,1.694,8,0.231,10,2.403,12,2.895,16,1.394,19,1.393,21,0.514,29,1.1,30,0.589,31,0.031,37,1.146,39,2.075,48,1.265,184,0.031,185,0.031,188,2.598,189,1.599,200,2.717,203,3.401,204,3.868,205,3.401,210,3.401,212,2.955,214,2.955,215,2.598,216,2.955,217,3.868,223,2.275,231,1.192,233,0.84,239,1.694,255,2.522,266,1.265,290,1.872,291,1.872,737,3.868,1059,2.075,1061,2.955,1073,4.159,1074,5.9]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":140,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"coverage.html":{}}}],["0/4",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["1.0",{"_index":702,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":703,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1.6",{"_index":1058,"title":{},"body":{"dependencies.html":{}}}],["1.2",{"_index":679,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1035,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1069,"title":{},"body":{"index.html":{}}}],["15/15",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["18/18",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":1070,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":405,"title":{},"body":{"classes/RxStomp.html":{}}}],["20000",{"_index":403,"title":{},"body":{"classes/RxStomp.html":{}}}],["3/3",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["32/32",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["35/35",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1068,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":148,"title":{},"body":{"classes/Frame.html":{}}}],["87",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":448,"title":{},"body":{"classes/RxStomp.html":{}}}],["_beforeconnect",{"_index":533,"title":{},"body":{"classes/RxStomp.html":{}}}],["_binarybodi",{"_index":67,"title":{},"body":{"classes/Frame.html":{}}}],["_bodi",{"_index":64,"title":{},"body":{"classes/Frame.html":{}}}],["_changestate(st",{"_index":656,"title":{},"body":{"classes/RxStomp.html":{}}}],["_debug",{"_index":536,"title":{},"body":{"classes/RxStomp.html":{}}}],["_mapstompstate(st",{"_index":938,"title":{},"body":{"injectables/StompRService.html":{}}}],["_queuedmessag",{"_index":529,"title":{},"body":{"classes/RxStomp.html":{}}}],["_repliesobserv",{"_index":746,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuenam",{"_index":740,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_sendqueuedmessag",{"_index":595,"title":{},"body":{"classes/RxStomp.html":{}}}],["_serverheadersbehavioursubject",{"_index":521,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupreplyqueu",{"_index":744,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupunhandledmessag",{"_index":646,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupunhandledreceipt",{"_index":650,"title":{},"body":{"classes/RxStomp.html":{}}}],["_stompclient",{"_index":531,"title":{},"body":{"classes/RxStomp.html":{}}}],["abort",{"_index":997,"title":{},"body":{"classes/Transaction.html":{}}}],["accept",{"_index":874,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":17,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/Transaction.html":{}}}],["accessor",{"_index":26,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ack",{"_index":267,"title":{},"body":{"classes/Message.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{}}}],["acknowledg",{"_index":272,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["act",{"_index":785,"title":{},"body":{"classes/Stomp.html":{}}}],["activ",{"_index":317,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/functions.html":{}}}],["activemq",{"_index":773,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["actual",{"_index":374,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ad",{"_index":197,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["add",{"_index":392,"title":{},"body":{"classes/RxStomp.html":{}}}],["addit",{"_index":875,"title":{},"body":{"classes/StompHeaders.html":{}}}],["addition",{"_index":924,"title":{},"body":{"injectables/StompRService.html":{}}}],["advanc",{"_index":14,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/StompRService.html":{}}}],["alias",{"_index":1073,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":429,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["alreadi",{"_index":330,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["altern",{"_index":805,"title":{},"body":{"classes/Stomp.html":{}}}],["alway",{"_index":334,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["angular'",{"_index":249,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/cor",{"_index":252,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":736,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular7.html",{"_index":237,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["anoth",{"_index":823,"title":{},"body":{"classes/Stomp.html":{}}}],["any).assign",{"_index":79,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["app_initi",{"_index":250,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["application/octet",{"_index":458,"title":{},"body":{"classes/RxStomp.html":{}}}],["appropri",{"_index":416,"title":{},"body":{"classes/RxStomp.html":{}}}],["array",{"_index":527,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["arraybuff",{"_index":117,"title":{},"body":{"classes/Frame.html":{}}}],["articl",{"_index":640,"title":{},"body":{"classes/RxStomp.html":{}}}],["assign",{"_index":534,"title":{},"body":{"classes/RxStomp.html":{}}}],["associ",{"_index":988,"title":{},"body":{"classes/StompSubscription.html":{}}}],["asynchron",{"_index":491,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":387,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["attribut",{"_index":659,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["auto",{"_index":414,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["automat",{"_index":438,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["avail",{"_index":71,"title":{},"body":{"classes/Frame.html":{},"classes/StompHeaders.html":{}}}],["base",{"_index":42,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["beat",{"_index":951,"title":{},"body":{"injectables/StompRService.html":{}}}],["beautifulli",{"_index":604,"title":{},"body":{"classes/RxStomp.html":{}}}],["befor",{"_index":532,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":305,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":359,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject",{"_index":336,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["behaviorsubject(nul",{"_index":554,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(rxstompstate.clos",{"_index":543,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(stompstate.clos",{"_index":974,"title":{},"body":{"injectables/StompRService.html":{}}}],["behavioursubject",{"_index":614,"title":{},"body":{"classes/RxStomp.html":{}}}],["better",{"_index":587,"title":{},"body":{"classes/RxStomp.html":{}}}],["binari",{"_index":41,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{}}}],["binarybodi",{"_index":28,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["binarybody.length",{"_index":144,"title":{},"body":{"classes/Frame.html":{}}}],["binarydata",{"_index":453,"title":{},"body":{"classes/RxStomp.html":{}}}],["bit",{"_index":584,"title":{},"body":{"classes/RxStomp.html":{}}}],["bodi",{"_index":27,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["body/binarybodi",{"_index":44,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["body]{@link",{"_index":284,"title":{},"body":{"classes/Message.html":{}}}],["bodylength",{"_index":141,"title":{},"body":{"classes/Frame.html":{}}}],["boolean",{"_index":39,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"miscellaneous/typealiases.html":{}}}],["both",{"_index":484,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["box",{"_index":437,"title":{},"body":{"classes/RxStomp.html":{}}}],["break",{"_index":381,"title":{},"body":{"classes/RxStomp.html":{}}}],["broker",{"_index":13,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["brokerurl",{"_index":395,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["byte",{"_index":53,"title":{},"body":{"classes/Frame.html":{}}}],["byte.lf",{"_index":137,"title":{},"body":{"classes/Frame.html":{}}}],["byte.nul",{"_index":122,"title":{},"body":{"classes/Frame.html":{}}}],["c",{"_index":177,"title":{},"body":{"classes/Frame.html":{}}}],["call",{"_index":273,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["call.html",{"_index":260,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callabl",{"_index":810,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":10,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":282,"title":{},"body":{"classes/Message.html":{}}}],["caller",{"_index":615,"title":{},"body":{"classes/RxStomp.html":{}}}],["care",{"_index":505,"title":{},"body":{"classes/RxStomp.html":{}}}],["carri",{"_index":490,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["case",{"_index":92,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["caution",{"_index":440,"title":{},"body":{"classes/RxStomp.html":{}}}],["caveat",{"_index":996,"title":{},"body":{"classes/Transaction.html":{}}}],["chang",{"_index":664,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["charact",{"_index":150,"title":{},"body":{"classes/Frame.html":{}}}],["check",{"_index":355,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["class",{"_index":0,"title":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["classes/frame.html",{"_index":524,"title":{},"body":{"classes/RxStomp.html":{}}}],["cleanup",{"_index":628,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["client",{"_index":294,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{}}}],["client#abort",{"_index":1000,"title":{},"body":{"classes/Transaction.html":{}}}],["client#abort]{@link",{"_index":1005,"title":{},"body":{"classes/Transaction.html":{}}}],["client#ack",{"_index":275,"title":{},"body":{"classes/Message.html":{}}}],["client#ack]{@link",{"_index":287,"title":{},"body":{"classes/Message.html":{}}}],["client#activ",{"_index":388,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#activate]{@link",{"_index":567,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#beforeconnect",{"_index":668,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":723,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":994,"title":{},"body":{"classes/Transaction.html":{}}}],["client#brokerurl",{"_index":675,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":716,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":1002,"title":{},"body":{"classes/Transaction.html":{}}}],["client#commit]{@link",{"_index":1004,"title":{},"body":{"classes/Transaction.html":{}}}],["client#configur",{"_index":410,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#configure]{@link",{"_index":560,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#connecthead",{"_index":682,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":720,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactiv",{"_index":420,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#deactivate]{@link",{"_index":580,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#debug",{"_index":847,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":872,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#disconnecthead",{"_index":686,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":721,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincom",{"_index":850,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@client#heartbeatincom",{"_index":693,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":867,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatoutgo",{"_index":696,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":719,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":277,"title":{},"body":{"classes/Message.html":{}}}],["client#nack]{@link",{"_index":288,"title":{},"body":{"classes/Message.html":{}}}],["client#onconnect",{"_index":852,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":869,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":854,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":870,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":361,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onstomperror]{@link",{"_index":526,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledfram",{"_index":857,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe]{@link",{"_index":868,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessag",{"_index":264,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledmessage]{@link",{"_index":283,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":378,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":525,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onwebsocketclos",{"_index":861,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":871,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":190,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["client#publish]{@link",{"_index":213,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["client#reconnectdelay",{"_index":863,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@client#reconnectdelay",{"_index":699,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":866,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#stompvers",{"_index":706,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":717,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscrib",{"_index":265,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":286,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#unsubscrib",{"_index":990,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":991,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":502,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#watchforreceipt]{@link",{"_index":654,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#websocketfactori",{"_index":713,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":718,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":797,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":809,"title":{},"body":{"classes/Stomp.html":{}}}],["client.t",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["client]{@link",{"_index":519,"title":{},"body":{"classes/RxStomp.html":{}}}],["close",{"_index":354,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["closeev",{"_index":212,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":207,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}}}],["closeeventcallbacktyp",{"_index":210,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closur",{"_index":623,"title":{},"body":{"classes/RxStomp.html":{}}}],["cmdandhead",{"_index":119,"title":{},"body":{"classes/Frame.html":{}}}],["code",{"_index":478,"title":{},"body":{"classes/RxStomp.html":{}}}],["cold",{"_index":643,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobserv",{"_index":620,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobservable.pipe(shar",{"_index":645,"title":{},"body":{"classes/RxStomp.html":{}}}],["combin",{"_index":248,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["command",{"_index":24,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{}}}],["commit",{"_index":998,"title":{},"body":{"classes/Transaction.html":{}}}],["compat",{"_index":819,"title":{},"body":{"classes/Stomp.html":{}}}],["compatcli",{"_index":802,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":836,"title":{},"body":{"classes/Stomp.html":{}}}],["complaint",{"_index":497,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["complet",{"_index":375,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["compliant",{"_index":353,"title":{},"body":{"classes/RxStomp.html":{}}}],["complic",{"_index":603,"title":{},"body":{"classes/RxStomp.html":{}}}],["compodoc/compodoc",{"_index":1057,"title":{},"body":{"dependencies.html":{}}}],["compos",{"_index":151,"title":{},"body":{"classes/Frame.html":{}}}],["comput",{"_index":145,"title":{},"body":{"classes/Frame.html":{}}}],["config",{"_index":514,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["config(config",{"_index":946,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.debug",{"_index":958,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.head",{"_index":961,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_in",{"_index":953,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_out",{"_index":955,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.reconnect_delay",{"_index":957,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.t",{"_index":223,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.ts:105",{"_index":663,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:18",{"_index":772,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:19",{"_index":669,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:22",{"_index":774,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:24",{"_index":864,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:29",{"_index":865,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:32",{"_index":700,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:34",{"_index":862,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:35",{"_index":683,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:39",{"_index":849,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:44",{"_index":851,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:49",{"_index":845,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:54",{"_index":848,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:58",{"_index":707,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:59",{"_index":858,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:64",{"_index":859,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:65",{"_index":697,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:69",{"_index":856,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:72",{"_index":687,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:74",{"_index":844,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:79",{"_index":694,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:84",{"_index":853,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:88",{"_index":676,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:89",{"_index":855,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:94",{"_index":860,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:95",{"_index":685,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:99",{"_index":846,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.url",{"_index":949,"title":{},"body":{"injectables/StompRService.html":{}}}],["configur",{"_index":241,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure(rxstompconfig",{"_index":389,"title":{},"body":{"classes/RxStomp.html":{}}}],["connect",{"_index":104,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{}}}],["connecthead",{"_index":397,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["connectionst",{"_index":312,"title":{},"body":{"classes/RxStomp.html":{}}}],["connectobserv",{"_index":897,"title":{},"body":{"injectables/StompRService.html":{}}}],["consequ",{"_index":508,"title":{},"body":{"classes/RxStomp.html":{}}}],["console.log(new",{"_index":407,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["consolidated/.../rx",{"_index":1061,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1063,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.t",{"_index":1074,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":220,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["consolidated/rx",{"_index":290,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.t",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.t",{"_index":784,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:20",{"_index":788,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:31",{"_index":798,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:70",{"_index":804,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/frame.t",{"_index":5,"title":{},"body":{"classes/Frame.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/frame.ts:15",{"_index":33,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:20",{"_index":35,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:25",{"_index":40,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:30",{"_index":47,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:41",{"_index":50,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/message.t",{"_index":261,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/message.ts:18",{"_index":269,"title":{},"body":{"classes/Message.html":{}}}],["consolidated/stompjs/src/message.ts:25",{"_index":276,"title":{},"body":{"classes/Message.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":839,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/transaction.t",{"_index":993,"title":{},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/transaction.ts:10",{"_index":1003,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/transaction.ts:15",{"_index":1001,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/transaction.ts:20",{"_index":999,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/types.t",{"_index":188,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.t",{"_index":1006,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:12",{"_index":1019,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:16",{"_index":1020,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:21",{"_index":1013,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:29",{"_index":1021,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:35",{"_index":1023,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:42",{"_index":1022,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:8",{"_index":1018,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":74,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["constructor",{"_index":70,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":978,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(param",{"_index":73,"title":{},"body":{"classes/Frame.html":{}}}],["constructor(priv",{"_index":747,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["constructor(publ",{"_index":1027,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":727,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(vers",{"_index":1012,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":876,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":196,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["convert",{"_index":634,"title":{},"body":{"classes/RxStomp.html":{}}}],["correlationid",{"_index":760,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":498,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["count",{"_index":149,"title":{},"body":{"classes/Frame.html":{}}}],["coverag",{"_index":1031,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":430,"title":{},"body":{"classes/RxStomp.html":{}}}],["cr",{"_index":877,"title":{},"body":{"classes/StompHeaders.html":{}}}],["creat",{"_index":45,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":340,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["currentst",{"_index":547,"title":{},"body":{"classes/RxStomp.html":{}}}],["data",{"_index":86,"title":{},"body":{"classes/Frame.html":{}}}],["date",{"_index":408,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["deactiv",{"_index":318,"title":{},"body":{"classes/RxStomp.html":{}}}],["debug",{"_index":406,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["debugfntyp",{"_index":200,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["declar",{"_index":1017,"title":{},"body":{"classes/Versions.html":{}}}],["default",{"_index":195,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["defaultmessagesobserv",{"_index":899,"title":{},"body":{"injectables/StompRService.html":{}}}],["defaultmessagessubscript",{"_index":759,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscrib",{"_index":769,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defin",{"_index":32,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["delay",{"_index":698,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["delet",{"_index":125,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["depend",{"_index":893,"title":{"dependencies.html":{}},"body":{"injectables/StompRService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["deprec",{"_index":828,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["deseri",{"_index":84,"title":{},"body":{"classes/Frame.html":{}}}],["design",{"_index":473,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["destin",{"_index":192,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["detail",{"_index":234,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["differ",{"_index":297,"title":{},"body":{"classes/RxStomp.html":{}}}],["directli",{"_index":506,"title":{},"body":{"classes/RxStomp.html":{}}}],["disabl",{"_index":692,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["disconnect",{"_index":385,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["disconnecthead",{"_index":660,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["document",{"_index":357,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"coverage.html":{}}}],["documentation/rpc",{"_index":739,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["drop",{"_index":466,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["dure",{"_index":469,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":432,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["each",{"_index":348,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["earlier",{"_index":475,"title":{},"body":{"classes/RxStomp.html":{}}}],["element",{"_index":1015,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":339,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["enabl",{"_index":684,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["end",{"_index":193,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["endpoint",{"_index":302,"title":{},"body":{"classes/RxStomp.html":{}}}],["enumer",{"_index":1060,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":792,"title":{},"body":{"classes/Stomp.html":{}}}],["error",{"_index":352,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["errorsubject",{"_index":901,"title":{},"body":{"injectables/StompRService.html":{}}}],["es6",{"_index":891,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["escap",{"_index":171,"title":{},"body":{"classes/Frame.html":{}}}],["escapeheadervalu",{"_index":68,"title":{},"body":{"classes/Frame.html":{}}}],["establish",{"_index":326,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["even",{"_index":465,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["event",{"_index":925,"title":{},"body":{"injectables/StompRService.html":{}}}],["evt",{"_index":211,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}}}],["exact",{"_index":358,"title":{},"body":{"classes/RxStomp.html":{}}}],["exactli",{"_index":229,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["exampl",{"_index":266,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"miscellaneous/typealiases.html":{}}}],["except",{"_index":304,"title":{},"body":{"classes/RxStomp.html":{}}}],["exist",{"_index":393,"title":{},"body":{"classes/RxStomp.html":{}}}],["explanatori",{"_index":639,"title":{},"body":{"classes/RxStomp.html":{}}}],["explicitli",{"_index":910,"title":{},"body":{"injectables/StompRService.html":{}}}],["export",{"_index":58,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["expos",{"_index":298,"title":{},"body":{"classes/RxStomp.html":{}}}],["extend",{"_index":20,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["f8094ed53339",{"_index":644,"title":{},"body":{"classes/RxStomp.html":{}}}],["factori",{"_index":246,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.t",{"_index":1038,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["failur",{"_index":311,"title":{},"body":{"classes/RxStomp.html":{}}}],["fals",{"_index":81,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["favor",{"_index":883,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":240,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":509,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["filter((currentst",{"_index":546,"title":{},"body":{"classes/RxStomp.html":{}}}],["filter((head",{"_index":557,"title":{},"body":{"classes/RxStomp.html":{}}}],["first",{"_index":96,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{}}}],["fix",{"_index":242,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["follow",{"_index":483,"title":{},"body":{"classes/RxStomp.html":{}}}],["format",{"_index":111,"title":{},"body":{"classes/Frame.html":{}}}],["frame",{"_index":1,"title":{"classes/Frame.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["frame#bodi",{"_index":285,"title":{},"body":{"classes/Message.html":{}}}],["frame#head",{"_index":56,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/StompHeaders.html":{}}}],["frame(param",{"_index":169,"title":{},"body":{"classes/Frame.html":{}}}],["frame.hdrvalueunescape(valu",{"_index":105,"title":{},"body":{"classes/Frame.html":{}}}],["frame.seri",{"_index":170,"title":{},"body":{"classes/Frame.html":{}}}],["frame.tounit8array(cmdandhead",{"_index":120,"title":{},"body":{"classes/Frame.html":{}}}],["frame:15",{"_index":279,"title":{},"body":{"classes/Message.html":{}}}],["frame:20",{"_index":280,"title":{},"body":{"classes/Message.html":{}}}],["frame:25",{"_index":281,"title":{},"body":{"classes/Message.html":{}}}],["frame]{@link",{"_index":523,"title":{},"body":{"classes/RxStomp.html":{}}}],["framecallbacktyp",{"_index":205,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["fromrawframe(rawfram",{"_index":88,"title":{},"body":{"classes/Frame.html":{}}}],["function",{"_index":231,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":608,"title":{},"body":{"classes/RxStomp.html":{}}}],["generatebinarydata",{"_index":454,"title":{},"body":{"classes/RxStomp.html":{}}}],["get",{"_index":462,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["getbinarybodi",{"_index":49,"title":{},"body":{"classes/Frame.html":{}}}],["getbodi",{"_index":46,"title":{},"body":{"classes/Frame.html":{}}}],["getclient",{"_index":935,"title":{},"body":{"injectables/StompRService.html":{}}}],["getconnectobserv",{"_index":919,"title":{},"body":{"injectables/StompRService.html":{}}}],["getdefaultmessagesobserv",{"_index":927,"title":{},"body":{"injectables/StompRService.html":{}}}],["geterrorsubject",{"_index":931,"title":{},"body":{"injectables/StompRService.html":{}}}],["getreceiptsobserv",{"_index":929,"title":{},"body":{"injectables/StompRService.html":{}}}],["getserverheadersobserv",{"_index":922,"title":{},"body":{"injectables/StompRService.html":{}}}],["getstompcli",{"_index":503,"title":{},"body":{"classes/RxStomp.html":{}}}],["good",{"_index":455,"title":{},"body":{"classes/RxStomp.html":{}}}],["guest",{"_index":399,"title":{},"body":{"classes/RxStomp.html":{}}}],["guid",{"_index":239,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":235,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["guide/rx",{"_index":257,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](../addit",{"_index":738,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["hack",{"_index":822,"title":{},"body":{"classes/Stomp.html":{}}}],["handl",{"_index":310,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["handler",{"_index":570,"title":{},"body":{"classes/RxStomp.html":{}}}],["handshak",{"_index":701,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["happen",{"_index":637,"title":{},"body":{"classes/RxStomp.html":{}}}],["hdrvalueescape(str",{"_index":172,"title":{},"body":{"classes/Frame.html":{}}}],["hdrvalueunescape(str",{"_index":179,"title":{},"body":{"classes/Frame.html":{}}}],["header",{"_index":18,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["header.indexof",{"_index":100,"title":{},"body":{"classes/Frame.html":{}}}],["headers.ack",{"_index":619,"title":{},"body":{"classes/RxStomp.html":{}}}],["headers.t",{"_index":873,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:8",{"_index":879,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correl",{"_index":767,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['repli",{"_index":766,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers[key",{"_index":106,"title":{},"body":{"classes/Frame.html":{}}}],["headers]{@link",{"_index":55,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["heart",{"_index":950,"title":{},"body":{"injectables/StompRService.html":{}}}],["heartbeat",{"_index":689,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["heartbeatincom",{"_index":401,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["heartbeatoutgo",{"_index":402,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["hello",{"_index":449,"title":{},"body":{"classes/RxStomp.html":{}}}],["here",{"_index":476,"title":{},"body":{"classes/RxStomp.html":{}}}],["hold",{"_index":528,"title":{},"body":{"classes/RxStomp.html":{}}}],["host",{"_index":677,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["hot",{"_index":635,"title":{},"body":{"classes/RxStomp.html":{}}}],["html5",{"_index":807,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":208,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}}}],["https://github.com/stomp",{"_index":517,"title":{},"body":{"classes/RxStomp.html":{}}}],["https://medium.com/@benlesh/hot",{"_index":641,"title":{},"body":{"classes/RxStomp.html":{}}}],["i.",{"_index":115,"title":{},"body":{"classes/Frame.html":{}}}],["id",{"_index":492,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["identifi",{"_index":1032,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":99,"title":{},"body":{"classes/Frame.html":{}}}],["ignor",{"_index":333,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["immedi",{"_index":331,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["impact",{"_index":665,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["implement",{"_index":612,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["import",{"_index":52,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["incom",{"_index":688,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["inde",{"_index":605,"title":{},"body":{"classes/RxStomp.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":439,"title":{},"body":{"classes/RxStomp.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["inherit",{"_index":278,"title":{},"body":{"classes/Message.html":{}}}],["initandconnect",{"_index":895,"title":{},"body":{"injectables/StompRService.html":{}}}],["initi",{"_index":380,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":218,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":219,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"coverage.html":{}}}],["injectablerxstomprpcconfig",{"_index":254,"title":{"injectables/InjectableRxStompRpcConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["instanc",{"_index":262,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":830,"title":{},"body":{"classes/Stomp.html":{}}}],["interfac",{"_index":186,"title":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"coverage.html":{},"index.html":{}}}],["intern",{"_index":72,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["interv",{"_index":690,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["invok",{"_index":367,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["ipublishparam",{"_index":187,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"coverage.html":{}}}],["irawframetyp",{"_index":54,"title":{"interfaces/IRawFrameType.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"coverage.html":{}}}],["isbinarybodi",{"_index":25,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["isbodyempti",{"_index":138,"title":{},"body":{"classes/Frame.html":{}}}],["issu",{"_index":470,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["javascript",{"_index":559,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["js/stompj",{"_index":518,"title":{},"body":{"classes/RxStomp.html":{}}}],["json",{"_index":433,"title":{},"body":{"classes/RxStomp.html":{}}}],["keep",{"_index":383,"title":{},"body":{"classes/RxStomp.html":{}}}],["key",{"_index":36,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["klass",{"_index":834,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":835,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":752,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":243,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["later",{"_index":245,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leav",{"_index":912,"title":{},"body":{"injectables/StompRService.html":{}}}],["left",{"_index":629,"title":{},"body":{"classes/RxStomp.html":{}}}],["length",{"_index":127,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["length:${this.bodylength",{"_index":135,"title":{},"body":{"classes/Frame.html":{}}}],["level",{"_index":588,"title":{},"body":{"classes/RxStomp.html":{}}}],["lf",{"_index":878,"title":{},"body":{"classes/StompHeaders.html":{}}}],["librari",{"_index":471,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["line",{"_index":124,"title":{},"body":{"classes/Frame.html":{}}}],["line:vari",{"_index":821,"title":{},"body":{"classes/Stomp.html":{}}}],["lines.join(byte.lf",{"_index":136,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`${name}:${frame.hdrvalueescape(`${valu",{"_index":131,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`${name}:${valu",{"_index":132,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`cont",{"_index":134,"title":{},"body":{"classes/Frame.html":{}}}],["link",{"_index":57,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["list",{"_index":887,"title":{},"body":{"injectables/StompRService.html":{}}}],["local",{"_index":459,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["locat",{"_index":799,"title":{},"body":{"classes/Stomp.html":{}}}],["logic",{"_index":602,"title":{},"body":{"classes/RxStomp.html":{}}}],["login",{"_index":398,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["long",{"_index":638,"title":{},"body":{"classes/RxStomp.html":{}}}],["loop",{"_index":415,"title":{},"body":{"classes/RxStomp.html":{}}}],["magic",{"_index":624,"title":{},"body":{"classes/RxStomp.html":{}}}],["main",{"_index":293,"title":{},"body":{"classes/RxStomp.html":{}}}],["make",{"_index":733,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["mandatori",{"_index":450,"title":{},"body":{"classes/RxStomp.html":{}}}],["mani",{"_index":9,"title":{},"body":{"classes/Frame.html":{},"classes/StompHeaders.html":{}}}],["manual",{"_index":271,"title":{},"body":{"classes/Message.html":{},"injectables/StompService.html":{}}}],["map",{"_index":360,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["mark",{"_index":680,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["marshall(param",{"_index":168,"title":{},"body":{"classes/Frame.html":{}}}],["match",{"_index":185,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["mean",{"_index":485,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mechan",{"_index":251,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["messag",{"_index":19,"title":{"classes/Message.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["message(",{"_index":599,"title":{},"body":{"classes/RxStomp.html":{}}}],["message.headers['correl",{"_index":763,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["messagecallbacktyp",{"_index":203,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messagecheckcallbacktyp",{"_index":204,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"miscellaneous/typealiases.html":{}}}],["messages.next(messag",{"_index":627,"title":{},"body":{"classes/RxStomp.html":{}}}],["method",{"_index":274,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["millisecond",{"_index":691,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["miscellan",{"_index":1059,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":444,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["modul",{"_index":1071,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":811,"title":{},"body":{"classes/Stomp.html":{}}}],["mozwebsocket",{"_index":825,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":201,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mssage",{"_index":913,"title":{},"body":{"injectables/StompRService.html":{}}}],["multipl",{"_index":391,"title":{},"body":{"classes/RxStomp.html":{}}}],["n').replace(/:/g",{"_index":176,"title":{},"body":{"classes/Frame.html":{}}}],["n').replace(/\\\\c/g",{"_index":182,"title":{},"body":{"classes/Frame.html":{}}}],["nack",{"_index":268,"title":{},"body":{"classes/Message.html":{},"classes/Transaction.html":{}}}],["name",{"_index":128,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":16,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":61,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":607,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["nodej",{"_index":791,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":789,"title":{},"body":{"classes/Stomp.html":{}}}],["noop",{"_index":539,"title":{},"body":{"classes/RxStomp.html":{}}}],["note",{"_index":468,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["notifi",{"_index":373,"title":{},"body":{"classes/RxStomp.html":{}}}],["null",{"_index":442,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["nulltermin",{"_index":158,"title":{},"body":{"classes/Frame.html":{}}}],["nullterminator.length",{"_index":162,"title":{},"body":{"classes/Frame.html":{}}}],["number",{"_index":142,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["object",{"_index":78,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["object.keys(this.head",{"_index":129,"title":{},"body":{"classes/Frame.html":{}}}],["observ",{"_index":301,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["observable.cr",{"_index":621,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["observables/subjects/behaviorsubject",{"_index":307,"title":{},"body":{"classes/RxStomp.html":{}}}],["occasion",{"_index":247,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["occur",{"_index":329,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["octet(",{"_index":443,"title":{},"body":{"classes/RxStomp.html":{}}}],["on",{"_index":673,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onc",{"_index":812,"title":{},"body":{"classes/Stomp.html":{}}}],["onconnect",{"_index":571,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":840,"title":{},"body":{"classes/StompConfig.html":{}}}],["onstomperror",{"_index":574,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledfram",{"_index":841,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledmessag",{"_index":842,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":843,"title":{},"body":{"classes/StompConfig.html":{}}}],["onwebsocketclos",{"_index":576,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["op",{"_index":535,"title":{},"body":{"classes/RxStomp.html":{}}}],["open",{"_index":1064,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["oper",{"_index":299,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["option",{"_index":191,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":808,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwis",{"_index":412,"title":{},"body":{"classes/RxStomp.html":{}}}],["out",{"_index":436,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["outgo",{"_index":695,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["output",{"_index":114,"title":{},"body":{"classes/Frame.html":{}}}],["over",{"_index":787,"title":{},"body":{"classes/Stomp.html":{}}}],["over(w",{"_index":803,"title":{},"body":{"classes/Stomp.html":{}}}],["overrid",{"_index":1016,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1067,"title":{"index.html":{}},"body":{"index.html":{}}}],["packag",{"_index":1056,"title":{"dependencies.html":{}},"body":{}}],["pair",{"_index":38,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["param",{"_index":75,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["paramet",{"_index":189,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["params.head",{"_index":754,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["parser",{"_index":214,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"miscellaneous/typealiases.html":{}}}],["part",{"_index":224,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":11,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["passcod",{"_index":400,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["payload",{"_index":431,"title":{},"body":{"classes/RxStomp.html":{}}}],["per",{"_index":94,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["pleas",{"_index":232,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["point",{"_index":194,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}}}],["possibl",{"_index":824,"title":{},"body":{"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practic",{"_index":456,"title":{},"body":{"classes/RxStomp.html":{}}}],["prefer",{"_index":376,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["present",{"_index":681,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["prior",{"_index":826,"title":{},"body":{"classes/Stomp.html":{}}}],["prioriti",{"_index":447,"title":{},"body":{"classes/RxStomp.html":{}}}],["privat",{"_index":63,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["procedur",{"_index":259,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["process",{"_index":369,"title":{},"body":{"classes/RxStomp.html":{}}}],["properti",{"_index":22,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["protect",{"_index":520,"title":{},"body":{"classes/RxStomp.html":{}}}],["protocol",{"_index":426,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["protocolvers",{"_index":1010,"title":{},"body":{"classes/Versions.html":{}}}],["provid",{"_index":345,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":23,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["publish",{"_index":319,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["publish(paramet",{"_index":421,"title":{},"body":{"classes/RxStomp.html":{}}}],["publish(queuenam",{"_index":905,"title":{},"body":{"injectables/StompRService.html":{}}}],["publishparam",{"_index":422,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["pubparam",{"_index":968,"title":{},"body":{"injectables/StompRService.html":{}}}],["queu",{"_index":460,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["queue",{"_index":366,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":742,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":446,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessag",{"_index":550,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessages.length",{"_index":597,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuenam",{"_index":907,"title":{},"body":{"injectables/StompRService.html":{}}}],["quit",{"_index":480,"title":{},"body":{"classes/RxStomp.html":{}}}],["r').replace(/\\\\n/g",{"_index":181,"title":{},"body":{"classes/Frame.html":{}}}],["r').replace(/\\n/g",{"_index":175,"title":{},"body":{"classes/Frame.html":{}}}],["r.servic",{"_index":982,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.t",{"_index":882,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{}}}],["r.service.ts:103",{"_index":934,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:132",{"_index":904,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:143",{"_index":903,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:157",{"_index":906,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:183",{"_index":909,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:215",{"_index":915,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:219",{"_index":936,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:221",{"_index":902,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:40",{"_index":918,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:63",{"_index":920,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:76",{"_index":923,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:83",{"_index":928,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:90",{"_index":930,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:98",{"_index":932,"title":{},"body":{"injectables/StompRService.html":{}}}],["rabbitmq",{"_index":364,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["random",{"_index":496,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["randomtext",{"_index":500,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["raw",{"_index":85,"title":{},"body":{"classes/Frame.html":{},"injectables/StompRService.html":{}}}],["rawframe.binarybodi",{"_index":107,"title":{},"body":{"classes/Frame.html":{}}}],["rawframe.command",{"_index":103,"title":{},"body":{"classes/Frame.html":{}}}],["rawframe.headers.revers",{"_index":98,"title":{},"body":{"classes/Frame.html":{}}}],["rawheadertyp",{"_index":217,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"miscellaneous/typealiases.html":{}}}],["re",{"_index":609,"title":{},"body":{"classes/RxStomp.html":{}}}],["re)connect",{"_index":328,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reactiv",{"_index":418,"title":{},"body":{"classes/RxStomp.html":{}}}],["read",{"_index":479,"title":{},"body":{"classes/RxStomp.html":{}}}],["readm",{"_index":980,"title":{},"body":{"injectables/StompService.html":{}}}],["receipt",{"_index":206,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptid",{"_index":499,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptsobserv",{"_index":900,"title":{},"body":{"injectables/StompRService.html":{}}}],["receiv",{"_index":12,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["recent",{"_index":346,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reconnect",{"_index":349,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["reconnectdelay",{"_index":404,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["refer",{"_index":425,"title":{},"body":{"classes/RxStomp.html":{}}}],["relat",{"_index":306,"title":{},"body":{"classes/RxStomp.html":{}}}],["remain",{"_index":616,"title":{},"body":{"classes/RxStomp.html":{}}}],["remark",{"_index":831,"title":{},"body":{"classes/Stomp.html":{}}}],["remot",{"_index":726,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["repeat",{"_index":93,"title":{},"body":{"classes/Frame.html":{}}}],["replace(/\\\\\\\\/g",{"_index":183,"title":{},"body":{"classes/Frame.html":{}}}],["replace(/\\r/g",{"_index":174,"title":{},"body":{"classes/Frame.html":{}}}],["repli",{"_index":743,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuenam",{"_index":770,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":441,"title":{},"body":{"classes/RxStomp.html":{}}}],["repres",{"_index":7,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":370,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["require('../../esm5",{"_index":793,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":796,"title":{},"body":{"classes/Stomp.html":{}}}],["respons",{"_index":926,"title":{},"body":{"injectables/StompRService.html":{}}}],["resubscrib",{"_index":467,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["result",{"_index":184,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":48,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["rpc",{"_index":255,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rpc(param",{"_index":731,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.service.t",{"_index":777,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":779,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.t",{"_index":725,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:23",{"_index":729,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:42",{"_index":732,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:50",{"_index":735,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserv",{"_index":758,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(messag",{"_index":765,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":222,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxj",{"_index":300,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{}}}],["rxjs/oper",{"_index":511,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["rxstomp",{"_index":289,"title":{"classes/RxStomp.html":{}},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rxstomp#activ",{"_index":419,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#activate]{@link",{"_index":579,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#configur",{"_index":658,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":714,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactiv",{"_index":384,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate]{@link",{"_index":566,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#decativ",{"_index":667,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#decativate]{@link",{"_index":722,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#watchforreceipt",{"_index":377,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#watchforreceipt]{@link",{"_index":522,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.activ",{"_index":409,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.configur",{"_index":394,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":451,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({destin",{"_index":445,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":916,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":501,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig",{"_index":228,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":382,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#reconnectdelay]{@link",{"_index":565,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#websocketfactori",{"_index":674,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":715,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.brokerurl",{"_index":948,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.connecthead",{"_index":960,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.debug",{"_index":959,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatincom",{"_index":952,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatoutgo",{"_index":954,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.reconnectdelay",{"_index":956,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.stompvers",{"_index":704,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactori",{"_index":710,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["rxstomprpc",{"_index":724,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstomprpcconfig",{"_index":256,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{}}}],["rxstomprpcservic",{"_index":775,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstompservic",{"_index":778,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactori",{"_index":783,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1065,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstat",{"_index":515,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["rxstompstate.clos",{"_index":941,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.connect",{"_index":589,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstompstate.open",{"_index":548,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["s",{"_index":153,"title":{},"body":{"classes/Frame.html":{}}}],["safe",{"_index":332,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["same",{"_index":230,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["sampl",{"_index":981,"title":{},"body":{"injectables/StompService.html":{}}}],["see",{"_index":233,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":424,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{}}}],["sent",{"_index":167,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["sequenc",{"_index":494,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["serial",{"_index":110,"title":{},"body":{"classes/Frame.html":{}}}],["serializecmdandhead",{"_index":123,"title":{},"body":{"classes/Frame.html":{}}}],["server",{"_index":347,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["serverhead",{"_index":313,"title":{},"body":{"classes/RxStomp.html":{}}}],["serverheadersobserv",{"_index":898,"title":{},"body":{"injectables/StompRService.html":{}}}],["servic",{"_index":885,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":198,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["setconfig(config",{"_index":933,"title":{},"body":{"injectables/StompRService.html":{}}}],["setup",{"_index":549,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueu",{"_index":771,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntyp",{"_index":737,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["share",{"_index":510,"title":{},"body":{"classes/RxStomp.html":{}}}],["show",{"_index":342,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["similar",{"_index":708,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simpl",{"_index":613,"title":{},"body":{"classes/RxStomp.html":{}}}],["simplest",{"_index":1066,"title":{},"body":{"miscellaneous/functions.html":{}}}],["situat",{"_index":586,"title":{},"body":{"classes/RxStomp.html":{}}}],["size",{"_index":146,"title":{},"body":{"classes/Frame.html":{}}}],["sizeofutf8(",{"_index":152,"title":{},"body":{"classes/Frame.html":{}}}],["skip",{"_index":199,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["skipcontentlengthhead",{"_index":69,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["socket",{"_index":815,"title":{},"body":{"classes/Stomp.html":{}}}],["sockj",{"_index":709,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":712,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["sometim",{"_index":434,"title":{},"body":{"classes/RxStomp.html":{}}}],["soon",{"_index":461,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["special",{"_index":617,"title":{},"body":{"classes/RxStomp.html":{}}}],["specif",{"_index":356,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["specifi",{"_index":427,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["st",{"_index":939,"title":{},"body":{"injectables/StompRService.html":{}}}],["standard",{"_index":95,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["state",{"_index":338,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["state.t",{"_index":1062,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statement",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":87,"title":{},"body":{"classes/Frame.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["statu",{"_index":341,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["step",{"_index":238,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":8,"title":{"classes/Stomp.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stomp#client",{"_index":806,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":837,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":827,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":801,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":937,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.j",{"_index":889,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.ov",{"_index":829,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(funct",{"_index":816,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.servic",{"_index":780,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.t",{"_index":782,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.t",{"_index":292,"title":{},"body":{"classes/RxStomp.html":{},"coverage.html":{}}}],["stomp.ts:100",{"_index":351,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:114",{"_index":504,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:127",{"_index":323,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:200",{"_index":390,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:224",{"_index":379,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:259",{"_index":413,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:278",{"_index":411,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:325",{"_index":423,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:367",{"_index":464,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:43",{"_index":337,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:476",{"_index":489,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:51",{"_index":324,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:58",{"_index":344,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:75",{"_index":362,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:87",{"_index":372,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.websocketclass",{"_index":795,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":225,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stomp/rx",{"_index":253,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{}}}],["stomp/src/rx",{"_index":291,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.j",{"_index":886,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp/stompj",{"_index":296,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{}}}],["stomp/stompjs]{@link",{"_index":516,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompclient",{"_index":322,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig",{"_index":512,"title":{"classes/StompConfig.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompconfig.beforeconnect",{"_index":561,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig.debug",{"_index":564,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscript",{"_index":625,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscription.unsubscrib",{"_index":631,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomperror",{"_index":314,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomphead",{"_index":34,"title":{"classes/StompHeaders.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompj",{"_index":226,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stompjs.stomp",{"_index":794,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/2018/10/12/remot",{"_index":258,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/2018/11/04/ng2",{"_index":236,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/inject",{"_index":221,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"coverage.html":{}}}],["stompjs/src/rx",{"_index":776,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/stomp",{"_index":881,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/stomp.service.t",{"_index":977,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/stomp.service.ts:25",{"_index":979,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs@8.x.x",{"_index":884,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":728,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuenam",{"_index":748,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueu",{"_index":750,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservic",{"_index":880,"title":{"injectables/StompRService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomprservice._mapstompstate(st",{"_index":945,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompservic",{"_index":894,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompstat",{"_index":582,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.clos",{"_index":943,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.connect",{"_index":921,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.disconnect",{"_index":942,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.open",{"_index":335,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompstate.tri",{"_index":940,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompsubscript",{"_index":513,"title":{"classes/StompSubscription.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompsubscription.unsubscrib",{"_index":632,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompvers",{"_index":661,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":386,"title":{},"body":{"classes/RxStomp.html":{}}}],["str",{"_index":90,"title":{},"body":{"classes/Frame.html":{},"injectables/StompRService.html":{}}}],["str.replace(/\\\\/g",{"_index":173,"title":{},"body":{"classes/Frame.html":{}}}],["str.replace(/\\\\r/g",{"_index":180,"title":{},"body":{"classes/Frame.html":{}}}],["str.replace(/^\\s+|\\s+$/g",{"_index":91,"title":{},"body":{"classes/Frame.html":{}}}],["strang",{"_index":481,"title":{},"body":{"classes/RxStomp.html":{}}}],["stray",{"_index":368,"title":{},"body":{"classes/RxStomp.html":{}}}],["stream",{"_index":303,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stream(param",{"_index":734,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["string",{"_index":29,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["string|arraybuff",{"_index":118,"title":{},"body":{"classes/Frame.html":{}}}],["string|publishparam",{"_index":965,"title":{},"body":{"injectables/StompRService.html":{}}}],["structur",{"_index":216,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":350,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["subscrib",{"_index":270,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["subscribe((messag",{"_index":764,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["subscribe(queuenam",{"_index":908,"title":{},"body":{"injectables/StompRService.html":{}}}],["subscript",{"_index":263,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["subscription.t",{"_index":986,"title":{},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["subscription.ts:10",{"_index":987,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscription.ts:15",{"_index":989,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subset",{"_index":562,"title":{},"body":{"classes/RxStomp.html":{}}}],["successfulli",{"_index":611,"title":{},"body":{"classes/RxStomp.html":{}}}],["suggest",{"_index":428,"title":{},"body":{"classes/RxStomp.html":{}}}],["suitabl",{"_index":112,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":972,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":781,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["super.publish(pubparam",{"_index":969,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.publish({destin",{"_index":967,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.watchforreceipt(receiptid",{"_index":971,"title":{},"body":{"injectables/StompRService.html":{}}}],["support",{"_index":435,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["supportedvers",{"_index":1011,"title":{},"body":{"classes/Versions.html":{}}}],["tabl",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1014,"title":{},"body":{"classes/Versions.html":{}}}],["tcp",{"_index":814,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":741,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporari",{"_index":365,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["test.destin",{"_index":917,"title":{},"body":{"injectables/StompRService.html":{}}}],["textdecoder().decode(this._binarybodi",{"_index":62,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(cmdandhead",{"_index":157,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(s).length",{"_index":154,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(this._bodi",{"_index":66,"title":{},"body":{"classes/Frame.html":{}}}],["thing",{"_index":487,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._beforeconnect",{"_index":540,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._binarybodi",{"_index":65,"title":{},"body":{"classes/Frame.html":{}}}],["this._binarybody).buff",{"_index":121,"title":{},"body":{"classes/Frame.html":{}}}],["this._bodi",{"_index":59,"title":{},"body":{"classes/Frame.html":{}}}],["this._changestate(rxstompstate.clos",{"_index":577,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.connect",{"_index":569,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.open",{"_index":573,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug",{"_index":541,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`attempt",{"_index":600,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`not",{"_index":593,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`request",{"_index":618,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stomp",{"_index":633,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stop",{"_index":630,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`wil",{"_index":598,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessag",{"_index":596,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessages.push(paramet",{"_index":594,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._repliesobserv",{"_index":755,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable.pipe(filter((messag",{"_index":762,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuenam",{"_index":749,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._sendqueuedmessag",{"_index":552,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject",{"_index":553,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.next(frame.head",{"_index":572,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.pip",{"_index":556,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupreplyqueu",{"_index":751,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue(this._replyqueuenam",{"_index":756,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupunhandledmessag",{"_index":537,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupunhandledreceipt",{"_index":538,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompcli",{"_index":530,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this._stompclient.activ",{"_index":578,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configur",{"_index":568,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configure(stompconfig",{"_index":563,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.deactiv",{"_index":581,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledmessag",{"_index":648,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledreceipt",{"_index":652,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.publish(paramet",{"_index":592,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.subscribe(destin",{"_index":626,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.watchforreceipt(receiptid",{"_index":655,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.activ",{"_index":964,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.binarybodi",{"_index":143,"title":{},"body":{"classes/Frame.html":{}}}],["this.bodylength",{"_index":139,"title":{},"body":{"classes/Frame.html":{}}}],["this.command",{"_index":76,"title":{},"body":{"classes/Frame.html":{}}}],["this.config",{"_index":984,"title":{},"body":{"injectables/StompService.html":{}}}],["this.configure(rxstompconfig",{"_index":962,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connect",{"_index":544,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connected$.pipe(map((st",{"_index":944,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connected$.subscrib",{"_index":551,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionst",{"_index":542,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.getvalu",{"_index":583,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.next(st",{"_index":657,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.pip",{"_index":545,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.subscribe((st",{"_index":975,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.deactiv",{"_index":963,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.escapeheadervalu",{"_index":82,"title":{},"body":{"classes/Frame.html":{}}}],["this.head",{"_index":77,"title":{},"body":{"classes/Frame.html":{}}}],["this.headers['cont",{"_index":126,"title":{},"body":{"classes/Frame.html":{}}}],["this.headers[nam",{"_index":130,"title":{},"body":{"classes/Frame.html":{}}}],["this.initandconnect",{"_index":985,"title":{},"body":{"injectables/StompService.html":{}}}],["this.isbinarybodi",{"_index":60,"title":{},"body":{"classes/Frame.html":{}}}],["this.isbodyempti",{"_index":133,"title":{},"body":{"classes/Frame.html":{}}}],["this.publish(queuedmessag",{"_index":601,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.rxstomp",{"_index":757,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish({destin",{"_index":768,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessag",{"_index":745,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.serializecmdandhead",{"_index":109,"title":{},"body":{"classes/Frame.html":{}}}],["this.serverhead",{"_index":555,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.skipcontentlengthhead",{"_index":83,"title":{},"body":{"classes/Frame.html":{}}}],["this.stat",{"_index":973,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.state.next(stomprservice._mapstompstate(st",{"_index":976,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.stomperror",{"_index":558,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.stomperrors$.next(fram",{"_index":575,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stream(params).pipe(first",{"_index":753,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.unhandledmessag",{"_index":647,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledmessage$.next(messag",{"_index":649,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledreceipt",{"_index":651,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledreceipts$.next(fram",{"_index":653,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.versions.join",{"_index":1028,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map((x",{"_index":1029,"title":{},"body":{"classes/Versions.html":{}}}],["this.watch(queuenam",{"_index":970,"title":{},"body":{"injectables/StompRService.html":{}}}],["though",{"_index":678,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["time",{"_index":327,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["todo",{"_index":995,"title":{},"body":{"classes/Transaction.html":{}}}],["topic/speci",{"_index":457,"title":{},"body":{"classes/RxStomp.html":{}}}],["tostr",{"_index":108,"title":{},"body":{"classes/Frame.html":{}}}],["tounit8array(cmdandhead",{"_index":155,"title":{},"body":{"classes/Frame.html":{}}}],["transact",{"_index":992,"title":{"classes/Transaction.html":{}},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["transpar",{"_index":309,"title":{},"body":{"classes/RxStomp.html":{}}}],["transport",{"_index":813,"title":{},"body":{"classes/Stomp.html":{}}}],["tri",{"_index":308,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["tricki",{"_index":585,"title":{},"body":{"classes/RxStomp.html":{}}}],["trigger",{"_index":325,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["trim",{"_index":89,"title":{},"body":{"classes/Frame.html":{}}}],["trim(header[0",{"_index":101,"title":{},"body":{"classes/Frame.html":{}}}],["trim(header[1",{"_index":102,"title":{},"body":{"classes/Frame.html":{}}}],["true",{"_index":80,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["tslint:dis",{"_index":820,"title":{},"body":{"classes/Stomp.html":{}}}],["twice",{"_index":636,"title":{},"body":{"classes/RxStomp.html":{}}}],["two",{"_index":482,"title":{},"body":{"classes/RxStomp.html":{}}}],["type",{"_index":30,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1072,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":966,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(config.url",{"_index":947,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(w",{"_index":838,"title":{},"body":{"classes/Stomp.html":{}}}],["typic",{"_index":244,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["uint8array",{"_index":51,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{}}}],["uint8array([0",{"_index":159,"title":{},"body":{"classes/Frame.html":{}}}],["uint8array(uint8cmdandheaders.length",{"_index":161,"title":{},"body":{"classes/Frame.html":{}}}],["uint8array](https://developer.mozilla.org/en",{"_index":590,"title":{},"body":{"classes/RxStomp.html":{}}}],["uint8cmdandhead",{"_index":156,"title":{},"body":{"classes/Frame.html":{}}}],["uint8cmdandheaders.length",{"_index":165,"title":{},"body":{"classes/Frame.html":{}}}],["uint8fram",{"_index":160,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(binarybodi",{"_index":164,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(nulltermin",{"_index":166,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(uint8cmdandhead",{"_index":163,"title":{},"body":{"classes/Frame.html":{}}}],["underli",{"_index":417,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["understand",{"_index":911,"title":{},"body":{"injectables/StompRService.html":{}}}],["unescap",{"_index":178,"title":{},"body":{"classes/Frame.html":{}}}],["unhandl",{"_index":363,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledmessag",{"_index":315,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledreceipt",{"_index":316,"title":{},"body":{"classes/RxStomp.html":{}}}],["unintend",{"_index":507,"title":{},"body":{"classes/RxStomp.html":{}}}],["uniqu",{"_index":493,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["unit8array",{"_index":116,"title":{},"body":{"classes/Frame.html":{}}}],["unless",{"_index":888,"title":{},"body":{"injectables/StompRService.html":{}}}],["unsubscrib",{"_index":371,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["url",{"_index":670,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us",{"_index":97,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["us/docs/web/api/closeev",{"_index":209,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{}}}],["us/docs/web/javascript/reference/global_objects/uint8array",{"_index":591,"title":{},"body":{"classes/RxStomp.html":{}}}],["usag",{"_index":15,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{}}}],["user",{"_index":343,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["utf",{"_index":147,"title":{},"body":{"classes/Frame.html":{}}}],["uuid",{"_index":495,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["uuid.uuid",{"_index":761,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["v${x.replac",{"_index":1030,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1007,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1008,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1009,"title":{},"body":{"classes/Versions.html":{}}}],["valid",{"_index":666,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["valu",{"_index":37,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["var",{"_index":452,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["variabl",{"_index":622,"title":{},"body":{"classes/RxStomp.html":{}}}],["veri",{"_index":486,"title":{},"body":{"classes/RxStomp.html":{}}}],["version",{"_index":227,"title":{"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["versions(['1.0",{"_index":705,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["versions([versions.v1_0",{"_index":1024,"title":{},"body":{"classes/Versions.html":{}}}],["versions.default.protocolvers",{"_index":832,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.v1_1",{"_index":1025,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1026,"title":{},"body":{"classes/Versions.html":{}}}],["via",{"_index":890,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":202,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["vs",{"_index":642,"title":{},"body":{"classes/RxStomp.html":{}}}],["waitforreceipt",{"_index":896,"title":{},"body":{"injectables/StompRService.html":{}}}],["waitforreceipt(receiptid",{"_index":914,"title":{},"body":{"injectables/StompRService.html":{}}}],["want",{"_index":983,"title":{},"body":{"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":320,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["watch(destin",{"_index":463,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt",{"_index":321,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt(receiptid",{"_index":488,"title":{},"body":{"classes/RxStomp.html":{}}}],["way",{"_index":472,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["websocket",{"_index":113,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/w",{"_index":711,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/w",{"_index":817,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":786,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketfactori",{"_index":662,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["well",{"_index":477,"title":{},"body":{"classes/RxStomp.html":{}}}],["whenev",{"_index":610,"title":{},"body":{"classes/RxStomp.html":{}}}],["whether",{"_index":43,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["wire",{"_index":892,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["within",{"_index":790,"title":{},"body":{"classes/Stomp.html":{},"classes/Transaction.html":{}}}],["wonder",{"_index":606,"title":{},"body":{"classes/RxStomp.html":{}}}],["work",{"_index":474,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["wrap",{"_index":295,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws",{"_index":818,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/w",{"_index":396,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws://broker.329broker.com:15674/w",{"_index":671,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":800,"title":{},"body":{"classes/Stomp.html":{}}}],["wsfn",{"_index":833,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/w",{"_index":672,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ye",{"_index":730,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["yield",{"_index":215,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRawFrameType.html":{},"classes/RxStomp.html":{},"miscellaneous/typealiases.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Frame.html":{"url":"classes/Frame.html","title":"class - Frame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Frame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/frame.ts\n        \n\n            \n                Description\n            \n            \n                Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nMessage is an extended Frame.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                command\n                            \n                            \n                                    Public\n                                headers\n                            \n                            \n                                    Public\n                                isBinaryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    body\n                                \n                                \n                                    binaryBody\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            command\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        command:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:15\n                            \n                        \n\n                \n                    \n                        STOMP Command\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:20\n                            \n                        \n\n                \n                    \n                        Headers, key value pairs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isBinaryBody\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isBinaryBody:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:25\n                            \n                        \n\n                \n                    \n                        Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/stompjs/src/frame.ts:30\n                                \n                            \n                    \n                        \n                                body of the frame\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        binaryBody\n                    \n                \n\n                \n                    \n                        getbinaryBody()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/stompjs/src/frame.ts:41\n                                \n                            \n                    \n                        \n                                body as Uint8Array\n\n\n                                \n                                    Returns :     Uint8Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BYTE} from './byte';\nimport {StompHeaders} from './stomp-headers';\nimport {IRawFrameType} from './types';\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * {@link Message} is an extended Frame.\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const {command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = (Object as any).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: IRawFrameType, escapeHeaderValues: boolean): Frame {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = Frame.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new Frame({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return Frame.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, binaryBody: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for Client#publish\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        binaryBody\n                                \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        destination\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        skipContentLengthHeader\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                    \n                                \n                                \n                                    \n                                        destination:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Frame} from './frame';\nimport {Message} from './message';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n */\nexport type messageCallbackType = (message: Message) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n * The callback will need to return a boolean value.\n */\nexport type messageCheckCallbackType = (frame: Frame) => boolean;\n\n/**\n * This callback will receive a {@link Frame} as parameter.\n */\nexport type frameCallbackType = (receipt: Frame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n */\nexport type closeEventCallbackType = (evt: CloseEvent) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * The parser yield frames in this structure\n */\nexport type RawHeaderType = [string, string];\nexport interface IRawFrameType { command: string; headers: RawHeaderType[]; binaryBody: Uint8Array; }\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRawFrameType.html":{"url":"interfaces/IRawFrameType.html","title":"interface - IRawFrameType","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRawFrameType\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        binaryBody\n                                \n                                \n                                        command\n                                \n                                \n                                        headers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                    \n                                \n                                \n                                    \n                                        command:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     RawHeaderType[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     RawHeaderType[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {Frame} from './frame';\nimport {Message} from './message';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n */\nexport type messageCallbackType = (message: Message) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n * The callback will need to return a boolean value.\n */\nexport type messageCheckCallbackType = (frame: Frame) => boolean;\n\n/**\n * This callback will receive a {@link Frame} as parameter.\n */\nexport type frameCallbackType = (receipt: Frame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n */\nexport type closeEventCallbackType = (evt: CloseEvent) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * The parser yield frames in this structure\n */\nexport type RawHeaderType = [string, string];\nexport interface IRawFrameType { command: string; headers: RawHeaderType[]; binaryBody: Uint8Array; }\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRpcConfig.html":{"url":"injectables/InjectableRxStompRpcConfig.html","title":"injectable - InjectableRxStompRpcConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRpcConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompRPCConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRpcConfig extends RxStompRPCConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/message.ts\n        \n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended Frame, you can access headers\nand body as properties.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                    Frame\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ack\n                            \n                            \n                                    Public\n                                nack\n                            \n                            \n                                    Public\n                                command\n                            \n                            \n                                    Public\n                                headers\n                            \n                            \n                                    Public\n                                isBinaryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ack\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ack:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/message.ts:18\n                            \n                        \n\n                \n                    \n                        When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nack\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nack:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/message.ts:25\n                            \n                        \n\n                \n                    \n                        When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            command\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        command:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:15\n                            \n                        \n\n                \n                    \n                        STOMP Command\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:20\n                            \n                        \n\n                \n                    \n                        Headers, key value pairs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isBinaryBody\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isBinaryBody:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:25\n                            \n                        \n\n                \n                    \n                        Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Frame} from './frame';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link Frame}, you can access [headers]{@link Frame#headers}\n * and [body]{@link Frame#body} as properties.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport class Message extends Frame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  public ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  public nack: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStomp.html":{"url":"classes/RxStomp.html","title":"class - RxStomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp.ts\n        \n\n            \n                Description\n            \n            \n                This is the main Stomp Client.\nTypically you will create an instance of this to connect to the STOMP broker.\nThis wraps @stomp/stompjs\nClient class.\nThe key difference is that it exposes operations as RxJS Observables.\nFor example when a STOMP endpoint is subscribed it returns an Observable\nthat will stream all received messages.\nWith exception of beforeConnect, functionality related to all callbacks in\n@stomp/stompjs Client\nis exposed as Observables/Subjects/BehaviorSubjects.\nRxStomp also tries to transparently handle connection failures.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                connected$\n                            \n                            \n                                    Public\n                                connectionState$\n                            \n                            \n                                    Public\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                stompErrors$\n                            \n                            \n                                    Public\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                unhandledReceipts$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stompClient\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp.ts:127\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connected$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:51\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connectionState$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectionState$:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:43\n                            \n                        \n\n                \n                    \n                        Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            serverHeaders$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serverHeaders$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:58\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stompErrors$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompErrors$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:100\n                            \n                        \n\n                \n                    \n                        It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onStompError\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledMessage$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledMessage$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:75\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledReceipts$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledReceipts$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:87\n                            \n                        \n\n                \n                    \n                        STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        activate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:224\n                            \n                        \n\n\n                \n                    \n                            Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(rxStompConfig: RxStompConfig)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:200\n                            \n                        \n\n\n                \n                    \n                            Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   *Maps to: Client#configure\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                        \n                                                                    RxStompConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        connected()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:278\n                            \n                        \n\n\n                \n                    \n                            It will return true if STOMP broker is connected and false otherwise.\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            deactivate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        deactivate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:259\n                            \n                        \n\n\n                \n                    \n                            Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(parameters: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:325\n                            \n                        \n\n\n                \n                    \n                            Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nSee: publishParams\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   *The message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nMaps to: Client#publish\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parameters\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watch(destination: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:367\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code read quite strange with two subscribe calls\nfollowing each other and both meaning very different things.\nMaps to: Client#subscribe\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        destination\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watchForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watchForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:476\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stompClient\n                    \n                \n\n                \n                    \n                        getstompClient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:114\n                                \n                            \n                    \n                        \n                                Instance of actual\n@stomp/stompjs\nClient.\nBe careful in calling methods on it directly - you may get unintended consequences.\n\n\n                                \n                                    Returns :     Client\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {filter, share} from 'rxjs/operators';\n\nimport {\n  Client,\n  debugFnType,\n  Frame,\n  Message,\n  publishParams,\n  StompConfig,\n  StompHeaders,\n  StompSubscription\n} from '@stomp/stompjs';\n\nimport {RxStompConfig} from './rx-stomp-config';\nimport {RxStompState} from './rx-stomp-state';\n\n/**\n * This is the main Stomp Client.\n * Typically you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client} class.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception of beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n */\nexport class RxStomp {\n  /**\n   * Connection State\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public connectionState$: BehaviorSubject;\n\n  /**\n   * Will trigger when connection is established.\n   * It will trigger every time a (re)connection occurs.\n   * If it is already connected it will trigger immediately.\n   * You can safely ignore the value, as it will always be `StompState.OPEN`\n   */\n  public connected$: Observable;\n\n  /**\n   * Provides headers from most recent connection to the server as returned by the CONNECTED frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will trigger for each reconnection.\n   */\n  public serverHeaders$: Observable;\n\n  protected _serverHeadersBehaviourSubject$: BehaviorSubject;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to unsubscribe from an endpoint.\n   *\n   * This Observer will yield the received\n   * {@link Message}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}\n   */\n  public unhandledMessage$: Subject;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [RxStomp#watchForReceipt]{@link RxStomp#watchForReceipt}.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}\n   */\n  public unhandledReceipts$: Subject;\n\n  /**\n   * It will stream all ERROR frames received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onStompError]{@link Client#onStompError}\n   */\n  public stompErrors$: Subject;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected _queuedMessages: publishParams[] = [];\n\n  /**\n   * Instance of actual\n   * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n   * {@link Client}.\n   *\n   * **Be careful in calling methods on it directly - you may get unintended consequences.**\n   */\n  get stompClient(): Client {\n    return this._stompClient;\n  }\n  protected _stompClient: Client;\n\n  /**\n   * Before connect\n   */\n  protected _beforeConnect: () => void;\n\n  /**\n   * Will be assigned during configuration, no-op otherwise\n   */\n  protected _debug: debugFnType;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this._stompClient = new Client();\n\n    // Default messages\n    this._setupUnhandledMessages();\n\n    // Receipts\n    this._setupUnhandledReceipts();\n\n    const noOp = () => {};\n\n    // Before connect is no op by default\n    this._beforeConnect = noOp;\n\n    // debug is no-op by default\n    this._debug = noOp;\n\n    // Initial state is CLOSED\n    this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n\n    this.connected$ = this.connectionState$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connected$.subscribe(() => {\n      this._sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject$ = new BehaviorSubject(null);\n\n    this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompErrors$ = new Subject();\n  }\n\n  /**\n   * Set configuration. This method may be called multiple times.\n   * Each call will add to the existing configuration.\n   *\n   * Example:\n   *\n   * ```javascript\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   * ```\n   *\n   * Maps to: [Client#configure]{@link Client#configure}\n   */\n  public configure(rxStompConfig: RxStompConfig) {\n    const stompConfig: StompConfig = (Object as any).assign({}, rxStompConfig);\n\n    if (stompConfig.beforeConnect) {\n      this._beforeConnect = stompConfig.beforeConnect;\n      delete stompConfig.beforeConnect;\n    }\n\n    // RxStompConfig has subset of StompConfig fields\n    this._stompClient.configure(stompConfig);\n    if (stompConfig.debug) {\n      this._debug = stompConfig.debug;\n    }\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n   *\n   * Maps to: [Client#activate]{@link Client#activate}\n   */\n  public activate(): void {\n    this._stompClient.configure({\n      beforeConnect: () => {\n        this._changeState(RxStompState.CONNECTING);\n\n        // Call handler\n        this._beforeConnect();\n      },\n      onConnect: (frame: Frame) => {\n        this._serverHeadersBehaviourSubject$.next(frame.headers);\n\n        // Indicate our connected state to observers\n        this._changeState(RxStompState.OPEN);\n      },\n      onStompError: (frame: Frame) => {\n        // Trigger the frame subject\n        this.stompErrors$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(RxStompState.CLOSED);\n      }\n    });\n\n    // Attempt connection\n    this._stompClient.activate();\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [RxStomp#activate]{@link RxStomp#activate}.\n   *\n   * Maps to: [Client#deactivate]{@link Client#deactivate}\n   */\n  public deactivate(): void {\n    // Disconnect if connected. Callback will set CLOSED state\n    this._stompClient.deactivate();\n\n    const stompState = this.connectionState$.getValue();\n    if (stompState === RxStompState.OPEN) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSING);\n    }\n    // This is bit tricky situation, it would be better handled at stompjs level\n    if (stompState === RxStompState.CONNECTING) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSED);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.connectionState$.getValue() === RxStompState.OPEN;\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * See: {@link publishParams}\n   *\n   * ```javascript\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * Maps to: [Client#publish]{@link Client#publish}\n   */\n  public publish(parameters: publishParams): void {\n    if (this.connected()) {\n      this._stompClient.publish(parameters);\n    } else {\n      this._debug(`Not connected, queueing`);\n      this._queuedMessages.push(parameters);\n    }\n  }\n\n  /** It will send queued messages. */\n  protected _sendQueuedMessages(): void {\n    const queuedMessages = this._queuedMessages;\n    this._queuedMessages = [];\n\n    if (queuedMessages.length === 0) {\n      return;\n    }\n\n    this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n\n    for (const queuedMessage of queuedMessages) {\n      this._debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * Note that messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * This method in the underlying library is called `subscribe`.\n   * In earlier version it was called `subscribe` here as well.\n   * However `subscribe` is also used by RxJS and code read quite strange with two subscribe calls\n   * following each other and both meaning very different things.\n   *\n   * Maps to: [Client#subscribe]{@link Client#subscribe}\n   */\n  public watch(destination: string, headers: StompHeaders = {}): Observable {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this._debug(`Request to subscribe ${destination}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers.ack) {\n      headers.ack = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this.connected$.subscribe(() => {\n            this._debug(`Will subscribe to ${destination}`);\n            stompSubscription = this._stompClient.subscribe(destination, (message: Message) => {\n                messages.next(message);\n              },\n              headers);\n          });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this._debug(`Stop watching connection state (for ${destination})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.connected()) {\n            this._debug(`Will unsubscribe from ${destination} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this._debug(`Stomp not connected, no need to unsubscribe from ${destination} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * Setup streaming unhandled messages.\n   */\n  protected _setupUnhandledMessages(): void {\n    this.unhandledMessage$ = new Subject();\n\n    this._stompClient.onUnhandledMessage = (message: Message) => {\n      this.unhandledMessage$.next(message);\n    };\n  }\n\n  /**\n   * Setup streaming unhandled receipts.\n   */\n  protected _setupUnhandledReceipts(): void {\n    this.unhandledReceipts$ = new Subject();\n\n    this._stompClient.onUnhandledReceipt = (frame: Frame) => {\n      this.unhandledReceipts$.next(frame);\n    };\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public watchForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    this._stompClient.watchForReceipt(receiptId, callback);\n  }\n\n  protected _changeState(state: RxStompState): void {\n    this.connectionState$.next(state);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:105\n                            \n                        \n\n                \n                    \n                        Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nMaps to: Client#beforeConnect\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:19\n                            \n                        \n\n                \n                    \n                        The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:88\n                            \n                        \n\n                \n                    \n                        Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:35\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:95\n                            \n                        \n\n                \n                    \n                        Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:72\n                            \n                        \n\n                \n                    \n                        Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:79\n                            \n                        \n\n                \n                    \n                        Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:65\n                            \n                        \n\n                \n                    \n                        automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:32\n                            \n                        \n\n                \n                    \n                        STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   *Maps to: Client#stompVersions\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:58\n                            \n                        \n\n                \n                    \n                        This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   *Maps to: Client#webSocketFactory\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {debugFnType, StompHeaders, Versions} from '@stomp/stompjs';\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n */\n\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:23\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rpc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        rpc(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:42\n                            \n                        \n\n\n                \n                    \n                            Make an RPC request. See the guide for example.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stream\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stream(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:50\n                            \n                        \n\n\n                \n                    \n                            Make an RPC stream request. See the guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, first } from 'rxjs/operators';\n\nimport { UUID } from 'angular2-uuid';\n\nimport {Message, publishParams, StompHeaders} from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp';\nimport { RxStompRPCConfig, setupReplyQueueFnType } from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  }\n\n  private _repliesObservable: Observable;\n\n  /**\n   * Create an instance, see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n   */\n  constructor(private rxStomp: RxStomp, private stompRPCConfig?: RxStompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html) for example.\n   */\n  public rpc(params: publishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html).\n   */\n  public stream(params: publishParams): Observable {\n    const headers: StompHeaders = (Object as any).assign({}, params.headers || {});\n    const {destination, body, binaryBody} = params;\n\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: Message) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: Message) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.rxStomp.publish({destination, body, binaryBody, headers});\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            replyQueueName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        replyQueueName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:18\n                            \n                        \n\n                \n                    \n                        Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            setupReplyQueue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setupReplyQueue:     setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                            Type :     setupReplyQueueFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:22\n                            \n                        \n\n                \n                    \n                        Setup the reply queue. See the guide for details.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, rxStomp: RxStomp) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRpcConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    InjectableRxStompRpcConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import {Injectable, Optional} from '@angular/core';\n\nimport {RxStompRPC} from '@stomp/rx-stomp';\nimport {RxStompService} from './rx-stomp.service';\nimport {InjectableRxStompRpcConfig} from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  constructor(rxStomp: RxStompService, @Optional() stompRPCConfig?: InjectableRxStompRpcConfig) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WebSocketClass\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        WebSocketClass:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:20\n                            \n                        \n\n                \n                    \n                        In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   *\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        client(url: string, protocols?: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:31\n                            \n                        \n\n\n                \n                    \n                            This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        protocols\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            over\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        over(ws: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:70\n                            \n                        \n\n\n                \n                    \n                            This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   *\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ws\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   */\n  public static over(ws: any): CompatClient {\n    const wsFn = typeof(ws) === 'function' ? ws : () => ws;\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:74\n                            \n                        \n\n                \n                    \n                        See Client#beforeConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:19\n                            \n                        \n\n                \n                    \n                        See Client#brokerURL.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:49\n                            \n                        \n\n                \n                    \n                        See Client#connectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:99\n                            \n                        \n\n                \n                    \n                        See Client#debug.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:54\n                            \n                        \n\n                \n                    \n                        See Client#disconnectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:39\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:44\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatOutgoing.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onConnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:79\n                            \n                        \n\n                \n                    \n                        See Client#onConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onDisconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onDisconnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:84\n                            \n                        \n\n                \n                    \n                        See Client#onDisconnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onStompError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onStompError:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:89\n                            \n                        \n\n                \n                    \n                        See Client#onStompError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledFrame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledFrame:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:69\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledFrame.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledMessage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledMessage:     messageCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     messageCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:59\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledMessage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledReceipt:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:64\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledReceipt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketClose\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onWebSocketClose:     closeEventCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     closeEventCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:94\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketClose.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:34\n                            \n                        \n\n                \n                    \n                        See Client#reconnectDelay.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:24\n                            \n                        \n\n                \n                    \n                        See See Client#stompVersions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:29\n                            \n                        \n\n                \n                    \n                        See Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as Frame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:8\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders { [key: string]: string }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRService.html":{"url":"injectables/StompRService.html","title":"injectable - StompRService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp-r.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Raw Service using @stomp/stomp.js\nYou will only need the public properties and\nmethods listed unless you are an advanced user. This service handles subscribing to a\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you will like to pass the configuration as a dependency,\nplease use StompService class.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    connectObservable\n                                \n                                \n                                    serverHeadersObservable\n                                \n                                \n                                    defaultMessagesObservable\n                                \n                                \n                                    receiptsObservable\n                                \n                                \n                                    errorSubject\n                                \n                                \n                                    config\n                                \n                                \n                                    client\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:221\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:143\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:132\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:157\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string | publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:183\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            waitForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:215\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:40\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        connectObservable\n                    \n                \n\n                \n                    \n                        getconnectObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:63\n                                \n                            \n                    \n                        \n                                Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        serverHeadersObservable\n                    \n                \n\n                \n                    \n                        getserverHeadersObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:76\n                                \n                            \n                    \n                        \n                                Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultMessagesObservable\n                    \n                \n\n                \n                    \n                        getdefaultMessagesObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:83\n                                \n                            \n                    \n                        \n                                Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        receiptsObservable\n                    \n                \n\n                \n                    \n                        getreceiptsObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:90\n                                \n                            \n                    \n                        \n                                Will emit all receipts\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorSubject\n                    \n                \n\n                \n                    \n                        geterrorSubject()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:98\n                                \n                            \n                    \n                        \n                                Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:103\n                                \n                            \n                    \n                        \n                                Set configuration \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        client\n                    \n                \n\n                \n                    \n                        getclient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:219\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\nimport {RxStomp, RxStompConfig, RxStompState} from '@stomp/rx-stomp';\n\nimport {publishParams, Client, Message, Frame} from '@stomp/stompjs';\n\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {StompState} from './stomp-state';\nimport { StompHeaders } from './stomp-headers';\nimport {StompConfig} from './stomp.config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Raw Service using @stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\n@Injectable()\nexport class StompRService extends RxStomp {\n  /**\n   * State of the STOMPService\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public state: BehaviorSubject;\n\n  private static _mapStompState(st: RxStompState): StompState {\n    if (st === RxStompState.CONNECTING) {\n      return StompState.TRYING;\n    }\n    if (st === RxStompState.OPEN) {\n      return StompState.CONNECTED;\n    }\n    if (st === RxStompState.CLOSING) {\n      return StompState.DISCONNECTING;\n    }\n    if (st === RxStompState.CLOSED) {\n      return StompState.CLOSED;\n    }\n  }\n\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   */\n  get connectObservable(): Observable {\n    return this.connected$.pipe(map((st: RxStompState): StompState => {\n      return StompRService._mapStompState(st);\n    }));\n  }\n\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   */\n  get serverHeadersObservable(): Observable {\n    return this.serverHeaders$;\n  }\n\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   */\n  get defaultMessagesObservable(): Subject {\n    return this.unhandledMessage$;\n  }\n\n  /**\n   * Will emit all receipts\n   */\n  get receiptsObservable(): Subject {\n    return this.unhandledReceipts$;\n  }\n\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   */\n  get errorSubject(): Subject {\n    return this.stompErrors$;\n  }\n\n  /** Set configuration */\n  set config(config: StompConfig) {\n    const rxStompConfig: RxStompConfig = { };\n\n    if (typeof(config.url) === 'string') {\n      rxStompConfig.brokerURL = config.url;\n    } else {\n      rxStompConfig.webSocketFactory = config.url;\n    }\n\n    // Configure client heart-beating\n    rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n    rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n\n    // Auto reconnect\n    rxStompConfig.reconnectDelay = config.reconnect_delay;\n\n    if (config.debug) {\n      rxStompConfig.debug = (str: string): void => {\n        console.log(new Date(), str);\n      };\n    }\n\n    rxStompConfig.connectHeaders = config.headers;\n\n    this.configure(rxStompConfig);\n  }\n  /**\n   * It will connect to the STOMP broker.\n   */\n  public initAndConnect(): void {\n    // disconnect if connected\n    this.deactivate();\n\n    // Attempt connection, passing in a callback\n    this.activate();\n  }\n\n  /**\n   * It will disconnect from the STOMP broker.\n   */\n  public disconnect(): void {\n    this.deactivate();\n  }\n\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param queueName\n   * @param message\n   * @param headers\n   */\n  public publish(queueName: string|publishParams, message?: string, headers: StompHeaders = {}): void {\n    if (typeof queueName === 'string') {\n      super.publish({destination: queueName as string, body: message, headers});\n    } else {\n      const pubParams: publishParams = queueName;\n      super.publish(pubParams);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, mssages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param queueName\n   * @param headers\n   */\n  public subscribe(queueName: string, headers: StompHeaders = {}): Observable {\n    return this.watch(queueName, headers);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public waitForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    super.watchForReceipt(receiptId, callback);\n  }\n\n  get client(): Client {\n    return this._stompClient;\n  }\n\n  public constructor() {\n    super();\n\n    this.state = new BehaviorSubject(StompState.CLOSED);\n\n    this.connectionState$.subscribe((st: RxStompState) => {\n      this.state.next(StompRService._mapStompState(st));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\n\n            \n\n            \n                Example\n            \n            \n            \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompSubscription.html":{"url":"classes/StompSubscription.html","title":"class - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:10\n                            \n                        \n\n                \n                    \n                        Id associated with this subscription.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unsubscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unsubscribe:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:15\n                            \n                        \n\n                \n                    \n                        Unsubscribe. See Client#unsubscribe for an example.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transaction.html":{"url":"classes/Transaction.html","title":"class - Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/transaction.ts\n        \n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nTODO: Example and caveat\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                abort\n                            \n                            \n                                    Public\n                                commit\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            abort\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        abort:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:20\n                            \n                        \n\n                \n                    \n                        Abort this transaction. See Client#abort for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            commit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commit:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:15\n                            \n                        \n\n                \n                    \n                        Commit this transaction. See Client#commit for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:10\n                            \n                        \n\n                \n                    \n                        You will need to access this to send, ack, or nack within this transaction.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Transaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  public id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  public commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  public abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n            \n                Description\n            \n            \n                Supported STOMP versions\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:21\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_0\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_0:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:8\n                            \n                        \n\n                \n                    \n                        1.0\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_1:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.1'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:12\n                            \n                        \n\n                \n                    \n                        1.1\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.2'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:16\n                            \n                        \n\n                \n                    \n                        1.2\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            versions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        versions:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            protocolVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        protocolVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:42\n                            \n                        \n\n\n                \n                    \n                            Used while creating a WebSocket\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportedVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        supportedVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:35\n                            \n                        \n\n\n                \n                    \n                            Used as part of CONNECT STOMP Frame\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompRpcConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompRPCService\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n            \n            \n                function\n            \n            \n                rxStompServiceFactory\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompService\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp-r.service.ts\n            \n            \n                injectable\n            \n            \n                StompRService\n            \n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp.service.ts\n            \n            \n                injectable\n            \n            \n                StompService\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            \n                class\n            \n            \n                RxStompConfig\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            \n                class\n            \n            \n                RxStompRPCConfig\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            \n                class\n            \n            \n                RxStompRPC\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            \n                class\n            \n            \n                RxStomp\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            \n                class\n            \n            \n                Client\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            \n                class\n            \n            \n                CompatClient\n            \n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            \n                class\n            \n            \n                Stomp\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/frame.ts\n            \n            \n                class\n            \n            \n                Frame\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/message.ts\n            \n            \n                class\n            \n            \n                Message\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            \n                class\n            \n            \n                StompConfig\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            \n                class\n            \n            \n                StompHeaders\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            \n                class\n            \n            \n                StompSubscription\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/transaction.ts\n            \n            \n                class\n            \n            \n                Transaction\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            \n                interface\n            \n            \n                IPublishParams\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            \n                interface\n            \n            \n                IRawFrameType\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            \n                class\n            \n            \n                Versions\n            \n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.6\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rxStompServiceFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nrxStompServiceFactory(rxStompConfig)\n                    \n                \n\n\n\n\n                \n                    \n                            Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            messageCheckCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            RawHeaderType   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        closeEventCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a CloseEvent\nas parameter.\n\n                        \n                    \n                \n                    \n                        closeEventCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        debugFnType\n                    \n                \n                    \n                        \n                            This callback will receive a string as parameter.\n\n                        \n                    \n                \n                    \n                        debugFnType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        frameCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Frame as parameter.\n\n                        \n                    \n                \n                    \n                        frameCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        messageCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Message as parameter.\n\n                        \n                    \n                \n                    \n                        messageCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        messageCheckCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Message as parameter.\nThe callback will need to return a boolean value.\n\n                        \n                    \n                \n                    \n                        messageCheckCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        RawHeaderType\n                    \n                \n                    \n                        \n                            The parser yield frames in this structure\n\n                        \n                    \n                \n                    \n                        RawHeaderType:     [string, string]\n\n                    \n                \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n        \n            \n                \n                    \n                        \n                        setupReplyQueueFnType\n                    \n                \n                    \n                        \n                            See the guide for example\n\n                        \n                    \n                \n                    \n                        setupReplyQueueFnType:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
