var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/IFrame.html",[0,0.796,1,1.278]],["body/interfaces/IFrame.html",[0,0.9,1,2.435,2,1.591,3,0.467,4,0.467,5,0.408,6,1.956,7,2.488,8,0.408,9,3.758,10,0.252,11,2.713,12,3.758,13,3.242,14,3.242,15,3.242,16,1.711,17,4.541,18,3.242,19,2.073,20,2.549,21,1.517,22,0.389,23,0.865,24,1.558,25,3.758,26,0.247,27,0.689,28,3.821,29,3.299,30,4.709,31,5.352,32,3.963,33,0.575,34,0.037,35,1.119,36,1.382,37,3.242,38,1.711,39,4.541,40,1.733,41,3.242,42,2.549,43,4.541,44,4.541,45,1.711,46,3.758,47,0.664,48,2.884,49,2.884,50,1.558,51,0.608,52,2.549,53,2.884,54,0.027,55,0.027]],["title/interfaces/IMessage.html",[0,0.796,24,1.058]],["body/interfaces/IMessage.html",[0,0.91,1,2.105,2,1.609,3,0.472,4,0.472,5,0.413,6,1.978,8,0.413,10,0.153,11,1.609,20,2.568,21,1.388,22,0.435,23,0.967,24,1.844,25,3.786,26,0.25,27,0.816,29,1.978,33,0.513,34,0.037,36,1.311,45,1.724,47,0.871,48,2.917,50,1.569,51,0.613,54,0.027,55,0.027,56,2.516,57,2.31,58,2.507,59,2.568,60,1.46,61,2.878,62,4.575,63,1.087,64,3.195,65,1.622,66,2.089,67,4.075,68,4.724,69,1.527,70,4.448,71,5.375,72,3.838,73,2.025,74,3.382,75,4.575,76,4.575,77,3.525,78,2.917,79,3.525,80,3.525,81,3.525,82,2.917,83,3.525,84,1.896,85,3.525,86,2.516]],["title/interfaces/IPublishParams.html",[0,0.796,87,1.278]],["body/interfaces/IPublishParams.html",[0,1.253,1,1.718,2,1.096,3,0.322,4,0.322,5,0.281,8,0.281,10,0.104,11,1.893,16,1.322,21,1.385,22,0.469,23,1.042,24,1.422,26,0.17,27,0.533,28,3.464,29,3.012,30,1.987,32,3.257,33,0.576,34,0.038,35,1.113,36,1.178,40,1.422,41,2.96,47,0.79,50,1.565,51,0.771,52,1.348,54,0.021,55,0.021,58,1.454,60,2.011,84,2.169,86,2.505,87,1.89,88,1.51,89,1.322,90,2.904,91,2.96,92,2.505,93,1.228,94,3.188,95,3.775,96,2.505,97,2.904,98,0.997,99,2.904,100,2.904,101,2.869,102,2.904,103,1.602,104,1.97,105,3.509,106,2.216,107,2.45,108,1.348,109,1.714,110,1.714,111,1.714,112,1.714,113,2.401,114,3.509,115,2.401,116,1.714,117,3.509,118,3.509,119,2.401,120,2.401,121,1.714,122,2.401,123,1.714,124,1.51,125,1.714,126,0.823,127,3.509,128,3.257,129,3.509,130,2.401,131,1.714,132,1.348,133,2.401,134,3.509,135,4.561,136,4.853,137,2.401,138,1.348,139,2.401,140,2.401,141,2.401,142,1.714,143,3.737,144,2.401,145,4.561,146,3.464,147,2.401,148,2.401,149,2.401,150,2.401,151,1.454,152,1.987,153,2.207,154,2.401,155,2.401,156,1.714,157,2.401,158,1.97,159,2.094,160,1.987,161,2.904,162,2.401,163,1.212,164,2.401,165,1.714,166,2.401,167,0.905,168,2.401,169,2.505,170,1.987,171,3.509,172,1.987,173,1.987,174,1.987,175,1.987,176,1.987,177,1.714,178,1.987,179,1.987,180,1.987]],["title/interfaces/IRxStompPublishParams.html",[0,0.796,181,1.94]],["body/interfaces/IRxStompPublishParams.html",[0,1.052,2,1.861,3,0.546,4,0.546,5,0.477,8,0.477,10,0.236,16,1.89,22,0.43,23,0.776,26,0.289,27,0.761,33,0.412,34,0.037,40,1.863,47,0.776,51,0.546,54,0.029,55,0.029,58,2.078,66,2.29,87,2.251,93,1.061,98,1.425,103,2.29,104,3.182,159,2.862,181,3.155,182,1.689,183,2.91,184,1.398,185,2.564,186,2.91,187,3.581,188,2.815,189,5.015,190,1.425,191,4.69,192,5.015,193,5.015,194,4.15,195,3.581,196,5.015,197,5.015,198,4.076]],["title/interfaces/ITransaction.html",[0,0.796,199,2.202]],["body/interfaces/ITransaction.html",[0,1.037,2,1.834,3,0.538,4,0.538,5,0.47,6,2.254,8,0.47,19,2.269,20,2.789,22,0.344,23,0.765,26,0.285,27,0.754,33,0.545,34,0.037,35,1.027,51,0.538,54,0.029,55,0.029,63,1.074,65,1.646,67,3.548,68,4.112,69,1.602,84,2.059,199,3.548,200,3.323,201,5.984,202,3.323,203,3.323,204,4.016,205,4.016,206,4.016,207,5.903,208,5.903,209,2.847,210,4.969,211,4.969,212,3.126,213,4.112,214,4.016,215,4.016]],["title/interfaces/IWatchParams.html",[0,0.796,216,1.731]],["body/interfaces/IWatchParams.html",[0,0.682,2,1.206,3,0.354,4,0.354,5,0.309,8,0.309,10,0.163,16,1.973,21,1.467,22,0.322,23,0.503,26,0.188,27,0.571,33,0.482,34,0.038,35,0.959,36,1.446,38,1.416,40,1.501,45,1.796,47,0.503,51,0.354,52,2.676,54,0.022,55,0.022,58,1.975,59,2.676,60,1.975,93,1.165,94,3.575,98,1.068,101,2.365,103,1.716,167,1.416,182,1.094,183,1.886,186,1.886,188,2.11,190,1.068,194,3.111,216,2.11,217,1.662,218,4.768,219,5.236,220,4.768,221,5.236,222,3.759,223,3.759,224,4.768,225,3.111,226,2.684,227,2.684,228,2.684,229,3.759,230,3.759,231,3.759,232,3.759,233,3.759,234,2.514,235,5.236,236,2.17,237,4.768,238,4.768,239,4.768,240,4.768,241,3.945,242,3.945,243,4.768,244,2.676,245,2.684,246,3.759,247,3.111,248,2.11,249,3.759,250,2.684,251,3.759,252,2.11,253,2.684,254,3.759,255,3.111,256,2.684,257,3.759,258,3.759,259,5.236,260,2.999,261,2.11,262,1.898,263,2.684,264,3.759,265,3.759,266,3.759,267,3.759]],["title/injectables/InjectableRxStompConfig.html",[268,0.876,269,1.557]],["body/injectables/InjectableRxStompConfig.html",[3,0.275,4,0.275,5,0.24,8,0.24,10,0.236,16,1.873,18,1.465,19,1.725,20,1.152,21,0.975,22,0.267,26,0.146,27,0.474,33,0.584,34,0.037,35,0.391,36,0.806,38,1.176,40,1.557,42,1.152,47,0.594,50,1.296,51,0.275,54,0.018,55,0.018,60,1.749,63,0.911,65,0.887,66,1.425,69,1.412,73,0.773,93,1.295,98,0.887,103,2.27,106,0.937,107,1.036,108,1.152,126,1.296,132,1.752,138,1.752,159,2.131,163,2.293,167,1.59,184,0.704,190,0.583,226,2.228,234,1.425,236,1.749,244,1.152,245,1.465,252,1.152,255,2.583,256,3.013,268,1.199,269,1.576,270,1.036,271,0.773,272,1.291,273,0.85,274,1.071,275,0.975,276,0.268,277,1.423,278,2.251,279,2.583,280,2.228,281,2.583,282,1.576,283,2.131,284,2.583,285,2.583,286,2.583,287,3.013,288,1.293,289,4.221,290,1.907,291,3.121,292,3.121,293,2.12,294,2.583,295,3.121,296,3.121,297,3.121,298,2.228,299,3.121,300,3.121,301,3.121,302,2.583,303,1.74,304,2.228,305,2.228,306,1.752,307,1.752,308,2.228,309,1.752,310,2.228,311,2.228,312,2.228,313,1.752,314,1.752,315,2.228,316,2.228,317,1.752,318,2.228,319,2.228,320,2.228,321,3.243,322,1.491,323,2.052,324,1.465,325,2.052,326,1.071,327,1.698,328,1.698,329,2.376,330,2.228,331,1.698,332,1.698,333,1.291,334,1.698,335,1.752,336,1.152,337,1.152,338,1.698,339,1.698,340,1.698,341,1.698,342,1.698,343,1.698,344,1.036,345,1.465,346,1.291,347,1.698,348,1.698,349,3.548,350,1.465,351,2.052,352,1.465,353,1.698,354,1.698,355,1.465,356,2.583,357,1.963,358,2.376,359,2.052,360,1.698,361,2.583,362,1.291,363,1.291,364,1.698,365,1.698,366,2.228,367,1.465,368,1.698,369,1.698,370,1.291,371,0.937,372,1.291,373,1.465,374,2.052,375,1.698,376,1.291,377,1.698,378,3.493,379,2.655,380,1.698,381,1.698,382,1.465,383,2.052,384,2.583,385,1.036,386,1.698,387,2.052,388,1.465,389,2.052,390,1.698,391,1.465,392,2.052,393,1.465,394,2.052,395,1.698,396,2.583,397,2.583,398,3.126,399,1.698,400,2.052,401,2.583,402,1.465,403,2.052,404,1.698,405,1.291,406,1.698,407,1.698,408,1.698,409,1.698,410,1.698,411,1.698,412,1.465,413,1.752,414,1.465,415,1.698,416,1.698,417,1.465,418,1.465,419,2.052,420,1.465,421,2.052,422,1.698,423,1.698,424,2.052,425,1.152,426,1.698,427,1.291,428,1.465,429,1.698,430,1.698,431,1.698,432,1.698,433,2.228,434,1.291,435,1.698,436,1.698,437,1.291,438,1.749,439,2.052,440,1.291,441,1.152,442,1.465,443,2.228,444,2.228,445,1.698,446,1.698,447,1.698,448,1.725,449,1.698,450,1.698,451,1.465,452,2.052,453,1.465,454,1.465,455,2.228,456,1.465,457,1.698,458,1.698,459,1.291,460,1.465,461,0.85,462,2.583,463,1.698,464,1.465,465,1.698,466,1.291,467,1.152]],["title/injectables/InjectableRxStompRPCConfig.html",[268,0.876,468,1.557]],["body/injectables/InjectableRxStompRPCConfig.html",[3,0.51,4,0.51,5,0.445,8,0.445,10,0.209,22,0.412,26,0.27,27,0.729,33,0.485,34,0.037,35,0.724,47,0.915,50,1.806,51,0.644,54,0.028,55,0.028,63,1.053,66,2.193,93,1.17,98,1.081,123,2.716,124,2.393,184,1.305,190,1.081,234,1.737,268,1.571,270,1.921,271,1.433,272,2.393,273,1.576,274,1.897,275,1.5,276,0.27,277,1.81,283,2.425,288,2.291,303,1.571,321,2.696,322,1.24,461,1.576,467,2.135,468,2.879,469,1.576,470,2.986,471,3.975,472,3.429,473,3.429,474,3.429,475,3.975,476,3.975,477,3.804,478,1.305,479,3.429,480,3.022,481,2.716,482,2.716,483,2.716,484,3.148,485,2.393,486,3.148,487,2.393,488,3.804,489,3.148,490,1.921,491,2.135]],["title/classes/RxStompConfig.html",[276,0.219,278,1.162]],["body/classes/RxStompConfig.html",[3,0.2,4,0.2,5,0.175,8,0.175,9,2.009,10,0.258,16,1.979,18,1.733,19,1.108,20,1.362,21,1.077,22,0.208,23,0.284,26,0.106,27,0.368,33,0.549,34,0.038,35,0.462,36,1.005,40,1.672,42,1.362,45,0.915,47,0.462,51,0.2,54,0.014,55,0.014,57,1.226,60,1.9,63,0.673,65,1.005,69,1.303,73,0.915,84,0.618,93,1.26,98,1.005,103,2.398,106,1.108,107,1.226,108,1.723,126,1.431,132,1.985,138,1.985,159,2.315,163,2.461,182,2.274,184,0.512,190,0.69,226,2.525,236,1.9,244,1.362,245,1.733,252,1.362,273,0.618,276,0.106,277,0.915,278,0.915,283,1.786,290,1.786,293,1.362,303,1.737,304,2.191,305,2.191,306,1.723,307,1.723,308,2.191,309,1.723,310,2.191,311,2.191,312,2.191,313,1.723,314,1.723,315,2.191,316,2.191,317,1.723,318,2.191,319,2.191,320,2.191,322,1.404,324,1.733,326,1.573,327,2.009,328,2.009,329,2.625,330,2.525,331,1.234,332,2.009,333,0.938,334,2.009,335,1.985,336,1.362,337,1.362,338,2.009,339,2.009,340,2.009,341,2.009,342,2.009,343,2.009,344,1.226,345,1.733,346,1.527,347,2.009,348,2.009,349,3.672,350,1.733,352,1.733,353,2.009,354,2.009,355,1.733,356,2.927,357,2.225,358,2.625,360,2.009,361,2.927,362,1.527,363,1.527,364,2.009,365,2.009,366,2.525,367,1.733,368,2.009,369,2.009,370,1.527,371,1.108,372,1.527,373,1.733,375,2.009,376,1.527,377,2.009,378,3.794,379,2.884,380,2.009,381,2.009,382,1.733,384,2.927,385,1.55,386,2.009,388,1.733,390,2.009,391,1.733,393,1.733,395,2.009,396,2.927,397,2.927,398,3.453,399,2.009,401,2.927,402,1.733,404,2.009,405,1.527,406,2.009,407,2.009,408,2.009,409,2.009,410,2.009,411,2.009,412,1.733,413,1.985,414,1.733,415,2.009,416,2.009,417,1.733,418,1.733,420,1.733,422,2.009,423,2.009,425,1.362,426,2.009,427,1.527,428,1.733,429,2.009,430,2.009,431,2.009,432,2.009,433,2.525,434,1.527,435,2.009,436,2.009,437,1.527,438,1.964,440,1.527,441,1.362,442,1.733,443,2.525,444,2.779,445,2.009,446,2.009,447,2.009,448,1.905,449,2.009,450,1.234,451,1.733,453,1.733,454,1.733,455,2.525,456,2.525,457,2.009,458,2.009,459,1.527,460,1.733,461,1.006,462,2.927,463,2.009,464,1.733,465,2.009,466,1.527,492,0.512,493,2.771,494,2.427,495,2.427,496,1.527,497,1.234,498,1.491,499,1.491,500,1.491,501,1.234,502,1.491,503,1.234,504,1.491,505,1.234,506,1.491,507,1.491,508,1.491,509,1.234,510,1.491,511,1.234,512,1.491,513,1.491,514,1.491,515,2.427,516,2.191,517,2.009,518,1.234,519,1.234,520,1.065,521,1.234,522,1.234,523,2.009,524,1.234,525,1.234,526,1.234,527,1.234,528,1.234,529,1.234,530,1.491,531,1.065,532,1.491,533,1.491,534,1.491,535,1.491,536,1.234]],["title/classes/RxStompRPC.html",[276,0.219,537,1.731]],["body/classes/RxStompRPC.html",[3,0.33,4,0.33,5,0.289,8,0.289,10,0.235,21,1.192,22,0.306,23,0.469,24,1.444,26,0.175,33,0.425,34,0.038,36,0.923,40,0.845,45,1.347,47,0.974,51,0.33,54,0.021,55,0.021,57,1.805,58,1.021,59,2.592,63,1.029,65,1.016,73,1.74,87,2.186,89,1.586,93,0.89,104,1.383,126,1.444,151,1.482,167,1.347,182,1.913,184,1.226,190,1.016,209,2.664,212,1.55,234,1.922,236,2.032,242,2.039,247,2.959,261,1.383,262,2.582,263,2.553,274,1.584,276,0.175,282,1.805,283,2.331,288,1.913,303,1.453,322,1.086,326,1.754,336,1.383,355,1.759,469,2.319,470,2.331,472,3.297,473,3.651,474,3.297,478,1.444,479,1.759,480,1.55,481,1.759,482,1.759,483,1.759,487,2.249,491,2.007,492,0.845,493,2.331,537,2.007,538,2.039,539,2.959,540,3.576,541,3.576,542,1.805,543,2.905,544,2.007,545,2.039,546,3.821,547,2.464,548,2.007,549,1.55,550,2.959,551,2.464,552,3.821,553,3.084,554,2.959,555,2.553,556,2.959,557,2.959,558,3.483,559,2.959,560,2.464,561,2.249,562,2.553,563,2.959,564,2.959,565,3.821,566,2.553,567,2.553,568,2.464,569,2.464,570,2.464,571,2.553,572,2.039,573,1.55,574,4.617,575,5.276,576,2.464,577,2.464,578,2.464,579,2.464,580,2.464,581,1.759,582,3.576,583,1.55,584,3.576,585,2.464,586,3.576,587,4.209,588,3.576,589,3.576,590,3.576,591,2.464,592,2.464,593,2.464,594,2.464,595,2.464,596,2.464,597,4.209,598,3.576,599,2.464,600,2.464,601,2.464,602,2.464,603,2.464,604,3.576,605,4.209,606,3.576,607,2.464,608,2.464,609,2.464,610,2.464,611,2.464,612,2.464,613,2.464,614,2.464,615,2.464]],["title/classes/RxStompRPCConfig.html",[276,0.219,470,1.557]],["body/classes/RxStompRPCConfig.html",[3,0.492,4,0.492,5,0.43,8,0.43,10,0.245,22,0.314,23,0.698,24,1.258,26,0.26,27,0.712,33,0.523,34,0.037,35,0.986,47,0.986,51,0.629,54,0.028,55,0.028,63,1.117,65,1.471,93,1.154,98,1.334,182,2.145,184,1.258,190,1.042,261,2.059,262,2.37,273,1.52,276,0.26,283,2.755,288,2.43,303,1.639,322,1.212,326,1.776,469,2.337,470,2.37,475,4.516,476,4.284,478,1.61,479,3.896,480,3.433,481,3.351,482,3.351,483,3.351,484,3.884,485,2.953,486,3.884,487,3.256,489,3.884,492,1.258,493,2.614,573,2.953,616,3.668,617,3.668]],["title/injectables/RxStompRPCService.html",[268,0.876,618,1.94]],["body/injectables/RxStompRPCService.html",[3,0.445,4,0.445,5,0.389,8,0.389,10,0.228,21,0.858,22,0.377,26,0.236,33,0.499,34,0.037,45,1.252,47,1,50,1.51,51,0.445,54,0.026,55,0.026,57,2.223,63,1,65,0.944,66,2.01,73,1.252,87,2.177,89,1.86,93,1.156,126,1.14,142,3.143,151,1.824,184,1.51,190,0.944,209,2.223,262,2.223,263,2.373,268,1.553,270,1.678,271,1.659,274,1.802,275,1.375,276,0.236,277,1.659,288,2.177,293,2.471,303,1.493,321,2.471,322,1.274,326,1.693,337,2.471,467,1.866,468,2.653,469,2.265,471,3.643,472,3.143,473,3.143,474,3.143,478,1.693,491,1.866,537,3.216,542,2.223,543,3.105,544,2.471,545,2.751,546,4.523,548,2.471,549,2.091,550,2.751,552,3.643,553,2.769,554,2.751,555,2.373,556,2.751,557,2.751,558,3.643,559,2.751,561,2.091,562,2.373,563,2.751,564,2.751,565,3.643,566,2.373,573,2.091,618,2.769,619,2.769,620,2.751,621,2.399,622,3.324,623,4.402,624,3.643,625,4.402,626,3.324,627,3.324,628,3.324,629,4.402,630,3.324]],["title/injectables/RxStompService.html",[268,0.876,621,1.408]],["body/injectables/RxStompService.html",[1,1.54,3,0.218,4,0.218,5,0.19,8,0.19,10,0.247,11,2.162,13,1.16,14,1.16,15,3.253,16,2.066,19,1.485,21,1.12,22,0.223,24,0.557,26,0.115,27,0.395,28,1.857,29,2.558,32,1.857,33,0.554,34,0.036,35,0.826,38,1.225,40,0.557,41,2.322,42,0.912,45,0.612,47,0.495,50,1.275,51,0.218,52,3.078,54,0.015,55,0.015,58,1.798,60,1.54,61,1.022,63,0.901,64,1.022,65,0.739,66,1.188,69,1.156,72,2.322,73,1.225,74,2.559,84,1.798,87,0.673,89,1.635,90,1.345,92,1.16,93,0.786,94,1.636,95,2.152,96,1.16,98,0.462,99,3.771,100,3.366,101,2.978,102,2.691,103,1.485,104,1.46,106,0.742,107,1.642,109,1.857,112,3.253,126,1.116,131,2.904,132,1.46,146,1.16,151,1.888,153,1.022,156,1.16,158,0.912,159,2.465,163,0.82,165,1.16,167,0.612,181,2.046,185,2.046,187,1.16,188,0.912,190,0.462,191,1.345,195,3.098,209,1.313,212,2.046,216,1.826,217,1.636,228,1.16,234,0.742,236,0.673,244,1.46,248,2.087,250,1.16,252,1.46,253,1.16,260,1.022,261,0.912,262,1.642,268,1.056,270,0.82,271,0.612,274,0.892,275,0.812,276,0.231,277,1.225,278,1.225,279,2.152,280,1.857,281,2.152,282,2.054,283,1.313,284,2.152,285,2.152,286,2.152,287,2.654,288,1.078,290,1.313,293,1.46,303,1.683,306,0.912,307,0.912,309,0.912,313,0.912,314,0.912,317,0.912,321,3.046,322,1.401,326,1.986,333,1.636,335,0.912,336,0.912,337,2.558,346,1.022,349,3.072,357,1.022,362,1.022,363,1.022,370,1.636,371,1.485,372,2.046,376,1.636,379,1.022,405,1.636,413,1.826,414,1.16,425,0.912,427,1.636,434,1.022,437,2.339,440,1.022,441,0.912,448,0.742,454,1.16,459,1.022,460,1.16,461,1.348,467,0.912,478,1.275,485,1.022,496,1.022,531,1.16,542,1.313,543,2.046,553,2.046,561,1.022,567,2.904,571,1.16,581,2.322,583,2.046,619,1.022,621,1.188,631,1.345,632,1.46,633,3.328,634,2.152,635,2.152,636,2.152,637,2.152,638,2.152,639,2.152,640,2.152,641,2.691,642,2.152,643,2.691,644,2.152,645,1.345,646,1.345,647,1.345,648,1.345,649,1.345,650,1.345,651,1.16,652,2.691,653,2.152,654,1.857,655,1.345,656,1.345,657,1.345,658,1.345,659,1.345,660,1.345,661,1.345,662,1.345,663,1.345,664,1.345,665,2.152,666,1.345,667,1.345,668,1.345,669,1.345,670,1.345,671,1.16,672,1.345,673,1.345,674,1.345,675,1.16,676,1.345,677,1.345,678,1.345,679,1.345,680,1.345,681,1.625,682,1.625,683,1.345,684,1.625,685,1.16,686,1.625,687,1.625,688,1.345,689,1.625,690,1.625,691,1.345,692,1.625,693,1.625,694,1.625,695,1.625,696,2.152,697,1.625,698,2.654,699,1.345,700,2.152,701,1.625,702,3.077,703,1.625,704,1.625,705,1.345,706,2.152,707,1.345,708,1.345,709,1.16,710,2.152,711,1.625,712,3.077,713,3.077,714,2.601,715,1.625,716,1.625,717,3.252,718,2.601,719,1.625,720,1.625,721,1.345,722,2.601,723,1.625,724,1.625,725,1.625,726,2.152,727,1.625,728,1.345,729,1.345,730,3.366,731,2.654,732,2.152,733,2.152,734,1.345,735,1.345,736,1.345,737,1.345,738,1.345,739,1.345,740,1.857,741,1.345,742,1.16,743,1.345,744,2.152,745,1.345,746,1.345,747,1.345,748,2.152,749,1.345,750,1.345,751,1.345,752,1.345,753,1.345,754,1.345,755,1.345,756,1.345,757,1.345,758,1.345,759,1.345,760,3.077,761,1.345,762,1.857,763,1.345,764,2.691,765,1.345,766,1.345,767,1.345,768,1.345,769,1.345,770,2.152,771,2.152,772,1.345,773,1.345,774,1.345,775,1.345,776,1.345,777,2.691,778,1.345,779,1.345,780,1.345,781,1.345,782,1.345,783,1.345,784,3.366,785,1.345,786,1.857,787,1.345,788,1.345,789,2.152,790,1.345,791,1.345,792,2.152,793,2.152,794,1.345,795,1.16,796,1.345,797,1.16,798,1.345,799,1.345,800,3.366,801,1.345,802,1.345,803,3.077,804,1.16,805,1.345,806,2.152,807,1.345,808,1.345,809,1.345,810,1.16,811,1.345,812,1.345,813,1.345,814,1.345,815,1.345,816,1.345,817,1.345,818,1.345,819,1.345,820,1.345,821,1.16,822,1.345,823,1.345,824,1.345,825,1.345,826,1.16]],["title/classes/Stomp.html",[10,0.134,276,0.219]],["body/classes/Stomp.html",[3,0.287,4,0.287,5,0.251,8,0.251,10,0.225,19,1.473,22,0.276,23,0.614,26,0.152,27,0.49,33,0.392,34,0.038,35,1.011,38,0.808,47,0.739,50,1.587,51,0.287,54,0.019,55,0.019,57,2.179,63,0.614,65,0.917,69,1.475,73,0.808,74,2.911,89,1.216,93,0.682,98,0.609,106,0.979,125,3.707,126,0.735,128,1.53,138,3.162,143,2.769,146,2.769,151,1.337,153,2.715,156,2.303,167,1.956,169,1.53,203,1.774,213,2.67,227,2.303,234,1.771,236,2.091,275,1.007,276,0.358,277,1.956,282,2.682,298,2.769,303,1.102,322,1.001,336,1.811,352,3.472,358,2.029,367,3.304,385,2.971,412,3.792,413,1.203,425,1.811,438,1.337,448,2.471,453,2.303,455,2.303,456,2.303,461,1.918,466,2.715,478,1.33,490,2.548,491,1.203,492,0.735,516,1.53,517,3.21,520,2.303,539,1.774,542,1.629,548,1.811,549,1.349,583,2.715,633,2.029,654,2.303,675,1.53,685,1.53,691,2.67,721,4.024,731,2.303,742,1.53,762,1.53,795,2.303,827,1.774,828,3.226,829,5.192,830,5.192,831,4.396,832,3.879,833,2.144,834,3.226,835,3.226,836,3.226,837,3.226,838,4.315,839,2.144,840,3.226,841,5.046,842,2.144,843,2.67,844,3.226,845,3.226,846,2.144,847,3.83,848,3.226,849,2.144,850,3.226,851,3.226,852,3.226,853,3.879,854,3.226,855,3.226,856,3.226,857,2.67,858,3.226,859,3.226,860,3.226,861,3.226,862,3.226,863,3.226,864,3.226,865,3.226,866,3.226,867,4.315,868,2.144,869,2.144,870,2.144,871,2.144,872,2.144,873,2.144,874,2.144,875,3.226,876,3.226,877,2.144,878,2.144,879,2.144,880,3.879,881,2.144,882,2.144,883,4.315,884,2.144,885,2.144,886,3.226,887,2.144,888,2.144,889,2.144,890,2.144,891,2.144,892,2.144]],["title/classes/StompConfig.html",[276,0.219,893,1.94]],["body/classes/StompConfig.html",[3,0.252,4,0.252,5,0.22,8,0.22,10,0.155,21,0.485,22,0.25,23,0.556,26,0.134,27,0.443,33,0.601,34,0.038,35,0.556,36,1.127,37,2.084,40,1.793,45,1.1,47,0.681,50,1.383,51,0.252,54,0.017,55,0.017,61,1.836,63,1.187,69,1.016,78,1.556,84,1.209,93,1.316,108,2.008,110,2.554,111,3.8,116,2.554,121,2.554,126,1.001,158,1.056,163,2.639,177,2.084,188,1.638,248,1.638,269,1.474,273,0.779,274,1.001,275,0.912,276,0.254,278,1.1,280,2.878,290,1.474,303,1.795,304,2.554,305,2.554,306,2.008,307,2.008,308,2.554,309,2.008,310,2.554,311,2.554,312,2.554,313,2.008,314,2.008,315,2.554,316,2.554,317,2.008,318,2.554,319,2.554,320,2.554,322,1.536,324,2.084,335,1.056,350,2.084,358,1.836,373,2.084,382,2.084,385,2.332,388,2.084,391,2.084,393,2.084,402,2.084,418,2.084,420,2.084,433,2.084,438,1.671,451,2.084,466,1.836,478,1.383,492,0.645,497,1.556,501,1.556,503,1.556,505,1.556,509,1.556,511,1.556,516,1.343,518,1.556,519,1.556,520,1.343,521,1.556,522,1.556,523,1.556,524,1.556,525,1.556,526,1.556,527,1.556,528,1.556,529,1.556,536,1.556,544,1.638,671,2.084,685,1.343,804,2.084,810,2.084,821,2.084,826,2.084,893,1.836,894,3.756,895,2.919,896,2.415,897,2.919,898,3.577,899,3.577,900,3.577,901,3.577,902,3.577,903,3.577,904,3.577,905,3.577,906,3.577,907,1.881,908,1.881,909,1.881,910,1.881,911,1.881,912,2.919,913,1.881,914,1.881,915,1.881,916,1.881,917,2.919,918,1.881,919,1.881,920,1.881,921,1.881,922,2.919,923,2.919,924,2.919,925,1.881,926,1.881,927,1.881,928,2.919,929,1.881,930,2.919,931,1.881,932,1.881,933,1.881,934,1.881,935,1.881,936,1.881,937,1.881,938,1.881,939,1.881,940,1.881,941,1.881,942,1.881,943,1.881,944,1.881,945,1.881]],["title/classes/StompHeaders.html",[36,0.796,276,0.219]],["body/classes/StompHeaders.html",[3,0.597,4,0.597,5,0.522,8,0.522,10,0.193,12,3.686,16,1.678,21,1.457,22,0.382,23,0.848,34,0.035,35,1.112,36,1.366,37,4.17,38,1.678,49,3.686,51,0.597,54,0.031,55,0.031,89,1.678,276,0.316,322,1.15,330,3.18,417,3.18,492,1.528,496,2.802,698,3.18,894,3.329,946,3.686,947,3.18,948,4.454,949,4.454,950,4.454,951,4.454,952,4.454,953,4.454,954,4.454,955,4.454]],["title/injectables/StompService.html",[268,0.876,956,1.94]],["body/injectables/StompService.html",[1,1.42,3,0.19,4,0.19,5,0.166,8,0.272,10,0.245,11,2.187,13,1.01,14,1.01,15,3.207,16,1.953,19,0.646,21,1.11,22,0.199,24,0.485,26,0.1,27,0.353,29,1.305,33,0.543,34,0.037,35,0.954,36,0.885,38,1.753,40,0.485,42,1.305,45,1.115,47,0.564,50,0.798,51,0.19,52,2.985,54,0.014,55,0.014,58,1.928,59,0.794,60,1.861,61,0.89,63,0.564,64,0.89,65,0.841,66,1.062,67,1.66,69,1.157,70,1.171,72,2.906,73,1.115,74,2.706,84,1.985,89,1.621,91,1.66,92,1.01,93,0.91,94,0.89,96,1.66,98,0.841,101,2.382,103,1.062,104,0.794,106,0.646,107,1.174,109,1.66,112,3.699,126,1.299,131,2.703,132,0.794,151,2.114,153,0.89,158,1.924,159,2.418,160,1.924,163,1.174,165,1.01,167,1.427,185,1.862,187,1.01,188,0.794,195,3.207,209,1.731,212,1.862,216,1.661,217,1.463,228,1.01,234,0.646,236,0.586,241,1.924,244,1.305,248,2.125,250,1.01,252,1.305,253,1.66,260,0.89,261,0.794,262,2.268,268,0.661,270,0.715,271,0.876,274,1.176,275,0.726,276,0.21,277,0.533,278,1.115,282,1.731,290,1.731,293,1.924,303,1.705,306,0.794,307,0.794,309,0.794,313,0.794,314,0.794,317,0.794,321,3.099,322,1.436,326,1.844,329,0.89,333,1.463,335,0.794,337,2.612,344,1.912,345,1.66,346,1.463,349,2.826,357,0.89,362,0.89,363,0.89,370,0.89,371,0.646,372,1.862,376,1.463,379,0.89,405,2.156,413,1.924,425,0.794,427,1.463,434,0.89,437,2.382,440,0.89,441,1.305,448,0.646,459,0.89,461,1.569,467,0.794,478,1.475,480,1.862,485,0.89,490,1.174,496,0.89,531,1.01,542,1.174,543,1.463,544,1.661,549,0.89,553,2.561,561,1.463,566,1.66,567,2.703,571,1.66,572,1.924,573,1.463,581,1.01,583,2.382,621,1.062,632,1.305,633,3.26,634,1.924,635,1.924,636,1.924,637,1.924,638,1.924,639,1.924,640,1.924,641,2.449,642,2.836,643,2.449,644,1.924,645,1.171,646,1.171,647,1.171,648,1.171,649,1.171,650,1.171,651,1.01,652,3.369,653,1.924,654,1.66,655,1.171,656,1.171,657,1.171,658,1.171,659,1.171,660,1.171,661,1.171,662,1.171,663,1.171,664,1.171,665,1.924,666,1.171,667,1.171,668,1.171,669,1.171,670,1.171,671,1.01,672,1.171,673,1.171,674,1.171,675,1.66,676,1.171,677,1.171,678,1.171,679,1.171,680,1.171,683,1.171,696,1.924,698,2.113,700,1.171,702,1.924,705,1.171,706,1.924,707,1.171,708,1.171,709,1.66,710,1.171,712,2.836,713,1.924,726,1.171,728,1.171,729,1.171,730,3.717,731,2.906,732,2.836,733,2.449,734,1.924,735,1.924,736,1.924,737,1.171,738,1.924,739,1.924,740,2.703,741,1.924,742,1.66,743,1.171,744,1.924,745,1.171,746,1.171,747,1.171,748,1.924,749,1.171,750,1.171,751,1.171,752,1.171,753,1.171,754,1.171,755,1.171,756,1.171,757,1.171,758,1.171,759,1.924,760,3.559,761,1.924,762,2.447,763,1.924,764,3.369,765,1.924,766,1.924,767,1.924,768,1.924,769,1.924,770,2.449,771,2.449,772,1.924,773,1.924,774,1.924,775,1.924,776,1.924,777,3.369,778,1.924,779,1.171,780,1.924,781,1.924,782,1.924,783,1.171,784,3.133,785,1.171,786,1.66,787,1.171,788,1.171,789,2.836,790,1.171,791,1.924,792,2.836,793,2.836,794,1.924,795,1.66,796,1.171,797,1.01,798,1.171,799,1.171,800,3.133,801,1.171,802,1.171,803,2.836,804,1.01,805,1.171,806,1.924,807,1.171,808,1.171,809,1.171,810,1.01,811,1.171,812,1.171,813,1.924,814,1.171,815,1.171,816,1.171,817,1.171,818,1.171,819,1.171,820,1.171,821,1.01,822,1.171,823,1.171,824,1.171,825,1.171,826,1.01,843,1.171,893,2.156,896,1.171,956,1.862,957,1.171,958,1.924,959,1.924,960,1.924,961,2.325,962,2.325,963,2.325,964,2.325,965,2.325,966,2.325,967,2.325,968,2.325,969,3.419,970,2.96,971,2.325,972,2.325,973,1.415,974,2.325,975,2.325,976,2.325,977,1.415,978,1.415,979,1.415,980,1.415,981,1.415,982,1.415,983,1.415,984,1.415,985,1.415,986,1.415,987,1.415,988,1.415,989,1.415,990,1.415,991,1.415,992,1.415,993,1.415,994,1.415,995,1.415,996,1.415,997,1.415,998,1.415]],["title/classes/StompSubscription.html",[276,0.219,999,2.202]],["body/classes/StompSubscription.html",[3,0.549,4,0.549,5,0.48,8,0.48,10,0.178,21,1.299,22,0.431,23,0.958,26,0.291,27,0.764,33,0.508,34,0.037,35,0.958,36,1.299,47,0.781,51,0.549,54,0.03,55,0.03,59,2.825,63,0.958,64,3.166,65,1.43,69,1.165,73,1.896,82,3.393,84,1.699,209,2.943,260,3.667,276,0.291,303,1.686,322,1.299,492,1.406,548,2.825,894,3.426,999,4.054,1000,3.393,1001,4.1,1002,5.033,1003,4.1,1004,5.033,1005,4.1]],["title/classes/Versions.html",[276,0.219,438,1.278]],["body/classes/Versions.html",[3,0.423,4,0.423,5,0.37,8,0.37,10,0.24,11,1.943,22,0.412,23,0.601,26,0.224,27,0.646,33,0.543,34,0.037,35,1.11,38,1.813,46,3.521,51,0.423,54,0.025,55,0.025,57,2.148,89,1.19,93,0.668,98,1.463,126,1.766,128,2.255,138,2.388,151,1.763,152,4.581,236,1.763,276,0.342,277,2.086,303,1.701,322,1.46,329,2.677,366,3.952,438,2.48,441,2.388,442,3.038,443,3.952,444,3.952,448,1.442,464,3.038,478,1.083,492,1.083,542,2.148,544,1.773,562,3.038,688,4.581,709,3.038,831,4.874,1006,2.614,1007,4.811,1008,4.811,1009,4.811,1010,4.811,1011,5.148,1012,5.148,1013,3.159,1014,3.159,1015,4.255,1016,4.255,1017,4.255,1018,4.255,1019,3.159,1020,3.159,1021,3.159,1022,3.159,1023,3.159,1024,3.159,1025,3.159,1026,3.159,1027,3.159,1028,3.159,1029,3.159,1030,3.159,1031,3.159]],["title/coverage.html",[1032,3.464]],["body/coverage.html",[0,1.451,1,1.379,5,0.39,6,2.773,7,2.377,10,0.258,24,1.142,33,0.336,34,0.037,36,0.859,54,0.026,55,0.026,56,2.377,69,0.946,87,1.379,88,2.094,181,2.094,182,2.328,183,3.146,184,1.803,185,2.094,186,3.146,199,2.377,200,2.755,216,1.869,217,2.094,268,1.597,269,1.681,271,2.193,272,3.107,273,2.328,276,0.426,278,1.254,326,1.142,344,1.681,371,1.52,385,1.681,438,1.379,448,1.52,468,2.225,469,2.047,470,1.681,493,2.655,537,1.869,538,2.755,618,2.094,619,3.107,620,2.755,621,1.52,631,2.755,632,1.869,827,2.755,847,2.755,893,2.094,894,3.107,946,2.755,956,2.094,957,2.755,969,2.377,999,2.377,1000,2.755,1006,2.755,1032,2.755,1033,3.329,1034,3.329,1035,2.755,1036,3.329,1037,3.329,1038,3.329,1039,6.244,1040,3.329,1041,4.407,1042,5.258,1043,3.329,1044,4.94,1045,5.258,1046,2.755,1047,3.329,1048,3.329,1049,3.329,1050,3.329,1051,3.329,1052,3.329,1053,3.329,1054,3.329,1055,3.329,1056,3.329,1057,3.329,1058,4.407,1059,3.329,1060,3.329,1061,3.329,1062,3.329,1063,3.329]],["title/miscellaneous/enumerations.html",[1064,1.072,1065,3.064]],["body/miscellaneous/enumerations.html",[10,0.25,22,0.443,26,0.304,34,0.03,54,0.03,55,0.03,88,2.697,143,3.06,158,2.406,161,4.279,169,4.117,170,4.596,172,4.279,173,4.279,174,4.279,175,4.596,176,3.547,177,3.692,178,3.547,179,3.547,180,3.547,182,1.776,190,1.218,271,1.615,274,1.774,275,1.339,276,0.304,326,1.47,344,2.164,490,2.164,493,2.164,633,2.697,651,3.06,958,3.547,959,3.547,960,3.547,1035,3.547,1064,1.776,1065,3.547,1066,4.279,1067,5.553,1068,3.06,1069,5.766,1070,5.171,1071,4.287,1072,4.287]],["title/miscellaneous/functions.html",[947,2.644,1064,1.072]],["body/miscellaneous/functions.html",[10,0.227,22,0.374,26,0.31,33,0.441,34,0.034,54,0.031,55,0.031,63,0.831,69,1.59,89,1.645,93,0.923,142,3.116,151,1.808,167,1.645,202,3.612,256,3.116,269,2.639,271,1.645,274,1.497,275,1.363,278,1.645,287,3.732,288,1.808,290,2.204,294,3.612,298,3.116,302,3.612,344,2.639,461,1.808,478,1.497,548,2.45,619,2.746,621,2.708,624,3.612,632,2.934,786,3.116,797,3.116,947,3.116,1046,4.326,1064,1.808,1068,3.116,1073,4.364,1074,4.364,1075,4.364,1076,4.364,1077,4.364,1078,4.364]],["title/index.html",[26,0.184,1079,2.586,1080,2.586]],["body/index.html",[10,0.253,23,0.959,34,0.03,54,0.03,55,0.03,63,0.959,97,4.511,124,2.584,167,1.899,184,1.728,190,1.432,225,3.399,227,3.597,248,2.306,268,1.167,269,2.074,274,1.409,275,1.702,278,1.548,282,2.074,326,1.728,371,1.875,385,2.074,428,2.932,438,2.258,468,2.074,469,1.702,470,2.074,490,2.074,492,1.949,537,2.828,555,2.932,618,2.584,621,1.875,632,2.306,699,3.399,740,2.932,857,3.399,956,2.584,969,2.932,1081,4.107,1082,4.107,1083,5.039,1084,5.683,1085,4.107,1086,4.107,1087,4.107,1088,4.107,1089,4.107,1090,4.107,1091,4.107,1092,4.107,1093,4.107,1094,4.107,1095,4.107,1096,4.107,1097,4.107,1098,4.107,1099,4.107,1100,4.107,1101,4.107,1102,4.107,1103,4.107,1104,5.451,1105,4.107]],["title/modules.html",[1106,3.464]],["body/modules.html",[34,0.033,54,0.033,55,0.033,1106,4.082]],["title/overview.html",[1107,3.464]],["body/overview.html",[2,2.222,34,0.033,54,0.033,55,0.033,270,2.457,492,1.669,1107,4.026,1108,5.571,1109,4.866]],["title/properties.html",[27,0.562,1110,2.586]],["body/properties.html",[8,0.557,27,0.722,34,0.036,54,0.032,55,0.032,275,1.486,277,1.793,371,2.173,1111,4.758,1112,4.758,1113,4.758,1114,4.758,1115,4.758,1116,4.758,1117,4.758,1118,4.758]],["title/miscellaneous/typealiases.html",[1064,1.072,1119,3.703]],["body/miscellaneous/typealiases.html",[1,2.232,6,2.783,7,3.539,10,0.234,11,2.264,22,0.512,23,1.123,24,1.848,26,0.284,33,0.404,34,0.029,35,0.762,53,3.311,54,0.029,55,0.029,56,3.539,58,2.054,60,2.398,63,0.762,65,1.137,69,1.676,86,2.856,87,2.054,88,2.517,91,3.539,106,2.643,107,2.923,108,2.783,110,3.539,111,3.539,116,3.539,121,3.539,123,2.856,124,2.517,125,2.856,182,1.658,190,1.137,273,2.054,288,1.658,469,2.054,487,3.119,493,2.02,1064,1.658,1066,4.881,1068,2.856,1120,4.001,1121,4.958,1122,4.001,1123,4.001,1124,4.001,1125,4.001]],["title/miscellaneous/variables.html",[1064,1.072,1126,3.064]],["body/miscellaneous/variables.html",[10,0.237,26,0.333,34,0.034,38,1.766,54,0.032,55,0.032,98,1.332,184,1.87,271,1.766,272,2.948,273,2.259,461,1.942,468,2.997,469,2.259,490,2.366,491,2.631,1064,1.942,1126,3.878,1127,4.686]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":379,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["0.1.0",{"_index":1111,"title":{},"body":{"properties.html":{}}}],["0.1.1",{"_index":332,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["0.3.5",{"_index":347,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.0",{"_index":443,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":444,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1']);maps",{"_index":450,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.2",{"_index":366,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1109,"title":{},"body":{"overview.html":{}}}],["16/16",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["18/18",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["18/19",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":1115,"title":{},"body":{"properties.html":{}}}],["2/2",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":667,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["20000",{"_index":666,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["21/22",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["22/22",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["27/27",{"_index":1059,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["41/41",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["44/44",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["5/5",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1108,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1061,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1060,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":716,"title":{},"body":{"injectables/RxStompService.html":{}}}],["94",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["95",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["_customreplyqueue",{"_index":580,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_dummysubscription",{"_index":585,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_repliesobservable",{"_index":579,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuename",{"_index":576,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupreplyqueue",{"_index":577,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["abort",{"_index":207,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["accept",{"_index":948,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":20,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ack",{"_index":67,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/StompService.html":{}}}],["acknowledgement",{"_index":72,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["acknowledges",{"_index":780,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activate",{"_index":641,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["activated",{"_index":1077,"title":{},"body":{"miscellaneous/functions.html":{}}}],["activation",{"_index":176,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["activationstate",{"_index":177,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["active",{"_index":178,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["activemq",{"_index":486,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["acts",{"_index":828,"title":{},"body":{"classes/Stomp.html":{}}}],["actual",{"_index":405,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["actually",{"_index":770,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["add",{"_index":661,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["added",{"_index":102,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["addition",{"_index":950,"title":{},"body":{"classes/StompHeaders.html":{}}}],["additional",{"_index":187,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["advance",{"_index":292,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["advanced",{"_index":17,"title":{},"body":{"interfaces/IFrame.html":{}}}],["alias",{"_index":53,"title":{},"body":{"interfaces/IFrame.html":{},"miscellaneous/typealiases.html":{}}}],["aliased",{"_index":86,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":762,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["allowing",{"_index":229,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["allows",{"_index":691,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["already",{"_index":786,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["alternate",{"_index":754,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["alternative",{"_index":850,"title":{},"body":{"classes/Stomp.html":{}}}],["alternatively",{"_index":863,"title":{},"body":{"classes/Stomp.html":{}}}],["always",{"_index":700,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular",{"_index":623,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["angular's",{"_index":300,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/core",{"_index":467,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":572,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompService.html":{}}}],["angular7.html",{"_index":286,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["another",{"_index":876,"title":{},"body":{"classes/Stomp.html":{}}}],["anything",{"_index":808,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["apache",{"_index":1114,"title":{},"body":{"properties.html":{}}}],["api",{"_index":1083,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":301,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["appendmissingnullonincoming",{"_index":304,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["application/octet",{"_index":727,"title":{},"body":{"injectables/RxStompService.html":{}}}],["appropriate",{"_index":677,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["around",{"_index":556,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["array",{"_index":1015,"title":{},"body":{"classes/Versions.html":{}}}],["arraybuffer",{"_index":136,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["associated",{"_index":1002,"title":{},"body":{"classes/StompSubscription.html":{}}}],["assumes",{"_index":415,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["async",{"_index":333,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["async](https://developer.mozilla.org/en",{"_index":532,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["asynchronous",{"_index":345,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{}}}],["asynchronously",{"_index":761,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":440,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attempted",{"_index":445,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["attempts",{"_index":655,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["attributes",{"_index":495,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["author",{"_index":1116,"title":{},"body":{"properties.html":{}}}],["auto",{"_index":675,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["automatic",{"_index":230,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["automatically",{"_index":252,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["available",{"_index":949,"title":{},"body":{"classes/StompHeaders.html":{}}}],["avoid",{"_index":139,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["backward",{"_index":123,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":42,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["before",{"_index":245,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":305,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":710,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["behaviorsubject",{"_index":789,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["belong",{"_index":1097,"title":{},"body":{"index.html":{}}}],["binary",{"_index":41,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarybody",{"_index":28,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["binarydata",{"_index":722,"title":{},"body":{"injectables/RxStompService.html":{}}}],["binarytype",{"_index":157,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["body",{"_index":29,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["body/binarybody",{"_index":44,"title":{},"body":{"interfaces/IFrame.html":{}}}],["body]{@link",{"_index":80,"title":{},"body":{"interfaces/IMessage.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["both",{"_index":357,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["box",{"_index":697,"title":{},"body":{"injectables/RxStompService.html":{}}}],["breaks",{"_index":647,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["broker",{"_index":16,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["brokers",{"_index":437,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["brokerurl",{"_index":306,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["builds",{"_index":1095,"title":{},"body":{"index.html":{}}}],["bye",{"_index":237,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["call",{"_index":73,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["call.html",{"_index":474,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callable",{"_index":856,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":60,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":77,"title":{},"body":{"interfaces/IMessage.html":{}}}],["callbacks",{"_index":13,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["called",{"_index":337,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["calling",{"_index":203,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["calls",{"_index":496,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["care",{"_index":563,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["carry",{"_index":759,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["case",{"_index":336,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["cases",{"_index":258,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["caution",{"_index":414,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["caveat",{"_index":206,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["change",{"_index":226,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["check",{"_index":370,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["class",{"_index":276,"title":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["classes",{"_index":492,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":614,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["client",{"_index":385,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"coverage.html":{},"index.html":{}}}],["client#abort",{"_index":210,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#abort]{@link",{"_index":215,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#ack",{"_index":75,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#ack]{@link",{"_index":83,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#activate",{"_index":656,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#appendmissingnullonincoming",{"_index":324,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#appendmissingnullonincoming]{@link",{"_index":525,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect",{"_index":350,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":536,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":204,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#brokerurl",{"_index":358,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":516,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":211,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#commit]{@link",{"_index":214,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#configure",{"_index":671,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#configure]{@link",{"_index":934,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#connectheaders",{"_index":373,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":528,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout",{"_index":382,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectiontimeout]{@link",{"_index":521,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactivate",{"_index":680,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#debug",{"_index":912,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":944,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure",{"_index":388,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#discardwebsocketoncommfailure]{@link",{"_index":527,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders",{"_index":391,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":529,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes",{"_index":393,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes]{@link",{"_index":524,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming",{"_index":917,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@client#heartbeatincoming",{"_index":399,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":936,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing",{"_index":402,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":522,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication",{"_index":418,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication]{@link",{"_index":519,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize",{"_index":420,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize]{@link",{"_index":526,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":76,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#nack]{@link",{"_index":85,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#onchangestate",{"_index":922,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onchangestate]{@link",{"_index":945,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect",{"_index":923,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":939,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":924,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":940,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":804,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onstomperror]{@link",{"_index":941,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe",{"_index":810,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledframe]{@link",{"_index":938,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessage",{"_index":61,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledmessage]{@link",{"_index":78,"title":{},"body":{"interfaces/IMessage.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":821,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":937,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose",{"_index":928,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":942,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror",{"_index":826,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["client#onwebsocketerror]{@link",{"_index":943,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":90,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["client#publish]{@link",{"_index":122,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["client#reconnectdelay",{"_index":930,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@client#reconnectdelay",{"_index":423,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":935,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#splitlargeframes",{"_index":433,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes]{@link",{"_index":523,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions",{"_index":451,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":518,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscribe",{"_index":64,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":82,"title":{},"body":{"interfaces/IMessage.html":{},"classes/StompSubscription.html":{}}}],["client#unsubscribe",{"_index":1004,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":1005,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":782,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["client#websocketfactory",{"_index":466,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":520,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":840,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":855,"title":{},"body":{"classes/Stomp.html":{}}}],["client.ts",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["close",{"_index":165,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["closed",{"_index":175,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["closeevent]://developer.mozilla.org/en",{"_index":1122,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":113,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktype",{"_index":116,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closes",{"_index":164,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closing",{"_index":174,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["code",{"_index":745,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["combination",{"_index":768,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["combined",{"_index":299,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["command",{"_index":30,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{}}}],["commit",{"_index":208,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["communication",{"_index":407,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["compat",{"_index":868,"title":{},"body":{"classes/Stomp.html":{}}}],["compatclient",{"_index":847,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":886,"title":{},"body":{"classes/Stomp.html":{}}}],["compatibility",{"_index":124,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["complaint",{"_index":769,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["completed",{"_index":771,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compliant",{"_index":427,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["compodoc",{"_index":1102,"title":{},"body":{"index.html":{}}}],["config",{"_index":573,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["config.ts",{"_index":273,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.ts:101",{"_index":925,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:102",{"_index":507,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:106",{"_index":908,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:111",{"_index":511,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:116",{"_index":505,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:121",{"_index":497,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:126",{"_index":509,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:131",{"_index":503,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:136",{"_index":919,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:140",{"_index":500,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:141",{"_index":911,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:146",{"_index":913,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:147",{"_index":504,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:151",{"_index":921,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:167",{"_index":498,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:22",{"_index":499,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:23",{"_index":616,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:26",{"_index":909,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:27",{"_index":617,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:31",{"_index":932,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:35",{"_index":512,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:36",{"_index":933,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:41",{"_index":910,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:46",{"_index":929,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:47",{"_index":508,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:50",{"_index":502,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:51",{"_index":916,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:56",{"_index":918,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:61",{"_index":931,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:66",{"_index":915,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:71",{"_index":907,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:73",{"_index":513,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:76",{"_index":920,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:81",{"_index":501,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:86",{"_index":914,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:88",{"_index":510,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:91",{"_index":926,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:95",{"_index":506,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:96",{"_index":927,"title":{},"body":{"classes/StompConfig.html":{}}}],["configuration",{"_index":290,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":642,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configure(rxstompconfig",{"_index":657,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["configured",{"_index":1076,"title":{},"body":{"miscellaneous/functions.html":{}}}],["connect",{"_index":329,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["connected",{"_index":633,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["connectheaders",{"_index":307,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["connecting",{"_index":172,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["connection",{"_index":159,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectionstate",{"_index":634,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["connectiontimeout",{"_index":308,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["consider",{"_index":232,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["console.log(new",{"_index":668,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["console.warn",{"_index":889,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/.../i",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/.../injectable",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolidated/.../rx",{"_index":1068,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1071,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.ts",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":271,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consolidated/rx",{"_index":182,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.ts",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts",{"_index":827,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:103",{"_index":849,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:41",{"_index":833,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:57",{"_index":842,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/i",{"_index":6,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":894,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/types.ts",{"_index":88,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.ts",{"_index":1006,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":1019,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":1020,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":1021,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:27",{"_index":1014,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:35",{"_index":1022,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:40",{"_index":1024,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:47",{"_index":1023,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":234,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["constructor",{"_index":544,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":972,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(public",{"_index":1028,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":545,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(versions",{"_index":1013,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":951,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":99,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["copied",{"_index":137,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["copy",{"_index":595,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correlation",{"_index":565,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["correlationid",{"_index":605,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":1085,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":775,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["corresponds",{"_index":895,"title":{},"body":{"classes/StompConfig.html":{}}}],["cover",{"_index":1092,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1032,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":692,"title":{},"body":{"injectables/RxStompService.html":{}}}],["cr",{"_index":952,"title":{},"body":{"classes/StompHeaders.html":{}}}],["create",{"_index":548,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompSubscription.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":202,"title":{},"body":{"interfaces/ITransaction.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":843,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["creating",{"_index":46,"title":{},"body":{"interfaces/IFrame.html":{},"classes/Versions.html":{}}}],["credentials",{"_index":341,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["current",{"_index":792,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["custom",{"_index":600,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["data",{"_index":135,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["date",{"_index":669,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivate",{"_index":643,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["deactivating",{"_index":179,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["debug",{"_index":309,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["debugfntype",{"_index":108,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["debugging",{"_index":386,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["declare",{"_index":869,"title":{},"body":{"classes/Stomp.html":{}}}],["declared",{"_index":1018,"title":{},"body":{"classes/Versions.html":{}}}],["deepak",{"_index":1117,"title":{},"body":{"properties.html":{}}}],["default",{"_index":98,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessagessubscription",{"_index":604,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscribe",{"_index":615,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaults",{"_index":224,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["defensively",{"_index":594,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["define",{"_index":294,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":322,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["defining",{"_index":1074,"title":{},"body":{"miscellaneous/functions.html":{}}}],["delay",{"_index":422,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["dependency",{"_index":142,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["dependent",{"_index":223,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["deprecated",{"_index":490,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["designed",{"_index":741,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destination",{"_index":94,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["destinations",{"_index":687,"title":{},"body":{"injectables/RxStompService.html":{}}}],["details",{"_index":283,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["dev",{"_index":1090,"title":{},"body":{"index.html":{}}}],["development",{"_index":1091,"title":{},"body":{"index.html":{}}}],["different",{"_index":752,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["disable",{"_index":398,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["discardwebsocketoncommfailure",{"_index":310,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnect",{"_index":652,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["disconnectheaders",{"_index":311,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnecting",{"_index":1072,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["disconnection",{"_index":390,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["docs",{"_index":1084,"title":{},"body":{"index.html":{}}}],["docs/latest/classes/stomp.html#over",{"_index":892,"title":{},"body":{"classes/Stomp.html":{}}}],["documentation",{"_index":371,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["documents",{"_index":1100,"title":{},"body":{"index.html":{}}}],["dom",{"_index":140,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["down",{"_index":193,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["dropped",{"_index":959,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["drops",{"_index":735,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["during",{"_index":441,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":454,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["each",{"_index":248,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"index.html":{}}}],["earlier",{"_index":743,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["effects",{"_index":411,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["elements",{"_index":1016,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":791,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["enable",{"_index":384,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["end",{"_index":96,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["endpoint",{"_index":816,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["enqueued",{"_index":192,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["ensure",{"_index":582,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["entry",{"_index":1104,"title":{},"body":{"index.html":{}}}],["enum",{"_index":171,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["enumerations",{"_index":1065,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":835,"title":{},"body":{"classes/Stomp.html":{}}}],["error",{"_index":702,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["errors",{"_index":824,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["es6",{"_index":963,"title":{},"body":{"injectables/StompService.html":{}}}],["established",{"_index":376,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["etc",{"_index":343,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ev",{"_index":145,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["even",{"_index":734,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event",{"_index":825,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["event]://developer.mozilla.org/en",{"_index":1124,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["event]{@link",{"_index":119,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["evt",{"_index":117,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["exact",{"_index":802,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["exactly",{"_index":279,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["example",{"_index":65,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["examples",{"_index":976,"title":{},"body":{"injectables/StompService.html":{}}}],["existing",{"_index":662,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["explicitly",{"_index":983,"title":{},"body":{"injectables/StompService.html":{}}}],["export",{"_index":51,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["exposed",{"_index":154,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["extended",{"_index":25,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["extends",{"_index":66,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["factory",{"_index":298,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":1046,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["false",{"_index":581,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["family",{"_index":1112,"title":{},"body":{"properties.html":{}}}],["favor",{"_index":958,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":340,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["field",{"_index":896,"title":{},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["fields",{"_index":289,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":568,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["filter((message",{"_index":609,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["first",{"_index":569,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["fixed",{"_index":291,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["flag",{"_index":251,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["following",{"_index":749,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["forcebinarywsframes",{"_index":312,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["frame",{"_index":11,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["frame.ts",{"_index":7,"title":{},"body":{"interfaces/IFrame.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["framecallbacktype",{"_index":111,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["frameimpl",{"_index":62,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#body",{"_index":81,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#headers",{"_index":79,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frames",{"_index":132,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["framework",{"_index":625,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["function",{"_index":69,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":281,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["functions",{"_index":947,"title":{"miscellaneous/functions.html":{}},"body":{"classes/StompHeaders.html":{},"miscellaneous/functions.html":{}}}],["generatebinarydata",{"_index":723,"title":{},"body":{"injectables/RxStompService.html":{}}}],["generated",{"_index":1101,"title":{},"body":{"index.html":{}}}],["generating",{"_index":564,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["gets",{"_index":708,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["getting",{"_index":1079,"title":{"index.html":{}},"body":{}}],["good",{"_index":724,"title":{},"body":{"injectables/RxStompService.html":{}}}],["guest",{"_index":665,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["guide",{"_index":288,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":284,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["guide/rx",{"_index":471,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](/guide/rx",{"_index":574,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["guides",{"_index":1098,"title":{},"body":{"index.html":{}}}],["hack",{"_index":875,"title":{},"body":{"classes/Stomp.html":{}}}],["handle",{"_index":243,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["handles",{"_index":995,"title":{},"body":{"injectables/StompService.html":{}}}],["handshake",{"_index":442,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["header",{"_index":101,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["headers",{"_index":21,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["headers.ts",{"_index":946,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":955,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correlation",{"_index":606,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['reply",{"_index":612,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers]{@link",{"_index":48,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["heartbeat",{"_index":396,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["heartbeatincoming",{"_index":313,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["heartbeatoutgoing",{"_index":314,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["hello",{"_index":717,"title":{},"body":{"injectables/RxStompService.html":{}}}],["here",{"_index":744,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["host",{"_index":364,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["html5",{"_index":853,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":114,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["https://stomp",{"_index":890,"title":{},"body":{"classes/Stomp.html":{}}}],["i.e",{"_index":334,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["id",{"_index":209,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["identifier",{"_index":1033,"title":{},"body":{"coverage.html":{}}}],["iframe",{"_index":1,"title":{"interfaces/IFrame.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["iframe#headers",{"_index":49,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["ignore",{"_index":787,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["imessage",{"_index":24,"title":{"interfaces/IMessage.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["immediate",{"_index":328,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["immediately",{"_index":712,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["impact",{"_index":327,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["implementation",{"_index":539,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["implies",{"_index":380,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["import",{"_index":47,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["important",{"_index":360,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["inactive",{"_index":180,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["incoming",{"_index":395,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":954,"title":{},"body":{"classes/StompHeaders.html":{}}}],["indicate",{"_index":699,"title":{},"body":{"injectables/RxStompService.html":{},"index.html":{}}}],["indicates",{"_index":152,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Versions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["information",{"_index":225,"title":{},"body":{"interfaces/IWatchParams.html":{},"index.html":{}}}],["inherited",{"_index":321,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["initandconnect",{"_index":970,"title":{},"body":{"injectables/StompService.html":{}}}],["initialize",{"_index":968,"title":{},"body":{"injectables/StompService.html":{}}}],["initiate",{"_index":646,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":295,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injectable",{"_index":268,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":269,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstomprpcconfig",{"_index":468,"title":{"injectables/InjectableRxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":270,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"overview.html":{}}}],["injected",{"_index":297,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injection",{"_index":624,"title":{},"body":{"injectables/RxStompRPCService.html":{},"miscellaneous/functions.html":{}}}],["instance",{"_index":57,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":491,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"overview.html":{}}}],["internal",{"_index":128,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["internally",{"_index":263,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["interval",{"_index":397,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["invoke",{"_index":774,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["invoked",{"_index":244,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["invoking",{"_index":257,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["ipublishparams",{"_index":87,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irawframetype",{"_index":127,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["irxstomppublishparams",{"_index":181,"title":{"interfaces/IRxStompPublishParams.html":{}},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"coverage.html":{}}}],["isbinarybody",{"_index":31,"title":{},"body":{"interfaces/IFrame.html":{}}}],["issue",{"_index":739,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["issued",{"_index":264,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["istompsocket",{"_index":143,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["istompsocketmessageevent",{"_index":134,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["itransaction",{"_index":199,"title":{"interfaces/ITransaction.html":{}},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["iwatchparams",{"_index":216,"title":{"interfaces/IWatchParams.html":{}},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["iwatchparams#subscribeonlyonce",{"_index":737,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["java",{"_index":435,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["javascript",{"_index":517,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["js.github.io/api",{"_index":891,"title":{},"body":{"classes/Stomp.html":{}}}],["json",{"_index":694,"title":{},"body":{"injectables/RxStompService.html":{}}}],["keep",{"_index":650,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["key",{"_index":37,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["keys",{"_index":361,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["klass",{"_index":884,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":885,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":592,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":256,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["kumar",{"_index":1118,"title":{},"body":{"properties.html":{}}}],["large",{"_index":430,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["later",{"_index":296,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leave",{"_index":986,"title":{},"body":{"injectables/StompService.html":{}}}],["length",{"_index":100,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["lf",{"_index":953,"title":{},"body":{"classes/StompHeaders.html":{}}}],["libraries",{"_index":1094,"title":{},"body":{"index.html":{}}}],["library",{"_index":740,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"index.html":{}}}],["license",{"_index":1113,"title":{},"body":{"properties.html":{}}}],["line",{"_index":1089,"title":{},"body":{"index.html":{}}}],["line:variable",{"_index":873,"title":{},"body":{"classes/Stomp.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["literal",{"_index":233,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["locally",{"_index":705,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["located",{"_index":844,"title":{},"body":{"classes/Stomp.html":{}}}],["log",{"_index":404,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["login",{"_index":362,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["lograwcommunication",{"_index":315,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["logs",{"_index":409,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["loop",{"_index":676,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["main",{"_index":1088,"title":{},"body":{"index.html":{}}}],["major",{"_index":830,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":552,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["mandatory",{"_index":718,"title":{},"body":{"injectables/RxStompService.html":{}}}],["manual",{"_index":71,"title":{},"body":{"interfaces/IMessage.html":{}}}],["manually",{"_index":967,"title":{},"body":{"injectables/StompService.html":{}}}],["many",{"_index":12,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["maps",{"_index":349,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["marks",{"_index":368,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["matched",{"_index":772,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["matching",{"_index":55,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxwebsocketchunksize",{"_index":316,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["meaning",{"_index":750,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["means",{"_index":985,"title":{},"body":{"injectables/StompService.html":{}}}],["mechanism",{"_index":302,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":58,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["message.headers['correlation",{"_index":610,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["message.ts",{"_index":56,"title":{},"body":{"interfaces/IMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagecallbacktype",{"_index":110,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messages",{"_index":195,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["messaging",{"_index":541,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["method",{"_index":74,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["methods",{"_index":542,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["milliseconds",{"_index":378,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["miscellaneous",{"_index":1064,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed",{"_index":738,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["missing",{"_index":704,"title":{},"body":{"injectables/RxStompService.html":{}}}],["mode",{"_index":428,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"index.html":{}}}],["modules",{"_index":1106,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":857,"title":{},"body":{"classes/Stomp.html":{},"index.html":{}}}],["mozwebsocket",{"_index":877,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":109,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["msg});maps",{"_index":781,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["multiple",{"_index":659,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["nack",{"_index":68,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["name",{"_index":478,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":683,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["naming",{"_index":686,"title":{},"body":{"injectables/RxStompService.html":{}}}],["navigating",{"_index":1081,"title":{},"body":{"index.html":{}}}],["need",{"_index":19,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["needed",{"_index":862,"title":{},"body":{"classes/Stomp.html":{}}}],["needs",{"_index":764,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["new",{"_index":448,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":412,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["ng2",{"_index":1105,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":834,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":425,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["normally",{"_index":807,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["note",{"_index":561,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["notify",{"_index":819,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["npm",{"_index":1086,"title":{},"body":{"index.html":{}}}],["null",{"_index":146,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["number",{"_index":163,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["object",{"_index":456,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["objects",{"_index":803,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable",{"_index":262,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["observable.create((rpcobserver",{"_index":603,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["observer",{"_index":567,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["occasionally",{"_index":255,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{}}}],["occurs",{"_index":785,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["octet(s",{"_index":703,"title":{},"body":{"injectables/RxStompService.html":{}}}],["once",{"_index":858,"title":{},"body":{"classes/Stomp.html":{}}}],["onchangestate",{"_index":898,"title":{},"body":{"classes/StompConfig.html":{}}}],["onclose",{"_index":144,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onconnect",{"_index":899,"title":{},"body":{"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":900,"title":{},"body":{"classes/StompConfig.html":{}}}],["one",{"_index":355,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onerror",{"_index":147,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onmessage",{"_index":148,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onopen",{"_index":149,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["onstomperror",{"_index":901,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledframe",{"_index":902,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledmessage",{"_index":903,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":904,"title":{},"body":{"classes/StompConfig.html":{}}}],["onwebsocketclose",{"_index":905,"title":{},"body":{"classes/StompConfig.html":{}}}],["onwebsocketerror",{"_index":906,"title":{},"body":{"classes/StompConfig.html":{}}}],["open",{"_index":173,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["operation",{"_index":760,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["optional",{"_index":93,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":188,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["opts",{"_index":756,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["order",{"_index":854,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwise",{"_index":673,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["out",{"_index":696,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["outgoing",{"_index":401,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["over",{"_index":227,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/Stomp.html":{},"index.html":{}}}],["over(ws",{"_index":848,"title":{},"body":{"classes/Stomp.html":{}}}],["override",{"_index":1017,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1107,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1110,"title":{"properties.html":{}},"body":{}}],["packets",{"_index":432,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["pairs",{"_index":39,"title":{},"body":{"interfaces/IFrame.html":{}}}],["param",{"_index":629,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["parameter",{"_index":107,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":558,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["params.headers",{"_index":596,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["params.ts",{"_index":186,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["parsed",{"_index":410,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["parser",{"_index":130,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":22,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":14,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passcode",{"_index":363,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["passed",{"_index":45,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["passing",{"_index":864,"title":{},"body":{"classes/Stomp.html":{}}}],["payload",{"_index":693,"title":{},"body":{"injectables/RxStompService.html":{}}}],["per",{"_index":648,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["pipe",{"_index":608,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["please",{"_index":282,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"index.html":{}}}],["point",{"_index":97,"title":{},"body":{"interfaces/IPublishParams.html":{},"index.html":{}}}],["possible",{"_index":169,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practice",{"_index":725,"title":{},"body":{"injectables/RxStompService.html":{}}}],["prefer",{"_index":459,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["preferred",{"_index":1103,"title":{},"body":{"index.html":{}}}],["present",{"_index":369,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["prior",{"_index":878,"title":{},"body":{"classes/Stomp.html":{}}}],["priority",{"_index":715,"title":{},"body":{"injectables/RxStompService.html":{}}}],["private",{"_index":575,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["procedure",{"_index":473,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["processing",{"_index":815,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["promise",{"_index":335,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["promise](https://developer.mozilla.org/en",{"_index":534,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["properties",{"_index":27,"title":{"properties.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"properties.html":{}}}],["protocol",{"_index":688,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["protocols",{"_index":841,"title":{},"body":{"classes/Stomp.html":{}}}],["protocolversions",{"_index":1011,"title":{},"body":{"classes/Versions.html":{}}}],["prototype",{"_index":870,"title":{},"body":{"classes/Stomp.html":{}}}],["provider",{"_index":1075,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":797,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":303,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["publish",{"_index":185,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["publish(parameters",{"_index":681,"title":{},"body":{"injectables/RxStompService.html":{}}}],["publish(queuename",{"_index":979,"title":{},"body":{"injectables/StompService.html":{}}}],["published",{"_index":196,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["publishing",{"_index":776,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["publishparams",{"_index":91,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["queue",{"_index":480,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":482,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":714,"title":{},"body":{"injectables/RxStompService.html":{}}}],["queued",{"_index":706,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["queuename",{"_index":241,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/StompService.html":{}}}],["queues",{"_index":732,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["r.service",{"_index":994,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.ts",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["rabbitmq",{"_index":485,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raise",{"_index":711,"title":{},"body":{"injectables/RxStompService.html":{}}}],["random",{"_index":767,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["randomtext",{"_index":778,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["raw",{"_index":406,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rawheadertype",{"_index":129,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re)connection",{"_index":250,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["re)subscription",{"_index":246,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["reactivate",{"_index":678,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readme",{"_index":974,"title":{},"body":{"injectables/StompService.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reads",{"_index":746,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["readystate",{"_index":162,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["receipt",{"_index":112,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiptid",{"_index":777,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receive",{"_index":106,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["received",{"_index":15,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["receiving",{"_index":812,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["recent",{"_index":798,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reconnect",{"_index":413,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnectdelay",{"_index":317,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{}}}],["reconnecting",{"_index":859,"title":{},"body":{"classes/Stomp.html":{}}}],["reconnection",{"_index":654,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["reconnects",{"_index":736,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["reestablished",{"_index":197,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["refer",{"_index":684,"title":{},"body":{"injectables/RxStompService.html":{}}}],["released",{"_index":1087,"title":{},"body":{"index.html":{}}}],["reliably",{"_index":339,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["remains",{"_index":584,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["remarks",{"_index":881,"title":{},"body":{"classes/Stomp.html":{}}}],["remote",{"_index":540,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["removed",{"_index":829,"title":{},"body":{"classes/Stomp.html":{}}}],["replaced",{"_index":897,"title":{},"body":{"classes/StompConfig.html":{}}}],["replies",{"_index":483,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["repliesobservable",{"_index":598,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["repliesobservable.subscribe",{"_index":602,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["reply",{"_index":479,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuename",{"_index":475,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":701,"title":{},"body":{"injectables/RxStompService.html":{}}}],["represents",{"_index":9,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":553,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requested",{"_index":818,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["requesting",{"_index":763,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["require('../../esm5",{"_index":836,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":871,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket;deprecated",{"_index":839,"title":{},"body":{"classes/Stomp.html":{}}}],["resolved",{"_index":338,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["resubscribe",{"_index":253,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["resubscriptions",{"_index":231,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["results",{"_index":54,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":375,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["retryifdisconnected",{"_index":191,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/RxStompService.html":{}}}],["return",{"_index":236,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["returned",{"_index":799,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["returns",{"_index":151,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["rpc",{"_index":469,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rpc(params",{"_index":550,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rpc.service.ts",{"_index":620,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":622,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.ts",{"_index":538,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:30",{"_index":547,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:56",{"_index":551,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:67",{"_index":560,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(message",{"_index":611,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":184,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":261,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxjs/operators",{"_index":570,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rxstomp",{"_index":326,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rxstomp#activate",{"_index":679,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#configure",{"_index":494,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":514,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate",{"_index":531,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp#decativate",{"_index":331,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstomp#decativate]{@link",{"_index":530,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#publish",{"_index":189,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#publish]{@link",{"_index":198,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#watch",{"_index":218,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watch]{@link",{"_index":266,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp#watchforreceipt",{"_index":820,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.activate();maps",{"_index":670,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.configure",{"_index":663,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":720,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp.publish({destination",{"_index":713,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":990,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp.watch",{"_index":240,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":779,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:106",{"_index":805,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:118",{"_index":817,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:131",{"_index":801,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:141",{"_index":822,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:161",{"_index":980,"title":{},"body":{"injectables/StompService.html":{}}}],["rxstomp:254",{"_index":658,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:278",{"_index":645,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:325",{"_index":674,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:338",{"_index":672,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:398",{"_index":682,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:451",{"_index":729,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:53",{"_index":790,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:584",{"_index":758,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:61",{"_index":783,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:76",{"_index":796,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp:93",{"_index":811,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstomp](@link",{"_index":348,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig",{"_index":278,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":649,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["rxstompconfig#websocketfactory",{"_index":356,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":515,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.stompversions",{"_index":447,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactory",{"_index":462,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig:102",{"_index":400,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:111",{"_index":424,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:116",{"_index":392,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:121",{"_index":323,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:126",{"_index":419,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:131",{"_index":387,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:140",{"_index":359,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:147",{"_index":389,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:167",{"_index":325,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:22",{"_index":351,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:35",{"_index":439,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:47",{"_index":403,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:50",{"_index":383,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:73",{"_index":452,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:81",{"_index":374,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:88",{"_index":421,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:95",{"_index":394,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstomprpc",{"_index":537,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpc#stream",{"_index":557,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rxstomprpc#stream]{@link",{"_index":591,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rxstomprpc:56",{"_index":626,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpc:67",{"_index":627,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpcconfig",{"_index":470,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpcconfig:23",{"_index":477,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcconfig:27",{"_index":488,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcservice",{"_index":618,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstompservice",{"_index":621,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory",{"_index":632,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1073,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstate",{"_index":1067,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["safely",{"_index":733,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["same",{"_index":280,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["samples",{"_index":975,"title":{},"body":{"injectables/StompService.html":{}}}],["scripts",{"_index":155,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["see",{"_index":63,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":212,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["send(data",{"_index":168,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sent",{"_index":698,"title":{},"body":{"injectables/RxStompService.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{}}}],["sequence",{"_index":766,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["server",{"_index":731,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["serverheaders",{"_index":635,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["service",{"_index":344,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":103,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["setting",{"_index":460,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["setup",{"_index":489,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueue",{"_index":476,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntype",{"_index":487,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["show",{"_index":794,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["similar",{"_index":453,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simple",{"_index":554,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["simplest",{"_index":1078,"title":{},"body":{"miscellaneous/functions.html":{}}}],["skip",{"_index":719,"title":{},"body":{"injectables/RxStompService.html":{}}}],["skipcontentlengthheader",{"_index":95,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["skipped",{"_index":105,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["socket",{"_index":153,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["sockjs",{"_index":455,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":465,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["sometimes",{"_index":695,"title":{},"body":{"injectables/RxStompService.html":{}}}],["soon",{"_index":707,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["specific",{"_index":372,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["specification",{"_index":964,"title":{},"body":{"injectables/StompService.html":{}}}],["specified",{"_index":377,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["specifies",{"_index":689,"title":{},"body":{"injectables/RxStompService.html":{}}}],["specify",{"_index":852,"title":{},"body":{"classes/Stomp.html":{}}}],["splitlargeframes",{"_index":318,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["splitting",{"_index":429,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["spring",{"_index":436,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["standard",{"_index":367,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["standards",{"_index":426,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["started",{"_index":1080,"title":{"index.html":{}},"body":{}}],["state",{"_index":158,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["state.ts",{"_index":1069,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1034,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":170,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["static",{"_index":831,"title":{},"body":{"classes/Stomp.html":{},"classes/Versions.html":{}}}],["status",{"_index":793,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["step",{"_index":287,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":10,"title":{"classes/Stomp.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stomp#client",{"_index":851,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":887,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":879,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":874,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url);deprecated",{"_index":846,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":993,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp.js",{"_index":962,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp.over",{"_index":880,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(function",{"_index":865,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.service",{"_index":628,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.ts",{"_index":631,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.ts",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["stomp.websocketclass",{"_index":838,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":274,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stomp/rx",{"_index":190,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/i",{"_index":183,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{},"coverage.html":{}}}],["stomp/src/rx",{"_index":493,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.js",{"_index":961,"title":{},"body":{"injectables/StompService.html":{}}}],["stomp/stompjs",{"_index":23,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stompconfig",{"_index":893,"title":{"classes/StompConfig.html":{}},"body":{"classes/StompConfig.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomperrors",{"_index":636,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompheaders",{"_index":36,"title":{"classes/StompHeaders.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompjs",{"_index":275,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["stompjs.stomp",{"_index":837,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/ng2",{"_index":285,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["stompjs/remote",{"_index":472,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/src/app/compatibility/stomp",{"_index":1035,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts",{"_index":957,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/app/compatibility/stomp.service.ts:25",{"_index":973,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs/src/app/injectable",{"_index":272,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stompjs/src/app/rx",{"_index":619,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs@8.x.x",{"_index":960,"title":{},"body":{"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":546,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuename",{"_index":586,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueue",{"_index":588,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservice",{"_index":969,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stomprservice:136",{"_index":978,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:147",{"_index":977,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:195",{"_index":982,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:230",{"_index":989,"title":{},"body":{"injectables/StompService.html":{}}}],["stomprservice:40",{"_index":992,"title":{},"body":{"injectables/StompService.html":{}}}],["stompservice",{"_index":956,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompService.html":{},"coverage.html":{},"index.html":{}}}],["stompsocketstate",{"_index":161,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate",{"_index":1070,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stompstate.open",{"_index":788,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stompsubscription",{"_index":999,"title":{"classes/StompSubscription.html":{}},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompversions",{"_index":319,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":653,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["strange",{"_index":747,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stray",{"_index":814,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream",{"_index":543,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["stream(params",{"_index":559,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["streaming",{"_index":965,"title":{},"body":{"injectables/StompService.html":{}}}],["string",{"_index":35,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":417,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["structure",{"_index":133,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["sub",{"_index":239,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["sub.unsubscribe",{"_index":265,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaders",{"_index":219,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subheaderscallback",{"_index":235,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subject",{"_index":800,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe",{"_index":730,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["subscribe((message",{"_index":242,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{}}}],["subscribe(queuename",{"_index":981,"title":{},"body":{"injectables/StompService.html":{}}}],["subscribed",{"_index":247,"title":{},"body":{"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{}}}],["subscribeonlyonce",{"_index":220,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["subscribing",{"_index":70,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/StompService.html":{}}}],["subscription",{"_index":59,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IWatchParams.html":{},"classes/RxStompRPC.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["subscription.ts",{"_index":1000,"title":{},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["subscription.ts:12",{"_index":1001,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscription.ts:17",{"_index":1003,"title":{},"body":{"classes/StompSubscription.html":{}}}],["successful",{"_index":249,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["such",{"_index":194,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"interfaces/IWatchParams.html":{}}}],["suggests",{"_index":690,"title":{},"body":{"injectables/RxStompService.html":{}}}],["suitable",{"_index":484,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":996,"title":{},"body":{"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":630,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["support",{"_index":156,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["supported",{"_index":1007,"title":{},"body":{"classes/Versions.html":{}}}],["supportedversions",{"_index":1012,"title":{},"body":{"classes/Versions.html":{}}}],["supports",{"_index":457,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["switch",{"_index":125,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["syntax",{"_index":755,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["t",{"_index":118,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["table",{"_index":1063,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1062,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":562,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Versions.html":{}}}],["target",{"_index":222,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["tcp",{"_index":861,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":481,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporary",{"_index":813,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["terminate",{"_index":150,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["test.destination",{"_index":991,"title":{},"body":{"injectables/StompService.html":{}}}],["text",{"_index":431,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["thin",{"_index":1096,"title":{},"body":{"index.html":{}}}],["things",{"_index":753,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["this._customreplyqueue",{"_index":589,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._dummysubscription",{"_index":601,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable",{"_index":597,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuename",{"_index":587,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue",{"_index":590,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.config",{"_index":997,"title":{},"body":{"injectables/StompService.html":{}}}],["this.initandconnect",{"_index":998,"title":{},"body":{"injectables/StompService.html":{}}}],["this.rxstomp",{"_index":599,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish",{"_index":613,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessage",{"_index":578,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.stream(params).pipe(first",{"_index":593,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.versions.join",{"_index":1029,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map(x",{"_index":1030,"title":{},"body":{"classes/Versions.html":{}}}],["though",{"_index":365,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["three",{"_index":1093,"title":{},"body":{"index.html":{}}}],["through",{"_index":1082,"title":{},"body":{"index.html":{}}}],["time",{"_index":228,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["times",{"_index":660,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["todo",{"_index":205,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["token",{"_index":342,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["topic/special",{"_index":726,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["transaction",{"_index":201,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["transaction.ts",{"_index":200,"title":{},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["transmits",{"_index":166,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["transport",{"_index":860,"title":{},"body":{"classes/Stomp.html":{}}}],["trigger",{"_index":784,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["true",{"_index":104,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["try",{"_index":446,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["trying",{"_index":651,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["tslint:disable",{"_index":872,"title":{},"body":{"classes/Stomp.html":{}}}],["tutorials",{"_index":1099,"title":{},"body":{"index.html":{}}}],["two",{"_index":748,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["type",{"_index":33,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1119,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typelib",{"_index":141,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["typeof",{"_index":888,"title":{},"body":{"classes/Stomp.html":{}}}],["types",{"_index":685,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["typescript",{"_index":267,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["typical",{"_index":464,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["typically",{"_index":293,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["uint8array",{"_index":32,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{}}}],["underlying",{"_index":583,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["understand",{"_index":984,"title":{},"body":{"injectables/StompService.html":{}}}],["unhandled",{"_index":806,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledframe",{"_index":637,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledmessage",{"_index":638,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unhandledreceipts",{"_index":639,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unique",{"_index":765,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unless",{"_index":809,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["unset",{"_index":408,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["unsubheaders",{"_index":221,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubheaderscallback",{"_index":259,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["unsubscribe",{"_index":260,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["unsubscribing",{"_index":254,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["url",{"_index":352,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us/docs/web/api/closeevent",{"_index":115,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/closeeventhttps",{"_index":1123,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/api/event",{"_index":120,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/eventhttps",{"_index":1125,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["us/docs/web/javascript/reference/global_objects/promise",{"_index":535,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["us/docs/web/javascript/reference/statements/async_function",{"_index":533,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["usage",{"_index":18,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["use",{"_index":461,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":126,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["useful",{"_index":434,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["user",{"_index":795,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["using",{"_index":167,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["utf8",{"_index":416,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["uuid",{"_index":571,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["uuid.uuid",{"_index":607,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["v${x.replace",{"_index":1031,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1008,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1009,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1010,"title":{},"body":{"classes/Versions.html":{}}}],["valid",{"_index":330,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IWatchParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":160,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompService.html":{}}}],["var",{"_index":721,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["variable",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1126,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":277,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"properties.html":{}}}],["versions",{"_index":438,"title":{"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{},"index.html":{}}}],["versions(['1.0",{"_index":449,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["versions.default.protocolversions",{"_index":882,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.v1_0",{"_index":1025,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_1",{"_index":1026,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1027,"title":{},"body":{"classes/Versions.html":{}}}],["very",{"_index":751,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["via",{"_index":566,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":84,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["wait",{"_index":381,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["waitforreceipt",{"_index":971,"title":{},"body":{"injectables/StompService.html":{}}}],["waitforreceipt(receiptid",{"_index":988,"title":{},"body":{"injectables/StompService.html":{}}}],["want",{"_index":709,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":217,"title":{},"body":{"interfaces/IWatchParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["watch(opts",{"_index":728,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt",{"_index":644,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watchforreceipt(receiptid",{"_index":757,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["watching",{"_index":773,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["way",{"_index":346,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["web",{"_index":823,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocket",{"_index":138,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/ws",{"_index":463,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/ws",{"_index":866,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":832,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketerrors",{"_index":640,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["websocketfactory",{"_index":320,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["websockets",{"_index":458,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["well",{"_index":92,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["whether",{"_index":43,"title":{},"body":{"interfaces/IFrame.html":{}}}],["wiring",{"_index":966,"title":{},"body":{"injectables/StompService.html":{}}}],["within",{"_index":213,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["work",{"_index":742,"title":{},"body":{"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["working",{"_index":987,"title":{},"body":{"injectables/StompService.html":{}}}],["world",{"_index":238,"title":{},"body":{"interfaces/IWatchParams.html":{}}}],["wrapper",{"_index":555,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"index.html":{}}}],["ws",{"_index":867,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/ws",{"_index":664,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}],["ws://broker.329broker.com:15674/ws",{"_index":353,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":845,"title":{},"body":{"classes/Stomp.html":{}}}],["wserrorcallbacktype",{"_index":121,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["wsfn",{"_index":883,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/ws",{"_index":354,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["yes",{"_index":549,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompService.html":{}}}],["yield",{"_index":131,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/RxStompService.html":{},"injectables/StompService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFrame.html":{"url":"interfaces/IFrame.html","title":"interface - IFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-frame.ts\n        \n\n\n            \n                Description\n            \n            \n                It represents a STOMP frame. Many of the callbacks pass an IFrame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nIMessage is an extended IFrame.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            command\n                                        \n                                \n                                \n                                        \n                                            headers\n                                        \n                                \n                                \n                                        \n                                            isBinaryBody\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body as Uint8Array\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body of the frame as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        command:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    STOMP Command\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Headers, key value pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBinaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isBinaryBody:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from './stomp-headers';\n\n/**\n * It represents a STOMP frame. Many of the callbacks pass an IFrame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link IFrame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link IMessage} is an extended IFrame.\n */\nexport interface IFrame {\n  /**\n   * STOMP Command\n   */\n  command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  isBinaryBody: boolean;\n\n  /**\n   * body of the frame as string\n   */\n  readonly body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  readonly binaryBody: Uint8Array;\n}\n\n/**\n * Alias for {@link IFrame}\n */\nexport type Frame = IFrame;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMessage.html":{"url":"interfaces/IMessage.html","title":"interface - IMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-message.ts\n        \n\n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended FrameImpl, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                        IFrame\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ack\n                                        \n                                \n                                \n                                        \n                                            nack\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nack\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame';\nimport { StompHeaders } from './stomp-headers';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link FrameImpl}, you can access [headers]{@link FrameImpl#headers}\n * and [body]{@link FrameImpl#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport interface IMessage extends IFrame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  nack: (headers?: StompHeaders) => void;\n}\n\n/**\n * Aliased to {@link IMessage}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type Message = IMessage;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n\n            \n                Description\n            \n            \n                Parameters for Client#publish.\nAliased as publishParams as well.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            binaryBody\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            body\n                                        \n                                \n                                \n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            headers\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            skipContentLengthHeader\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IFrame } from './i-frame';\nimport { IMessage } from './i-message';\nimport { StompHeaders } from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link IMessage} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: IMessage) => void;\n\n/**\n * This callback will receive a {@link IFrame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = (receipt: IFrame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: T) => void;\n\n/**\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type wsErrorCallbackType = (evt: T) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}.\n * Aliased as publishParams as well.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Backward compatibility, switch to {@link IPublishParams}.\n */\nexport type publishParams = IPublishParams;\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType {\n  command: string;\n  headers: RawHeaderType[];\n  binaryBody: Uint8Array;\n}\n\n/**\n * @internal\n */\nexport interface IStompSocketMessageEvent {\n  data?: string | ArrayBuffer;\n}\n\n/**\n * Copied from Websocket interface to avoid dom typelib dependency.\n *\n * @internal\n */\nexport interface IStompSocket {\n  onclose: ((this: IStompSocket, ev?: any) => any) | null;\n  onerror: ((this: IStompSocket, ev: any) => any) | null;\n  onmessage: ((this: IStompSocket, ev: IStompSocketMessageEvent) => any) | null;\n  onopen: ((this: IStompSocket, ev?: any) => any) | null;\n  terminate?: ((this: IStompSocket) => any) | null;\n\n  /**\n   * Returns a string that indicates how binary data from the socket is exposed to scripts:\n   * We support only 'arraybuffer'.\n   */\n  binaryType: 'arraybuffer';\n\n  /**\n   * Returns the state of the socket connection. It can have the values of StompSocketState.\n   */\n  readonly readyState: number;\n\n  /**\n   * Closes the connection.\n   */\n  close(): void;\n  /**\n   * Transmits data using the connection. data can be a string or an ArrayBuffer.\n   */\n  send(data: string | ArrayBuffer): void;\n}\n\n/**\n * Possible states for the IStompSocket\n */\nexport enum StompSocketState {\n  CONNECTING,\n  OPEN,\n  CLOSING,\n  CLOSED,\n}\n\n/**\n * Possible activation state\n */\nexport enum ActivationState {\n  ACTIVE,\n  DEACTIVATING,\n  INACTIVE,\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRxStompPublishParams.html":{"url":"interfaces/IRxStompPublishParams.html","title":"interface - IRxStompPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRxStompPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Additional options for RxStomp#publish\nPart of @stomp/rx-stomp\n\n            \n\n            \n                Extends\n            \n            \n                        IPublishParams\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            retryIfDisconnected\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        retryIfDisconnected\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        retryIfDisconnected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When set to true message will be enqueued if the connection\nto the broker is down.\nSuch messages will be published when connection is reestablished.\nDefault is true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { IPublishParams } from '@stomp/stompjs';\n\n/**\n * Additional options for [RxStomp#publish]{@link RxStomp#publish}\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IRxStompPublishParams extends IPublishParams {\n  /**\n   * When set to `true` message will be enqueued if the connection\n   * to the broker is down.\n   * Such messages will be published when connection is reestablished.\n   *\n   * Default is `true`.\n   */\n  retryIfDisconnected?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransaction.html":{"url":"interfaces/ITransaction.html","title":"interface - ITransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ITransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-transaction.ts\n        \n\n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            abort\n                                        \n                                \n                                \n                                        \n                                            commit\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abort\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        abort:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Abort this transaction. See Client#abort for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        commit:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Commit this transaction. See Client#commit for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    You will need to access this to send, ack, or nack within this transaction.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ITransaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IWatchParams.html":{"url":"interfaces/IWatchParams.html","title":"interface - IWatchParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IWatchParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/i-watch-params.ts\n        \n\n\n            \n                Description\n            \n            \n                Options for RxStomp#watch.\nPart of @stomp/rx-stomp\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            destination\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subHeaders\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subscribeOnlyOnce\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            unsubHeaders\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The subscription target. It is likely to be broker dependent.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Subscription headers, defaults to {}\nIf header information can change over time and you are allowing automatic resubscriptions,\nconsider using a callback as the value rather than a string literal.\n             const subHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // The subHeadersCallback will be invoked before every (re)subscription.\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subscribeOnlyOnce\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subscribeOnlyOnce:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default, the destination will be subscribed after each successful (re)connection to the broker.\nSet this flag to not automatically resubscribe.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unsubHeaders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unsubHeaders:     StompHeaders | \n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders | \n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Headers to be passed while unsubscribing, defaults to {}.\nOccasionally, headers may not be known while invoking RxStomp#watch,\nin such cases a callback can be passed that would return the headers.\n             const unsubHeadersCallback = () => {\n                 return {bye: 'world'};\n             };\n             const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n                                .subscribe((message) => {\n                                   // handle message\n                                });\n             // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n             // `unsubHeadersCallback` will be invoked to get the headers.\n             sub.unsubscribe();\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StompHeaders } from '@stomp/stompjs';\n\n/**\n * Options for [RxStomp#watch]{@link RxStomp#watch}.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IWatchParams {\n  /**\n   * The subscription target. It is likely to be broker dependent.\n   */\n  readonly destination?: string;\n\n  /**\n   * Subscription headers, defaults to `{}`\n   *\n   * If header information can change over time and you are allowing automatic resubscriptions,\n   * consider using a callback as the value rather than a string literal.\n   *\n   * ```typescript\n   *              const subHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, subHeaders: subHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // The subHeadersCallback will be invoked before every (re)subscription.\n   * ```\n   */\n  readonly subHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * Headers to be passed while unsubscribing, defaults to `{}`.\n   *\n   * Occasionally, headers may not be known while invoking [RxStomp#watch]{@link RxStomp#watch},\n   * in such cases a callback can be passed that would return the headers.\n   *\n   * ```typescript\n   *              const unsubHeadersCallback = () => {\n   *                  return {bye: 'world'};\n   *              };\n   *              const sub = rxStomp.watch({ destination: queueName, unsubHeaders: unsubHeadersCallback})\n   *                                 .subscribe((message) => {\n   *                                    // handle message\n   *                                 });\n   *              // Unsubscribe from RxJS Observable, internally unsubscribe will be issued to the broker.\n   *              // `unsubHeadersCallback` will be invoked to get the headers.\n   *              sub.unsubscribe();\n   * ```\n   */\n  readonly unsubHeaders?: StompHeaders | (() => StompHeaders);\n\n  /**\n   * By default, the destination will be subscribed after each successful (re)connection to the broker.\n   * Set this flag to not automatically resubscribe.\n   */\n  readonly subscribeOnlyOnce?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:121\n\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:167\n\n                        \n                    \n\n            \n                \n                    Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:22\n\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:140\n\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:81\n\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait for ever.\nMaps to: Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:50\n\n                        \n                    \n\n            \n                \n                    Enable client debugging?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:131\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:147\n\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:116\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:95\n\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:102\n\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:47\n\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:126\n\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:88\n\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:111\n\n                        \n                    \n\n            \n                \n                    Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:35\n\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n       // Try only versions 1.0 and 1.1\n       rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompConfig:73\n\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRPCConfig.html":{"url":"injectables/InjectableRxStompRPCConfig.html","title":"injectable - InjectableRxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPCConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:23\n\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStompRPCConfig\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStompRPCConfig:27\n\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStompRPCConfig } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRPCConfig extends RxStompRPCConfig {}\n\n// Backward compatibility\n/**\n * Deprecated, use {@link InjectableRxStompRPCConfig} instead\n */\nexport const InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:121\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:167\n                        \n                    \n\n            \n                \n                    Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\nMaps to: Client#beforeConnect\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:22\n                        \n                    \n\n            \n                \n                    The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:140\n                        \n                    \n\n            \n                \n                    Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:81\n                        \n                    \n\n            \n                \n                    Will retry if Stomp connection is not established in specified milliseconds.\nDefault 0, which implies wait for ever.\nMaps to: Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:50\n                        \n                    \n\n            \n                \n                    Enable client debugging?\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:131\n                        \n                    \n\n            \n                \n                    Maps to: Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:147\n                        \n                    \n\n            \n                \n                    Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:116\n                        \n                    \n\n            \n                \n                    Maps to: Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:95\n                        \n                    \n\n            \n                \n                    Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:102\n                        \n                    \n\n            \n                \n                    Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:47\n                        \n                    \n\n            \n                \n                    Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:126\n                        \n                    \n\n            \n                \n                    Maps to: Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:88\n                        \n                    \n\n            \n                \n                    Automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:111\n                        \n                    \n\n            \n                \n                    Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:35\n                        \n                    \n\n            \n                \n                    STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n       // Try only versions 1.0 and 1.1\n       rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);Maps to: Client#stompVersions\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:73\n                        \n                    \n\n            \n                \n                    This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n       // use a WebSocket\n       rxStompConfig.webSocketFactory= function () {\n         return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n       };\n\n       // Typical usage with SockJS\n       rxStompConfig.webSocketFactory= function () {\n         return new SockJS(\"http://broker.329broker.com/stomp\");\n       };Maps to: Client#webSocketFactory\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { debugFnType, StompHeaders, Versions } from '@stomp/stompjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   *\n   * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * Will retry if Stomp connection is not established in specified milliseconds.\n   * Default 0, which implies wait for ever.\n   *\n   * Maps to: [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * Automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Enable non-standards compliant mode of splitting of outgoing large text packets.\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n   * Useful with Java Spring based brokers.\n   *\n   * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * Maps to: [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * As of version 0.1.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   *\n   * As of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: (client: RxStomp) => void | Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:30\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:56\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:67\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, first } from 'rxjs/operators';\n\nimport { UUID } from 'angular2-uuid';\n\nimport { IMessage, IPublishParams, StompHeaders } from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp';\nimport { RxStompRPCConfig, setupReplyQueueFnType } from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  };\n\n  private _repliesObservable: Observable;\n\n  private _customReplyQueue: boolean = false;\n\n  // This is used to ensure that underlying subscription remains subscribed\n  private _dummySubscription: Subscription;\n\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n   */\n  constructor(\n    private rxStomp: RxStomp,\n    private stompRPCConfig?: RxStompRPCConfig\n  ) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._customReplyQueue = true;\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  public rpc(params: IPublishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  public stream(params: IPublishParams): Observable {\n    // defensively copy\n    const headers: StompHeaders = { ...(params.headers || {}) };\n\n    if (!this._repliesObservable) {\n      const repliesObservable = this._setupReplyQueue(\n        this._replyQueueName,\n        this.rxStomp\n      );\n\n      // In case of custom queue, ensure it remains subscribed\n      if (this._customReplyQueue) {\n        this._dummySubscription = repliesObservable.subscribe(() => {});\n      }\n\n      this._repliesObservable = repliesObservable;\n    }\n\n    return Observable.create((rpcObserver: Observer) => {\n      let defaultMessagesSubscription: Subscription;\n\n      const correlationId = headers['correlation-id'] || UUID.UUID();\n\n      defaultMessagesSubscription = this._repliesObservable\n        .pipe(\n          filter((message: IMessage) => {\n            return message.headers['correlation-id'] === correlationId;\n          })\n        )\n        .subscribe((message: IMessage) => {\n          rpcObserver.next(message);\n        });\n\n      // send an RPC request\n      headers['reply-to'] = this._replyQueueName;\n      headers['correlation-id'] = correlationId;\n\n      this.rxStomp.publish({ ...params, headers });\n\n      return () => {\n        // Cleanup\n        defaultMessagesSubscription.unsubscribe();\n      };\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        replyQueueName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:23\n                        \n                    \n\n            \n                \n                    Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        setupReplyQueue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:27\n                        \n                    \n\n            \n                \n                    Setup the reply queue. See the guide for details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMessage } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n *\n * Part of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (\n  replyQueueName: string,\n  rxStomp: RxStomp\n) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPC\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            Create an instance, typically called by Angular Dependency Injection framework.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        InjectableRxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        rpc\n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:56\n\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stream\n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: IPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:67\n\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                IPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Optional } from '@angular/core';\n\nimport { RxStompRPC } from '@stomp/rx-stomp';\nimport { RxStompService } from './rx-stomp.service';\nimport { InjectableRxStompRPCConfig } from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  /**\n   * Create an instance, typically called by Angular Dependency Injection framework.\n   *\n   * @param rxStomp\n   * @param stompRPCConfig\n   */\n  constructor(\n    rxStomp: RxStompService,\n    @Optional() stompRPCConfig?: InjectableRxStompRPCConfig\n  ) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStomp\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:278\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:254\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:338\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:325\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(parameters: IRxStompPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:398\n\n                \n            \n\n\n            \n                \n                    Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nIf you do not want that behavior,\nplease set retryIfDisconnected to false\nin the parameters.\nWhen false, this function will raise an error if message could not be sent immediately.\nMaps to: Client#publish\nSee: IRxStompPublishParams and IPublishParams\n       rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n\n       // Only destination is mandatory parameter\n       rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n\n       // Skip content-length header in the frame to the broker\n       rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n\n       var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n       // setting content-type header is not mandatory, however a good practice\n       rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n                        headers: {'content-type': 'application/octet-stream'}});\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                                IRxStompPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:451\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code reads strange with two subscribe calls\nfollowing each other and both meaning very different things.\nThis method has two alternate syntax, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:584\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:61\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:53\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:76\n\n                        \n                    \n\n            \n                \n                    Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:131\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:106\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:93\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:118\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:141\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        WebSocketClass\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/compatibility/stomp.ts:41\n                        \n                    \n\n            \n                \n                    In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n       StompJs = require('../../esm5/');\n       Stomp = StompJs.Stomp;\n       Stomp.WebSocketClass = require('websocket').w3cwebsocket;Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        client\n                        \n                    \n                \n            \n            \n                \n                    \n                    client(url: string, protocols?: string[])\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:57\n                \n            \n\n\n            \n                \n                    This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n       var url = \"ws://localhost:61614/stomp\";\n       var client = Stomp.client(url);Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocols\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        over\n                        \n                    \n                \n            \n            \n                \n                    \n                    over(ws: any)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:103\n                \n            \n\n\n            \n                \n                    This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n       var client = Stomp.over(function(){\n         return new WebSocket('ws://localhost:15674/ws')\n       });Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ws\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Versions } from '../versions';\nimport { CompatClient } from './compat-client';\nimport { IStompSocket } from '../types';\n\n/**\n * @internal\n */\ndeclare const WebSocket: {\n  prototype: IStompSocket;\n  new (url: string, protocols?: string | string[]): IStompSocket;\n};\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn(\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\n      );\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nThere used to be a class with the same name in @stomp/ng2-stompjs, which has been replaced by\nRxStompConfig and InjectableRxStompConfig.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                connectionTimeout\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                discardWebsocketOnCommFailure\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                onChangeState\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketError\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        appendMissingNULLonIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:71\n                        \n                    \n\n            \n                \n                    See Client#appendMissingNULLonIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        beforeConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:106\n                        \n                    \n\n            \n                \n                    See Client#beforeConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        brokerURL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:26\n                        \n                    \n\n            \n                \n                    See Client#brokerURL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:81\n                        \n                    \n\n            \n                \n                    See Client#connectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        connectionTimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:41\n                        \n                    \n\n            \n                \n                    See Client#connectionTimeout.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        debug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         debugFnType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:141\n                        \n                    \n\n            \n                \n                    See Client#debug.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        discardWebsocketOnCommFailure\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:146\n                        \n                    \n\n            \n                \n                    See Client#discardWebsocketOnCommFailure.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        disconnectHeaders\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StompHeaders\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:86\n                        \n                    \n\n            \n                \n                    See Client#disconnectHeaders.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        forceBinaryWSFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:66\n                        \n                    \n\n            \n                \n                    See Client#forceBinaryWSFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatIncoming\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:51\n                        \n                    \n\n            \n                \n                    See Client#heartbeatIncoming.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        heartbeatOutgoing\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:56\n                        \n                    \n\n            \n                \n                    See Client#heartbeatOutgoing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        logRawCommunication\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:136\n                        \n                    \n\n            \n                \n                    See Client#logRawCommunication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        maxWebSocketChunkSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:76\n                        \n                    \n\n            \n                \n                    See Client#maxWebSocketChunkSize.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onChangeState\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:151\n                        \n                    \n\n            \n                \n                    See Client#onChangeState.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onConnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:111\n                        \n                    \n\n            \n                \n                    See Client#onConnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onDisconnect\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:116\n                        \n                    \n\n            \n                \n                    See Client#onDisconnect.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onStompError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:121\n                        \n                    \n\n            \n                \n                    See Client#onStompError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:101\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledFrame.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledMessage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         messageCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:91\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledMessage.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onUnhandledReceipt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         frameCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:96\n                        \n                    \n\n            \n                \n                    See Client#onUnhandledReceipt.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketClose\n                        \n                    \n                \n            \n                \n                    \n                        Type :         closeEventCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:126\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketClose.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        onWebSocketError\n                        \n                    \n                \n            \n                \n                    \n                        Type :         wsErrorCallbackType\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:131\n                        \n                    \n\n            \n                \n                    See Client#onWebSocketError.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        reconnectDelay\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:46\n                        \n                    \n\n            \n                \n                    See Client#reconnectDelay.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        splitLargeFrames\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:61\n                        \n                    \n\n            \n                \n                    See Client#splitLargeFrames.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        stompVersions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Versions\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:31\n                        \n                    \n\n            \n                \n                    See See Client#stompVersions.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        webSocketFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-config.ts:36\n                        \n                    \n\n            \n                \n                    See Client#webSocketFactory.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompHeaders } from './stomp-headers';\nimport {\n  ActivationState,\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType,\n} from './types';\nimport { Versions } from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * There used to be a class with the same name in `@stomp/ng2-stompjs`, which has been replaced by\n * {@link RxStompConfig} and {@link InjectableRxStompConfig}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#connectionTimeout]{@link Client#connectionTimeout}.\n   */\n  public connectionTimeout?: number;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void | Promise;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n\n  /**\n   * See [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\n   */\n  public discardWebsocketOnCommFailure?: boolean;\n\n  /**\n   * See [Client#onChangeState]{@link Client#onChangeState}.\n   */\n  public onChangeState?: (state: ActivationState) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as IFrame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders {\n  [key: string]: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you want to manually configure and initialize the service\nplease use StompRService\n\n            \n\n            \n                Extends\n            \n            \n                        StompRService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                    Async\n                                deactivate\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        disconnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    disconnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:147\n\n                \n            \n\n\n            \n                \n                    It will disconnect from the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        initAndConnect\n                        \n                    \n                \n            \n            \n                \n                    \n                    initAndConnect()\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:136\n\n                \n            \n\n\n            \n                \n                    It will connect to the STOMP broker.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        publish\n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:161\n\n                \n            \n\n\n            \n                \n                    It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string | publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        subscribe\n                        \n                    \n                \n            \n            \n                \n                    \n                    subscribe(queueName: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:195\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    queueName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        waitForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         StompRService\n\n                \n            \n            \n                \n                        Defined in         StompRService:230\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.waitForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:278\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:254\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n       const rxStomp = new RxStomp();\n       rxStomp.configure({\n         brokerURL: 'ws://127.0.0.1:15674/ws',\n         connectHeaders: {\n           login: 'guest',\n           passcode: 'guest'\n         },\n         heartbeatIncoming: 0,\n         heartbeatOutgoing: 20000,\n         reconnectDelay: 200,\n         debug: (msg: string): void => {\n           console.log(new Date(), msg);\n         }\n       });\n       rxStomp.activate();Maps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        connected\n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:338\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        deactivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:325\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watch\n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(opts: IWatchParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:451\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, by default, it will resubscribe automatically.\nSee IWatchParams#subscribeOnlyOnce also.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code reads strange with two subscribe calls\nfollowing each other and both meaning very different things.\nThis method has two alternate syntax, use IWatchParams if you need to pass additional options.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    opts\n                                    \n                                                IWatchParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        watchForReceipt\n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:584\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n       // Publishing with acknowledgement\n       let receiptId = randomText();\n\n       rxStomp.watchForReceipt(receiptId, function() {\n         // Will be called after server acknowledges\n       });\n       rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});Maps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         StompRService\n\n                            \n                        \n                    \n                        \n                                Defined in         StompRService:40\n\n                        \n                    \n\n            \n                \n                    State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connected$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:61\n\n                        \n                    \n\n            \n                \n                    Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        connectionState$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:53\n\n                        \n                    \n\n            \n                \n                    Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        serverHeaders$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Observable\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:76\n\n                        \n                    \n\n            \n                \n                    Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        stompErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:131\n\n                        \n                    \n\n            \n                \n                    It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledFrame$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:106\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledMessage$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:93\n\n                        \n                    \n\n            \n                \n                    This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        unhandledReceipts$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:118\n\n                        \n                    \n\n            \n                \n                    STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        webSocketErrors$\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subject\n\n                    \n                \n                        \n                            \n                                Inherited from         RxStomp\n\n                            \n                        \n                    \n                        \n                                Defined in         RxStomp:141\n\n                        \n                    \n\n            \n                \n                    It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompSubscription.html":{"url":"classes/StompSubscription.html","title":"class - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-subscription.ts:12\n                        \n                    \n\n            \n                \n                    Id associated with this subscription.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        unsubscribe\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/stomp-subscription.ts:17\n                        \n                    \n\n            \n                \n                    Unsubscribe. See Client#unsubscribe for an example.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { StompHeaders } from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:27\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_0\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.0'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:10\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.0\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_1\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.1'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:14\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.1\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        V1_2\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '1.2'\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:18\n                        \n                    \n\n            \n                \n                    Indicates protocol version 1.2\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        versions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in consolidated/stompjs/src/versions.ts:35\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        protocolVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    protocolVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:47\n                \n            \n\n\n            \n                \n                    Used while creating a WebSocket\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        supportedVersions\n                        \n                    \n                \n            \n            \n                \n                    \n                    supportedVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:40\n                \n            \n\n\n            \n                \n                    Used as part of CONNECT STOMP Frame\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([\n    Versions.V1_0,\n    Versions.V1_1,\n    Versions.V1_2,\n  ]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {}\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp-r.service.ts\n            \n            injectable\n            StompRService\n            \n                95 %\n                (21/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/compatibility/stomp.service.ts\n            \n            injectable\n            StompService\n            \n                100 %\n                (22/22)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-config.ts\n            \n            injectable\n            InjectableRxStompConfig\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            injectable\n            InjectableRxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n            \n            variable\n            InjectableRxStompRpcConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-rpc.service.ts\n            \n            injectable\n            RxStompRPCService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n            \n            function\n            rxStompServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/app/rx-stomp.service.ts\n            \n            injectable\n            RxStompService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-rx-stomp-publish-params.ts\n            \n            interface\n            IRxStompPublishParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/i-watch-params.ts\n            \n            interface\n            IWatchParams\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            class\n            RxStompConfig\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            class\n            RxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            class\n            RxStompRPC\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            class\n            RxStomp\n            \n                94 %\n                (18/19)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (41/41)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            class\n            CompatClient\n            \n                100 %\n                (44/44)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            class\n            Stomp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-frame.ts\n            \n            interface\n            IFrame\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-message.ts\n            \n            interface\n            IMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-transaction.ts\n            \n            interface\n            ITransaction\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            class\n            StompConfig\n            \n                100 %\n                (27/27)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            class\n            StompHeaders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            class\n            StompSubscription\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            interface\n            IPublishParams\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            class\n            Versions\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ActivationState   (consolidated/.../types.ts)\n                        \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompSocketState   (consolidated/.../types.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        ActivationState\n                    \n                \n                    \n                        \n                            Possible activation state\n\n                        \n                    \n                        \n                            \n                                 ACTIVE\n                            \n                        \n                        \n                            \n                                 DEACTIVATING\n                            \n                        \n                        \n                            \n                                 INACTIVE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        StompSocketState\n                    \n                \n                    \n                        \n                            Possible states for the IStompSocket\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPart of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/app/compatibility/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/rx-stomp-service-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        rxStompServiceFactory\n                        \n                    \n                \n            \n            \n                \nrxStompServiceFactory(rxStompConfig: InjectableRxStompConfig)\n                \n            \n\n\n\n\n            \n                \n                    Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: \nfor a step-by-step guide.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                InjectableRxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RxStompService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNavigating through the API docs\nThese docs correspond to NPM released main line versions. Please see dev docs for development versions.\nThe API docs cover three libraries:\n\n@stomp/stompjs\n@stomp/rx-stomp - builds over @stomp/stompjs\n@stomp/ng2-stompjs - thin wrapper over @stomp/rx-stomp\n\nThe documentation for classes indicate which library each of the classes\nbelong. See the guides for more information and tutorials.\nThese documents have been generated using Compodoc.\nstompjs\nPreferred entry point is Client.\nIf you are using compatibility mode your entry point would be\nStomp.\nrx-stomp\nYour entry point would be RxStomp.\nFor RPC RxStompRPC.\nng2-stompjs\nInjectable versions of rx-stomp classes:\n\nRxStompService for RxStomp\nInjectableRxStompConfig for RxStompConfig\nRxStompRPCService for RxStompRPC\nInjectableRxStompRPCConfig for RxStompRPCConfig\nrxStompServiceFactory\n\nDeprecated classes:\n\nStompRService\nStompService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.1.0\n        \n            Description : Documentation for StompJS family\n        \n            License : Apache-2.0\n        \n            Author : Deepak Kumar\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            Frame   (consolidated/.../i-frame.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            Message   (consolidated/.../i-message.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            publishParams   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                        \n                            wsErrorCallbackType   (consolidated/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    closeEventCallbackType\n                \n            \n            \n                \n                    This callback will receive a [CloseEvent]://developer.mozilla.org/en-US/docs/Web/API/CloseEventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    debugFnType\n                \n            \n            \n                \n                    This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    frameCallbackType\n                \n            \n            \n                \n                    This callback will receive a IFrame as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    messageCallbackType\n                \n            \n            \n                \n                    This callback will receive a IMessage as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    publishParams\n                \n            \n            \n                \n                    Backward compatibility, switch to IPublishParams.\n\n                \n            \n            \n                \n                            IPublishParams\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    wsErrorCallbackType\n                \n            \n            \n                \n                    This callback will receive an [Event]://developer.mozilla.org/en-US/docs/Web/API/Eventhttps\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-frame.ts\n    \n    \n        \n            \n                \n                    \n                    Frame\n                \n            \n            \n                \n                    Alias for IFrame\n\n                \n            \n            \n                \n                            IFrame\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-message.ts\n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                    Aliased to IMessage.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            IMessage\n\n                \n            \n        \n    \n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n    \n        \n            \n                \n                    \n                    setupReplyQueueFnType\n                \n            \n            \n                \n                    See the guide for example\nPart of @stomp/rx-stomp\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InjectableRxStompRpcConfig   (consolidated/.../injectable-rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/app/injectable-rx-stomp-rpc-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        InjectableRxStompRpcConfig\n                        \n                    \n                \n            \n                \n                    \n                        Default value : InjectableRxStompRPCConfig\n                    \n                \n\n            \n                \n                    Deprecated, use InjectableRxStompRPCConfig instead\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
