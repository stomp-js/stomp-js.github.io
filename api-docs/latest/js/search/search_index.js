var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/Frame.html",[0,0.183,1,1.076]],["body/classes/Frame.html",[0,0.252,1,2.098,2,0.225,3,0.225,4,0.19,5,1.642,6,0.225,7,2.5,8,0.255,9,2.5,10,1.346,11,1.96,12,1.671,13,1.811,14,2.146,15,2.5,16,1.329,17,2.146,18,1.863,19,0.342,20,0.583,21,0.897,22,1.214,23,0.261,24,0.98,25,1.305,26,3.801,27,3.384,28,2.146,29,2.709,30,3.334,31,1.253,32,0.664,33,0.041,34,0.664,35,1.994,36,1.291,37,1.994,38,1.811,39,1.51,40,2.5,41,2.919,42,1.994,43,2.279,44,1.882,45,2.5,46,2.5,47,0.992,48,1.994,49,1.994,50,1.828,51,1.994,52,1.994,53,3.615,54,0.626,55,3.676,56,2.5,57,1.642,58,1.41,59,0.531,60,0.225,61,4.423,62,4.659,63,2.213,64,1.994,65,3.749,66,1.994,67,4.11,68,1.994,69,1.994,70,4.993,71,3.126,72,0.797,73,1.642,74,2.742,75,1.994,76,2.734,77,1.41,78,4.11,79,1.994,80,1.098,81,1.41,82,1.41,83,3.027,84,3.036,85,3.676,86,1.994,87,1.642,88,1.994,89,2.888,90,1.994,91,1.994,92,1.642,93,1.994,94,1.41,95,1.994,96,2.5,97,2.146,98,1.642,99,0.589,100,1.994,101,1.994,102,1.994,103,1.994,104,1.994,105,3.676,106,1.821,107,1.994,108,1.994,109,1.994,110,1.994,111,3.036,112,4.11,113,1.994,114,2.5,115,1.236,116,1.994,117,1.994,118,1.994,119,1.994,120,1.994,121,3.036,122,1.994,123,1.994,124,1.994,125,1.994,126,1.994,127,1.642,128,1.994,129,1.41,130,0.589,131,1.994,132,1.994,133,1.994,134,1.994,135,1.994,136,1.994,137,1.994,138,1.994,139,3.036,140,1.994,141,1.994,142,2.599,143,1.994,144,2.262,145,1.994,146,3.676,147,1.994,148,1.994,149,1.994,150,1.994,151,1.994,152,1.994,153,1.994,154,1.994,155,1.994,156,1.994,157,1.994,158,1.994,159,1.994,160,1.994,161,1.994,162,3.036,163,1.994,164,1.994,165,1.994,166,1.994,167,3.036,168,1.994,169,1.236,170,1.994,171,1.994,172,1.994,173,1.994,174,1.994,175,1.994,176,1.994,177,1.994,178,1.994,179,1.994,180,1.994,181,1.994,182,1.994,183,1.994,184,1.994,185,1.994,186,0.02,187,0.02]],["title/interfaces/IPublishParams.html",[188,1.846,189,2.105]],["body/interfaces/IPublishParams.html",[1,2.039,2,0.334,3,0.334,4,0.283,6,0.334,8,0.143,10,2.368,12,2.85,13,1.994,16,1.073,18,1.897,19,0.635,20,1.084,21,1.578,23,0.388,24,1.079,26,2.099,29,2.742,30,3.209,31,1.239,32,0.864,33,0.041,36,1.318,39,0.877,41,2.85,43,2.509,50,0.97,53,3.497,54,0.785,56,3.333,59,1.318,60,0.627,71,3.497,74,2.509,82,2.861,99,0.877,129,2.861,186,0.026,187,0.026,188,2.855,189,2.861,190,2.099,191,1.614,192,3.333,193,1.567,194,3.312,195,2.861,196,4.048,197,1.794,198,3.333,199,3.333,200,2.509,201,3.333,202,1.634,203,2.099,204,1.978,205,2.099,206,2.444,207,2.099,208,2.099,209,2.969,210,2.969,211,2.969,212,2.099,213,2.969,214,2.444,215,2.444,216,4.048,217,2.969,218,2.444,219,2.969]],["title/injectables/InjectableRxStompConfig.html",[220,0.572,221,2.105]],["body/injectables/InjectableRxStompConfig.html",[0,0.317,2,0.423,3,0.423,4,0.358,6,0.423,8,0.26,14,3.339,16,1.707,19,0.532,22,1.503,33,0.04,34,0.709,39,1.395,54,0.805,59,1.377,60,0.423,76,2.328,99,1.601,186,0.031,187,0.031,220,1.134,221,3.339,222,1.358,223,2.656,224,1.666,225,1.666,226,1.889,227,1.544,228,1.395,229,2.527,230,3.889,231,2.929,232,1.041,233,2.094,234,1.041,235,2.601,236,3.339,237,3.339,238,3.339,239,3.832,240,1.889,241,3.36,242,2.094,243,4.724,244,4.463,245,2.601,246,4.724,247,3.339,248,4.724,249,3.339,250,4.724,251,4.724,252,3.889,253,1.852,254,1.11]],["title/injectables/InjectableRxStompRpcConfig.html",[220,0.572,255,1.846]],["body/injectables/InjectableRxStompRpcConfig.html",[0,0.262,2,0.482,3,0.482,4,0.408,6,0.482,8,0.246,19,0.576,22,1.711,33,0.039,54,0.871,59,1.363,60,0.482,186,0.033,187,0.033,220,1.113,222,1.546,223,3.024,224,1.896,225,1.896,226,2.267,227,1.671,228,1.51,234,0.982,240,2.045,253,2.108,254,1.263,255,3.171,256,2.108,257,3.121,258,4.211,259,4.211,260,3.615,261,3.615]],["title/classes/Message.html",[0,0.183,21,0.879]],["body/classes/Message.html",[0,0.268,1,2.121,2,0.374,3,0.374,4,0.316,6,0.374,8,0.209,10,1.47,11,2.158,17,3.082,18,1.864,19,0.491,20,0.837,21,1.744,22,2.069,23,0.434,24,1.378,25,1.417,26,3.657,27,4.01,29,1.634,31,0.938,32,0.806,33,0.04,34,0.806,36,1.432,38,1.634,39,0.98,40,2.731,41,2.4,43,2.056,44,2.056,45,2.731,46,2.731,47,1.084,54,0.743,57,2.731,58,2.345,59,0.884,60,0.374,186,0.028,187,0.028,204,1.743,232,0.993,234,1.059,262,2.731,263,2.148,264,2.4,265,3.082,266,3.443,267,1.629,268,3.899,269,4.541,270,3.317,271,3.207,272,4.259,273,3.657,274,1.87,275,2.549,276,4.36,277,3.317,278,4.36,279,4.87,280,3.317,281,3.317,282,3.317,283,3.317,284,2.345,285,3.317,286,3.317,287,2.345,288,3.317,289,3.317]],["title/classes/RxStomp.html",[0,0.183,290,0.973]],["body/classes/RxStomp.html",[0,0.147,1,1.881,2,0.094,3,0.094,4,0.079,6,0.094,8,0.271,10,1.864,11,0.651,12,2.373,13,2.705,16,1.52,18,1.729,19,0.094,20,0.524,21,1.598,23,0.109,24,0.392,25,1.312,28,1.039,29,2.124,30,1.48,31,0.927,32,0.716,33,0.041,34,0.661,36,0.727,38,0.724,39,0.963,41,0.809,43,1.869,44,0.911,47,0.48,50,1.595,53,1.397,54,0.514,59,0.727,60,0.094,63,1.539,71,1.688,72,1.091,74,0.515,76,1.711,80,1.795,81,0.587,82,1.688,83,1.21,94,1.039,96,1.21,99,1.301,106,2.533,127,0.684,129,2.699,130,1.025,142,1.397,144,0.809,169,1.869,186,0.01,187,0.015,191,1.17,192,1.21,193,0.636,194,2.536,195,1.039,197,1.209,198,3.549,199,2.483,200,2.021,201,1.21,202,0.809,203,2.132,204,1.857,208,3.175,215,0.684,218,2.483,224,0.651,227,0.272,228,0.434,229,1.445,231,0.515,232,0.667,233,1.058,234,0.282,241,0.515,242,1.445,245,1.66,249,1.039,254,0.434,263,1.176,264,1.314,265,1.039,266,1.039,267,0.963,271,2.92,273,2.585,274,1.799,275,2.016,284,0.587,287,0.587,290,1.135,291,1.991,292,1.991,293,0.684,294,1.47,295,2.072,296,1.47,297,2.388,298,2.388,299,3.144,300,1.869,301,2.828,302,2.388,303,2.152,304,1.47,305,1.397,306,1.47,307,1.47,308,1.929,309,1.47,310,1.688,311,1.47,312,0.724,313,2.388,314,2.388,315,2.388,316,2.388,317,2.388,318,2.246,319,2.388,320,2.483,321,2.246,322,1.47,323,1.976,324,0.831,325,0.831,326,3.463,327,2.246,328,1.966,329,1.21,330,1.21,331,1.929,332,2.454,333,1.966,334,1.21,335,1.966,336,1.47,337,2.684,338,0.831,339,2.585,340,1.21,341,2.246,342,1.966,343,1.21,344,1.397,345,0.831,346,1.039,347,1.21,348,2.454,349,2.454,350,2.672,351,3.549,352,0.831,353,1.966,354,1.47,355,1.966,356,1.966,357,1.869,358,2.132,359,1.47,360,1.47,361,3.282,362,1.21,363,0.831,364,2.388,365,1.21,366,1.21,367,1.692,368,2.132,369,1.47,370,1.47,371,2.699,372,2.246,373,0.831,374,2.388,375,3.262,376,1.966,377,1.21,378,1.47,379,1.21,380,0.831,381,1.397,382,1.47,383,1.47,384,1.47,385,1.21,386,2.267,387,2.388,388,1.929,389,1.47,390,1.47,391,0.831,392,1.47,393,1.47,394,1.47,395,1.47,396,1.039,397,1.47,398,1.039,399,1.21,400,2.388,401,1.21,402,1.039,403,1.039,404,1.47,405,1.039,406,1.47,407,1.397,408,1.21,409,1.21,410,1.47,411,1.21,412,0.831,413,2.388,414,0.831,415,1.966,416,1.47,417,1.47,418,2.305,419,1.47,420,1.47,421,1.47,422,1.47,423,2.305,424,0.831,425,2.367,426,1.47,427,1.039,428,1.21,429,1.47,430,2.132,431,1.47,432,1.47,433,1.21,434,1.47,435,1.47,436,0.911,437,1.966,438,1.47,439,1.688,440,1.627,441,1.47,442,1.47,443,1.966,444,1.47,445,1.966,446,2.858,447,2.388,448,1.47,449,1.47,450,3.016,451,2.388,452,1.47,453,1.21,454,2.388,455,1.47,456,1.976,457,1.47,458,2.388,459,1.47,460,1.627,461,2.684,462,1.21,463,1.627,464,1.47,465,0.831,466,1.21,467,0.911,468,1.21,469,1.21,470,1.48,471,1.21,472,1.688,473,1.21,474,1.21,475,1.966,476,1.47,477,1.47,478,1.976,479,1.976,480,1.47,481,1.47,482,1.47,483,1.47,484,1.47,485,1.21,486,1.21,487,1.47,488,1.47,489,1.47,490,0.831,491,1.21,492,1.039,493,1.314,494,1.21,495,1.21,496,1.039,497,1.21,498,1.21,499,1.039,500,2.246,501,1.21,502,1.47,503,1.21,504,0.831,505,0.831,506,1.47,507,1.47,508,1.47,509,1.47,510,1.21,511,0.831,512,0.587,513,1.176,514,1.48,515,0.409,516,1.397,517,1.47,518,1.47,519,1.47,520,0.831,521,3.656,522,0.831,523,0.831,524,1.47,525,1.47,526,0.684,527,0.684,528,0.684,529,0.831,530,0.831,531,1.21,532,0.831,533,1.21,534,0.831,535,0.831,536,1.976,537,0.831,538,0.831,539,0.831,540,1.976,541,1.976,542,1.47,543,0.831,544,0.831,545,1.976,546,0.831,547,0.831,548,0.831,549,1.627,550,1.627,551,2.729,552,1.47,553,0.831,554,0.831,555,0.831,556,0.684,557,0.831,558,0.831,559,0.684,560,1.225,561,0.684,562,1.976,563,0.831,564,0.831,565,1.47,566,0.831,567,0.831,568,0.831,569,0.831,570,0.831,571,0.831,572,0.684,573,0.831,574,0.831,575,0.684,576,0.831,577,0.684,578,1.976,579,0.831,580,0.831,581,0.831,582,0.831,583,1.397,584,1.47,585,0.831,586,0.831,587,0.831,588,0.831,589,0.831,590,0.684,591,0.831,592,0.831,593,0.831,594,0.831,595,0.831,596,0.831,597,1.47,598,1.47,599,1.976,600,0.831,601,0.831,602,0.831,603,0.831,604,0.831,605,0.831,606,0.831,607,0.831,608,0.684,609,0.831,610,0.831,611,1.47,612,0.831,613,0.587,614,0.831,615,1.47,616,0.831,617,0.831,618,0.831,619,0.831,620,1.47,621,0.831,622,0.684,623,0.831,624,0.831,625,0.831,626,1.47,627,0.831,628,0.831,629,0.684,630,0.831,631,0.831,632,0.831,633,0.831,634,0.831,635,0.831,636,0.831,637,1.47,638,0.831,639,0.831,640,0.831,641,0.831,642,0.831,643,0.831,644,0.831,645,0.831,646,0.831,647,0.831,648,0.684,649,0.831,650,0.831,651,0.831,652,0.684,653,0.831,654,0.831,655,0.684,656,0.831,657,0.831,658,0.831]],["title/classes/RxStompConfig.html",[0,0.183,229,1.319]],["body/classes/RxStompConfig.html",[0,0.187,2,0.226,3,0.226,4,0.191,6,0.226,7,2.511,8,0.281,10,1.827,11,1.352,13,2.574,15,2.511,16,1.102,18,1.347,20,0.385,23,0.262,24,0.813,25,1.422,31,0.794,32,0.784,33,0.04,34,0.784,36,1.293,38,2.031,50,1.526,54,0.629,60,0.226,63,2.07,80,2.269,97,2.156,99,1.379,106,2.316,115,2.895,142,3.301,144,2.82,186,0.02,187,0.02,193,1.542,197,1.352,200,3.413,202,2.269,204,0.802,225,0.889,228,1.543,229,1.352,232,1.003,235,1.679,242,1.827,245,2.269,254,0.901,263,1.503,267,1.217,274,1.49,290,1.347,291,2.354,292,2.354,295,1.503,305,2.914,308,2.156,312,1.503,332,2.156,350,1.891,356,2.511,357,1.891,358,2.156,361,4.011,368,2.156,377,2.511,385,1.652,386,1.891,388,2.914,396,2.914,398,2.914,399,2.511,401,2.511,402,2.914,403,2.914,405,2.914,407,3.301,433,2.511,436,1.891,439,2.156,470,1.891,485,3.394,533,2.511,560,1.891,659,3.05,660,3.05,661,3.394,662,3.394,663,3.394,664,2.006,665,3.05,666,3.05,667,2.511,668,2.006,669,2.511,670,1.652,671,2.511,672,3.05,673,3.05,674,2.511,675,4.123,676,3.301,677,2.006,678,3.05,679,3.05,680,3.394,681,3.05,682,3.05,683,2.511,684,2.006,685,3.05,686,2.006,687,2.511,688,2.006,689,3.05,690,4.123,691,4.123,692,4.67,693,4.67,694,3.05,695,1.652,696,3.05,697,2.511,698,2.006,699,3.05,700,3.05,701,2.006,702,2.511,703,3.394,704,3.845,705,3.05,706,3.05,707,2.511,708,2.006,709,2.511,710,3.394,711,3.394,712,3.05,713,3.05,714,2.156,715,2.006,716,3.05,717,2.608,718,1.652,719,1.418,720,1.652,721,1.652,722,1.652,723,2.006,724,1.652]],["title/classes/RxStompRPC.html",[0,0.183,725,1.846]],["body/classes/RxStompRPC.html",[0,0.238,2,0.315,3,0.315,4,0.266,6,0.315,8,0.263,18,1.269,20,0.536,21,1.548,23,0.365,25,1.258,29,1.913,30,2.407,32,0.669,33,0.041,34,0.669,36,1.034,47,1.269,50,1.757,54,0.893,60,0.315,65,3.408,72,1.117,76,2.198,77,3.154,80,1.538,81,1.975,98,2.3,99,1.146,130,1.317,186,0.025,187,0.025,191,1.317,193,1.189,194,1.732,224,1.72,233,1.72,234,1.053,235,2.654,240,1.928,254,1.146,256,2.778,257,2.654,260,3.707,261,3.408,263,1.913,264,2.137,267,1.146,274,1.403,275,1.913,290,1.713,291,2.137,292,2.137,300,1.732,301,3.019,303,2.989,312,1.913,371,3.581,423,3.802,425,1.732,493,2.137,496,2.744,510,2.3,512,1.975,515,1.377,613,2.744,622,2.3,629,2.3,674,2.3,725,2.407,726,2.3,727,5.244,728,2.3,729,3.969,730,2.794,731,1.732,732,3.882,733,2.794,734,4.821,735,3.882,736,2.794,737,1.975,738,2.744,739,4.821,740,4.821,741,2.794,742,2.3,743,2.3,744,3.196,745,2.794,746,2.794,747,2.794,748,2.794,749,3.882,750,3.882,751,3.882,752,2.794,753,2.794,754,2.794,755,2.794,756,3.882,757,2.794,758,2.794,759,2.794,760,3.882,761,4.461,762,2.794,763,2.794,764,2.794,765,2.794,766,2.794,767,2.794,768,2.794,769,2.794,770,2.794]],["title/classes/RxStompRPCConfig.html",[0,0.183,257,1.639]],["body/classes/RxStompRPCConfig.html",[0,0.285,2,0.412,3,0.412,4,0.348,6,0.412,8,0.266,20,0.702,21,1.08,23,0.478,24,1.237,25,1.358,31,1.155,32,0.766,33,0.04,34,0.697,54,0.869,60,0.523,114,3.823,130,1.371,186,0.03,187,0.03,193,1.43,197,2.058,224,1.621,225,1.621,234,1.104,235,2.955,240,2.3,254,1.08,256,2.73,257,2.556,267,1.507,290,1.667,291,2.261,292,2.261,300,2.267,301,2.556,312,1.802,365,3.823,367,3.327,515,2.288,550,3.823,738,3.794,742,3.823,743,3.823,744,4.661,771,5.54,772,5.368,773,3.657,774,4.644,775,3.657]],["title/injectables/RxStompRPCService.html",[220,0.572,776,2.105]],["body/injectables/RxStompRPCService.html",[0,0.245,2,0.449,3,0.449,4,0.38,6,0.449,8,0.266,19,0.552,22,1.596,32,0.599,33,0.039,34,0.599,54,0.943,59,1.307,60,0.449,72,1.596,130,1.178,186,0.032,187,0.032,191,1.178,193,1.414,220,1.111,222,1.772,224,2.173,226,2.214,227,1.602,228,1.448,234,0.942,240,1.961,253,1.966,254,1.178,255,3.433,256,1.966,258,4.037,259,4.037,260,3.466,261,3.466,290,1.304,515,1.966,725,3.433,728,4.037,729,4.559,731,2.474,776,3.466,777,3.04,778,3.286,779,2.454,780,3.991,781,3.991,782,3.991]],["title/injectables/RxStompService.html",[220,0.572,779,1.319]],["body/injectables/RxStompService.html",[0,0.328,2,0.457,3,0.457,4,0.387,6,0.457,8,0.257,19,0.558,22,1.624,33,0.04,54,0.844,59,1.484,60,0.457,186,0.032,187,0.032,220,1.097,222,1.468,226,1.982,227,1.62,228,1.464,230,4.08,231,3.072,232,0.952,233,2.197,234,1.116,235,2.728,236,3.503,237,3.503,238,3.503,239,3.938,240,1.982,253,2.001,254,1.199,290,1.899,777,2.517,779,2.197,783,3.343,784,3.072]],["title/classes/Stomp.html",[0,0.183,8,0.143]],["body/classes/Stomp.html",[0,0.319,2,0.258,3,0.258,4,0.218,6,0.258,8,0.25,11,1.492,16,1.591,19,0.379,20,0.646,23,0.299,24,0.897,25,0.958,31,1.055,32,0.599,33,0.041,34,0.599,39,0.676,47,1.439,50,1.735,54,0.574,59,1.25,60,0.258,63,2.353,76,1.967,80,1.853,89,3.292,94,2.38,97,3.316,99,1.666,106,1.492,115,3.433,130,1.179,186,0.022,187,0.022,191,0.994,193,0.897,197,1.015,227,1.1,228,1.594,232,0.999,233,2.306,234,0.44,247,2.38,263,2.169,267,0.994,274,1.217,275,2.498,295,2.865,344,2.38,348,2.38,350,2.729,418,3.112,427,3.467,428,2.772,430,2.822,436,2.087,443,3.287,453,4.039,560,2.475,608,4.372,613,1.618,671,3.862,676,2.38,709,2.772,710,2.772,714,3.112,717,1.618,719,2.38,731,1.419,785,1.885,786,3.367,787,3.292,788,5.203,789,5.203,790,5.203,791,4.402,792,3.367,793,2.289,794,3.367,795,2.772,796,3.367,797,3.367,798,3.367,799,3.367,800,4.402,801,3.367,802,3.367,803,2.289,804,3.367,805,3.367,806,3.367,807,3.862,808,3.367,809,2.289,810,4.402,811,3.367,812,3.993,813,3.367,814,3.367,815,3.367,816,3.367,817,3.367,818,3.367,819,3.367,820,4.402,821,3.367,822,3.367,823,3.993,824,2.289,825,2.289,826,2.289,827,3.367,828,3.367,829,1.885,830,2.289,831,2.289,832,2.289,833,3.367,834,2.289,835,2.289,836,2.289,837,3.367,838,2.289,839,2.289,840,3.367,841,2.289,842,2.289]],["title/classes/StompConfig.html",[0,0.183,513,1.467]],["body/classes/StompConfig.html",[0,0.211,2,0.265,3,0.265,4,0.224,6,0.265,8,0.195,11,1.523,18,0.769,19,0.387,20,0.66,23,0.308,24,0.916,25,1.476,31,0.873,32,0.872,33,0.04,34,0.867,36,1.363,38,1.693,54,0.691,59,0.916,60,0.265,72,1.374,130,1.015,144,2.944,186,0.022,187,0.022,193,1.618,202,2.456,204,0.941,205,3.154,207,4.063,212,3.154,225,1.043,228,1.401,231,2.13,232,0.857,234,1.166,241,2.13,242,1.523,265,2.429,284,1.664,295,2.441,305,3.154,349,2.429,362,2.829,379,2.829,396,3.154,398,3.154,402,3.154,403,3.154,405,3.154,407,3.154,411,2.829,499,2.429,513,1.693,526,1.938,527,1.938,561,1.938,572,3.673,575,3.673,577,3.673,661,3.673,662,3.673,663,3.673,669,2.829,670,1.938,676,2.429,683,2.829,687,2.829,695,1.938,697,2.829,707,2.829,714,2.429,717,1.664,718,1.938,719,1.664,720,1.938,721,1.938,722,1.938,724,1.938,843,3.602,844,4.462,845,4.462,846,4.462,847,4.462,848,2.354,849,2.354,850,2.354,851,3.436,852,2.354,853,2.354,854,3.436,855,2.354,856,3.436,857,2.354,858,3.436,859,2.354,860,2.354,861,3.436,862,2.354,863,2.354,864,2.354,865,3.436,866,2.354,867,3.436,868,2.354,869,2.354,870,2.354,871,2.354,872,2.354,873,2.354,874,2.354,875,2.354,876,2.354]],["title/classes/StompHeaders.html",[0,0.183,36,0.793]],["body/classes/StompHeaders.html",[0,0.319,2,0.494,3,0.494,4,0.418,6,0.494,8,0.211,9,3.615,13,2.164,18,1.808,19,0.494,20,0.843,23,0.574,31,1.255,33,0.038,34,0.659,36,1.384,38,2.817,39,1.297,58,3.104,60,0.494,73,3.615,169,2.722,186,0.034,187,0.034,191,1.297,232,0.843,274,1.587,667,3.615,843,3.22,877,3.615,878,4.391,879,4.391,880,4.391,881,4.391,882,4.391,883,4.391]],["title/injectables/StompRService.html",[220,0.572,884,1.846]],["body/injectables/StompRService.html",[0,0.226,1,1.725,2,0.154,3,0.154,4,0.13,6,0.154,8,0.267,10,2.005,11,1.852,12,1.239,13,2.605,14,1.591,16,1.578,18,1.793,19,0.253,20,0.263,21,1.63,22,0.547,23,0.179,24,0.886,25,1.308,28,1.591,29,1.413,31,1.126,32,0.499,33,0.04,34,0.757,36,1.114,39,1.489,44,1.395,47,0.736,50,1.83,54,0.744,59,0.6,60,0.154,63,0.606,65,0.967,72,1.147,76,1.109,77,2.598,87,1.853,89,0.848,92,1.853,99,1.529,106,2.417,130,1.167,144,1.239,169,1.395,186,0.015,187,0.022,191,1.167,193,0.886,194,1.395,195,1.591,197,1.474,200,2.591,203,1.591,204,1.95,208,3.66,220,0.551,222,1.848,226,1.33,227,0.736,229,1.271,232,0.551,233,1.474,241,1.395,242,1.629,245,1.83,249,1.591,253,0.674,254,0.404,264,1.83,267,0.665,268,2.35,271,2.451,273,3.087,274,1.202,275,2.151,290,0.736,295,1.948,299,3.255,300,0.848,301,2.628,303,1.395,310,2.795,320,3.255,321,1.853,326,4.014,327,2.737,328,1.853,329,1.853,330,2.737,331,2.35,332,2.795,333,2.737,334,1.853,335,1.853,337,3.255,339,2.954,340,3.255,341,2.737,342,2.737,343,1.853,344,2.35,346,1.591,347,2.737,348,3.087,349,1.591,350,2.591,351,3.725,353,2.737,357,2.061,361,2.028,366,1.853,367,2.888,368,1.591,371,3.087,375,3.255,376,1.853,381,1.591,386,2.591,388,2.028,408,1.126,409,1.126,415,2.362,418,2.35,423,2.35,425,2.061,430,2.35,437,2.737,439,1.591,445,1.853,446,1.853,460,1.853,461,2.737,462,1.853,463,1.853,466,1.853,467,2.061,468,1.853,469,1.853,470,1.395,471,1.853,472,2.35,473,1.853,474,1.853,475,2.737,486,1.853,491,2.737,492,2.35,493,1.83,494,1.853,495,1.853,496,1.591,497,1.853,498,1.853,499,1.591,500,3.026,501,1.853,503,1.853,512,0.967,513,1.109,515,1.413,516,2.35,531,1.126,549,1.126,556,1.126,559,1.126,560,0.848,583,2.028,590,1.126,648,1.126,652,1.126,655,1.126,711,1.126,731,0.848,737,1.591,779,0.998,787,1.395,884,1.395,885,3.615,886,1.126,887,1.591,888,1.591,889,1.83,890,1.853,891,2.251,892,2.251,893,1.853,894,1.853,895,1.853,896,1.853,897,1.395,898,2.061,899,3.325,900,2.251,901,2.869,902,2.869,903,2.869,904,2.869,905,2.869,906,1.368,907,1.368,908,1.368,909,2.251,910,1.368,911,4.18,912,2.251,913,1.368,914,2.251,915,2.251,916,2.251,917,2.251,918,2.251,919,1.368,920,2.251,921,2.251,922,1.368,923,1.368,924,1.368,925,2.869,926,1.368,927,1.368,928,2.251,929,2.251,930,2.251,931,1.368,932,1.368,933,1.368,934,1.368,935,1.368,936,1.368,937,1.368,938,1.368,939,1.368,940,1.368,941,1.126,942,1.368,943,3.325,944,1.368,945,2.251,946,1.368,947,1.368,948,1.368,949,1.368,950,1.368,951,1.368,952,1.368,953,2.251,954,1.368,955,1.368,956,1.368,957,1.368,958,1.368,959,1.368,960,1.368,961,1.368,962,1.368,963,1.368,964,1.368,965,1.368,966,1.368,967,2.251,968,1.368,969,1.368,970,1.368,971,1.368,972,1.368,973,1.368,974,1.368,975,1.368,976,1.126,977,1.368,978,1.368,979,1.368,980,1.368]],["title/injectables/StompService.html",[220,0.572,898,1.846]],["body/injectables/StompService.html",[0,0.313,2,0.411,3,0.411,4,0.348,6,0.522,8,0.258,19,0.522,21,1.37,22,1.46,25,1.113,32,0.548,33,0.04,34,0.548,39,1.37,50,1.193,54,0.869,59,1.236,60,0.411,72,2.039,99,1.584,130,1.078,186,0.03,187,0.03,191,1.078,193,0.973,220,0.979,222,1.677,226,2.145,227,1.516,233,1.618,234,0.891,242,2.26,253,1.799,267,1.506,271,2.264,272,3.006,301,2.554,303,2.264,310,2.581,357,2.264,367,2.264,381,2.581,467,2.876,472,2.581,492,2.581,513,2.643,515,2.286,737,3.279,779,2.056,784,2.876,787,2.876,884,3.161,887,3.279,888,3.279,889,2.953,890,3.819,893,3.006,894,3.006,895,3.006,896,3.006,898,2.876,941,3.006,976,3.006,981,3.006,982,4.639,983,3.652,984,4.639,985,4.639,986,3.652,987,3.006,988,3.652,989,3.652]],["title/classes/StompSubscription.html",[0,0.183,514,1.846]],["body/classes/StompSubscription.html",[0,0.304,2,0.456,3,0.456,4,0.386,6,0.456,8,0.195,18,1.618,19,0.557,20,0.951,23,0.53,24,1.319,25,1.393,31,1.15,32,0.743,33,0.04,34,0.743,36,1.319,47,1.618,54,0.691,60,0.456,186,0.032,187,0.032,204,1.621,232,0.951,234,0.951,264,2.725,266,3.5,267,1.462,274,1.789,287,2.865,372,4.782,493,3.197,514,3.451,843,3.314,990,3.337,991,4.054,992,4.951,993,4.054,994,4.951,995,4.054]],["title/classes/Transaction.html",[0,0.183,996,2.105]],["body/classes/Transaction.html",[0,0.296,2,0.439,3,0.439,4,0.371,6,0.439,16,1.746,17,3.416,19,0.439,20,0.748,23,0.51,24,1.288,25,1.425,31,1.13,32,0.788,33,0.04,34,0.788,47,1.273,60,0.439,186,0.031,187,0.031,204,1.932,232,1.054,234,1.054,267,1.667,268,3.416,269,3.978,274,1.408,425,2.996,493,3.023,795,3.978,996,4.2,997,3.208,998,3.897,999,3.897,1000,3.897,1001,5.753,1002,5.753,1003,3.897,1004,4.832,1005,3.897,1006,4.832,1007,3.897,1008,3.897,1009,3.897]],["title/classes/Versions.html",[0,0.183,228,0.879]],["body/classes/Versions.html",[0,0.311,1,1.526,2,0.356,3,0.356,4,0.301,6,0.356,8,0.261,19,0.535,20,0.607,23,0.413,24,1.125,25,1.406,31,1.269,32,0.793,33,0.04,34,0.833,39,1.404,47,1.379,50,1.658,60,0.356,63,1.4,72,1.263,74,1.958,89,3.579,99,1.498,106,1.871,115,2.617,130,0.933,186,0.027,187,0.027,191,0.933,193,0.842,197,2.249,228,1.778,245,2.324,263,2.08,275,2.08,427,3.846,436,2.947,440,4.479,470,2.617,528,3.475,680,4.479,702,3.475,703,4.479,704,4.479,987,3.475,1010,2.601,1011,5.074,1012,5.074,1013,5.074,1014,5.074,1015,5.074,1016,3.159,1017,3.159,1018,4.221,1019,4.221,1020,4.221,1021,4.221,1022,3.159,1023,3.159,1024,3.159,1025,3.159,1026,3.159,1027,3.159,1028,3.159,1029,3.159,1030,3.159,1031,3.159,1032,3.159,1033,3.159,1034,3.159]],["title/coverage.html",[1035,3.339]],["body/coverage.html",[0,0.369,1,1.274,4,0.336,5,2.901,8,0.278,21,1.041,32,0.529,33,0.04,36,0.939,63,1.562,186,0.029,187,0.029,188,2.185,189,2.491,190,2.491,220,1.077,221,2.491,222,2.061,223,3.206,224,2.01,225,2.428,228,1.041,229,1.562,232,0.677,255,2.185,256,2.234,257,1.94,262,2.901,290,1.152,291,2.346,292,2.346,293,2.901,295,1.736,358,2.491,513,1.736,514,2.185,725,2.185,726,2.901,776,2.491,777,3.108,778,2.901,779,1.562,783,2.901,784,2.185,785,2.901,807,2.901,843,3.108,877,2.901,884,2.185,885,2.491,886,2.901,889,1.94,898,2.185,981,2.901,990,2.901,996,2.491,997,2.901,1010,2.901,1035,2.901,1036,3.524,1037,3.524,1038,6.101,1039,5.478,1040,3.524,1041,3.524,1042,2.901,1043,4.535,1044,4.535,1045,3.524,1046,3.524,1047,4.535,1048,5.294,1049,3.524,1050,3.524,1051,3.524,1052,3.524,1053,3.524,1054,3.524,1055,4.535,1056,3.524,1057,3.524,1058,3.524]],["title/dependencies.html",[897,2.219,1059,2.49]],["body/dependencies.html",[33,0.037,186,0.035,187,0.035,897,2.97,1060,4.79,1061,4.79]],["title/miscellaneous/enumerations.html",[1062,1.227,1063,2.946]],["body/miscellaneous/enumerations.html",[0,0.27,8,0.275,19,0.495,23,0.575,33,0.034,106,2.305,186,0.034,187,0.034,222,1.59,226,2.08,227,1.438,254,1.299,290,1.438,291,1.95,292,1.95,308,3.11,312,2.168,339,3.676,355,4.558,386,2.727,467,2.727,516,3.914,583,3.676,787,2.727,829,4.282,885,3.11,887,3.11,888,3.11,889,2.422,1062,2.168,1063,3.622,1064,3.11,1065,5.722,1066,4.4,1067,4.4]],["title/miscellaneous/functions.html",[232,0.687,1062,1.227]],["body/miscellaneous/functions.html",[8,0.264,19,0.487,23,0.566,33,0.036,34,0.772,47,1.682,99,1.52,130,1.277,186,0.033,187,0.033,191,1.277,193,1.153,220,0.831,222,1.563,226,1.73,227,1.414,229,1.917,232,1.093,234,0.831,236,3.058,237,3.058,238,3.058,239,3.64,240,1.73,242,2.282,244,3.561,247,3.058,252,3.561,318,3.561,331,3.058,346,3.64,777,2.682,779,2.522,784,3.192,889,2.834,897,2.682,1042,4.239,1062,2.131,1064,3.058,1068,4.326,1069,4.326]],["title/index.html",[23,0.389,1070,2.451]],["body/index.html",[0,0.292,33,0.035,186,0.035,187,0.035,188,2.951,220,0.914,1070,3.919,1071,4.761,1072,4.761,1073,4.761]],["title/modules.html",[1074,3.339]],["body/modules.html",[33,0.035,186,0.035,187,0.035,1074,3.968]],["title/miscellaneous/typealiases.html",[1062,1.227,1075,3.579]],["body/miscellaneous/typealiases.html",[1,1.486,8,0.258,10,2.583,12,3.155,16,1.486,19,0.645,20,1.101,21,1.475,23,0.538,31,0.884,32,0.617,33,0.032,39,1.214,41,2.263,50,1.343,186,0.032,187,0.032,190,2.906,191,1.693,202,2.961,205,3.802,206,4.428,207,3.802,212,3.802,214,3.385,225,2.213,232,1.119,234,0.789,240,1.644,254,1.214,256,2.46,267,1.214,291,1.822,292,1.822,312,2.025,738,3.802,1062,2.025,1064,2.906,1076,4.111,1077,5.732]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":142,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["1",{"_index":1073,"title":{},"body":{"index.html":{}}}],["1.0",{"_index":703,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":704,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1.6",{"_index":1061,"title":{},"body":{"dependencies.html":{}}}],["1.2",{"_index":680,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1039,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1041,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1038,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1072,"title":{},"body":{"index.html":{}}}],["15/15",{"_index":1049,"title":{},"body":{"coverage.html":{}}}],["18/18",{"_index":1056,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":406,"title":{},"body":{"classes/RxStomp.html":{}}}],["20000",{"_index":404,"title":{},"body":{"classes/RxStomp.html":{}}}],["3/3",{"_index":1047,"title":{},"body":{"coverage.html":{}}}],["32/32",{"_index":1051,"title":{},"body":{"coverage.html":{}}}],["35/35",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1048,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1071,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":150,"title":{},"body":{"classes/Frame.html":{}}}],["87",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":449,"title":{},"body":{"classes/RxStomp.html":{}}}],["_beforeconnect",{"_index":534,"title":{},"body":{"classes/RxStomp.html":{}}}],["_binarybodi",{"_index":69,"title":{},"body":{"classes/Frame.html":{}}}],["_bodi",{"_index":66,"title":{},"body":{"classes/Frame.html":{}}}],["_changestate(st",{"_index":657,"title":{},"body":{"classes/RxStomp.html":{}}}],["_debug",{"_index":537,"title":{},"body":{"classes/RxStomp.html":{}}}],["_mapstompstate(st",{"_index":942,"title":{},"body":{"injectables/StompRService.html":{}}}],["_queuedmessag",{"_index":530,"title":{},"body":{"classes/RxStomp.html":{}}}],["_repliesobserv",{"_index":747,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuenam",{"_index":741,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_sendqueuedmessag",{"_index":596,"title":{},"body":{"classes/RxStomp.html":{}}}],["_serverheadersbehavioursubject",{"_index":522,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupreplyqueu",{"_index":745,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupunhandledmessag",{"_index":647,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupunhandledreceipt",{"_index":651,"title":{},"body":{"classes/RxStomp.html":{}}}],["_stompclient",{"_index":532,"title":{},"body":{"classes/RxStomp.html":{}}}],["abort",{"_index":1001,"title":{},"body":{"classes/Transaction.html":{}}}],["accept",{"_index":878,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":17,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/Transaction.html":{}}}],["accessor",{"_index":28,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ack",{"_index":268,"title":{},"body":{"classes/Message.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{}}}],["acknowledg",{"_index":273,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["act",{"_index":786,"title":{},"body":{"classes/Stomp.html":{}}}],["activ",{"_index":318,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/functions.html":{}}}],["activemq",{"_index":774,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["actual",{"_index":375,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ad",{"_index":199,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["add",{"_index":393,"title":{},"body":{"classes/RxStomp.html":{}}}],["addit",{"_index":879,"title":{},"body":{"classes/StompHeaders.html":{}}}],["addition",{"_index":928,"title":{},"body":{"injectables/StompRService.html":{}}}],["advanc",{"_index":14,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/StompRService.html":{}}}],["alias",{"_index":1076,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":430,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["alreadi",{"_index":331,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["altern",{"_index":810,"title":{},"body":{"classes/Stomp.html":{}}}],["alway",{"_index":335,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["angular'",{"_index":250,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/cor",{"_index":253,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":737,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular7.html",{"_index":238,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["anoth",{"_index":828,"title":{},"body":{"classes/Stomp.html":{}}}],["any).assign",{"_index":81,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["app_initi",{"_index":251,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["application/octet",{"_index":459,"title":{},"body":{"classes/RxStomp.html":{}}}],["appropri",{"_index":417,"title":{},"body":{"classes/RxStomp.html":{}}}],["array",{"_index":528,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["arraybuff",{"_index":119,"title":{},"body":{"classes/Frame.html":{}}}],["articl",{"_index":641,"title":{},"body":{"classes/RxStomp.html":{}}}],["assign",{"_index":535,"title":{},"body":{"classes/RxStomp.html":{}}}],["associ",{"_index":992,"title":{},"body":{"classes/StompSubscription.html":{}}}],["asynchron",{"_index":492,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":388,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["attribut",{"_index":660,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["auto",{"_index":415,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["automat",{"_index":439,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["avail",{"_index":73,"title":{},"body":{"classes/Frame.html":{},"classes/StompHeaders.html":{}}}],["base",{"_index":44,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["beat",{"_index":955,"title":{},"body":{"injectables/StompRService.html":{}}}],["beautifulli",{"_index":605,"title":{},"body":{"classes/RxStomp.html":{}}}],["befor",{"_index":533,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":305,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":360,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject",{"_index":337,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["behaviorsubject(nul",{"_index":555,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(rxstompstate.clos",{"_index":544,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(stompstate.clos",{"_index":978,"title":{},"body":{"injectables/StompRService.html":{}}}],["behavioursubject",{"_index":615,"title":{},"body":{"classes/RxStomp.html":{}}}],["better",{"_index":588,"title":{},"body":{"classes/RxStomp.html":{}}}],["binari",{"_index":43,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{}}}],["binarybodi",{"_index":30,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["binarybody.length",{"_index":146,"title":{},"body":{"classes/Frame.html":{}}}],["binarydata",{"_index":454,"title":{},"body":{"classes/RxStomp.html":{}}}],["bit",{"_index":585,"title":{},"body":{"classes/RxStomp.html":{}}}],["bodi",{"_index":29,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["body/binarybodi",{"_index":46,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["body]{@link",{"_index":285,"title":{},"body":{"classes/Message.html":{}}}],["bodylength",{"_index":143,"title":{},"body":{"classes/Frame.html":{}}}],["boolean",{"_index":41,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"miscellaneous/typealiases.html":{}}}],["both",{"_index":485,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["box",{"_index":438,"title":{},"body":{"classes/RxStomp.html":{}}}],["break",{"_index":382,"title":{},"body":{"classes/RxStomp.html":{}}}],["broker",{"_index":13,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["brokerurl",{"_index":396,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["byte",{"_index":55,"title":{},"body":{"classes/Frame.html":{}}}],["byte.lf",{"_index":139,"title":{},"body":{"classes/Frame.html":{}}}],["byte.nul",{"_index":124,"title":{},"body":{"classes/Frame.html":{}}}],["c",{"_index":179,"title":{},"body":{"classes/Frame.html":{}}}],["call",{"_index":274,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["call.html",{"_index":261,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callabl",{"_index":815,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":10,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":283,"title":{},"body":{"classes/Message.html":{}}}],["caller",{"_index":616,"title":{},"body":{"classes/RxStomp.html":{}}}],["care",{"_index":506,"title":{},"body":{"classes/RxStomp.html":{}}}],["carri",{"_index":491,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["case",{"_index":94,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["caution",{"_index":441,"title":{},"body":{"classes/RxStomp.html":{}}}],["caveat",{"_index":1000,"title":{},"body":{"classes/Transaction.html":{}}}],["chang",{"_index":665,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["charact",{"_index":152,"title":{},"body":{"classes/Frame.html":{}}}],["check",{"_index":356,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["class",{"_index":0,"title":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["classes/frame.html",{"_index":525,"title":{},"body":{"classes/RxStomp.html":{}}}],["cleanup",{"_index":629,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["client",{"_index":295,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{}}}],["client#abort",{"_index":1004,"title":{},"body":{"classes/Transaction.html":{}}}],["client#abort]{@link",{"_index":1009,"title":{},"body":{"classes/Transaction.html":{}}}],["client#ack",{"_index":276,"title":{},"body":{"classes/Message.html":{}}}],["client#ack]{@link",{"_index":288,"title":{},"body":{"classes/Message.html":{}}}],["client#activ",{"_index":389,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#activate]{@link",{"_index":568,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#beforeconnect",{"_index":669,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":724,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":998,"title":{},"body":{"classes/Transaction.html":{}}}],["client#brokerurl",{"_index":676,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":717,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":1006,"title":{},"body":{"classes/Transaction.html":{}}}],["client#commit]{@link",{"_index":1008,"title":{},"body":{"classes/Transaction.html":{}}}],["client#configur",{"_index":411,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#configure]{@link",{"_index":561,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#connecthead",{"_index":683,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":721,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactiv",{"_index":421,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#deactivate]{@link",{"_index":581,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#debug",{"_index":851,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":876,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#disconnecthead",{"_index":687,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":722,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincom",{"_index":854,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@client#heartbeatincom",{"_index":694,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":871,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatoutgo",{"_index":697,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":720,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":278,"title":{},"body":{"classes/Message.html":{}}}],["client#nack]{@link",{"_index":289,"title":{},"body":{"classes/Message.html":{}}}],["client#onconnect",{"_index":856,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":873,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":858,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":874,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":362,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onstomperror]{@link",{"_index":527,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledfram",{"_index":861,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe]{@link",{"_index":872,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessag",{"_index":265,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledmessage]{@link",{"_index":284,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":379,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":526,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onwebsocketclos",{"_index":865,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":875,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":192,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["client#publish]{@link",{"_index":215,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["client#reconnectdelay",{"_index":867,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@client#reconnectdelay",{"_index":700,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":870,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#stompvers",{"_index":707,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":718,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscrib",{"_index":266,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":287,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#unsubscrib",{"_index":994,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":995,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":503,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#watchforreceipt]{@link",{"_index":655,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#websocketfactori",{"_index":714,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":719,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":802,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":814,"title":{},"body":{"classes/Stomp.html":{}}}],["client.t",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["client]{@link",{"_index":520,"title":{},"body":{"classes/RxStomp.html":{}}}],["close",{"_index":355,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["closeev",{"_index":214,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":209,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktyp",{"_index":212,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closur",{"_index":624,"title":{},"body":{"classes/RxStomp.html":{}}}],["cmdandhead",{"_index":121,"title":{},"body":{"classes/Frame.html":{}}}],["code",{"_index":479,"title":{},"body":{"classes/RxStomp.html":{}}}],["cold",{"_index":644,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobserv",{"_index":621,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobservable.pipe(shar",{"_index":646,"title":{},"body":{"classes/RxStomp.html":{}}}],["combin",{"_index":249,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["command",{"_index":26,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{}}}],["commit",{"_index":1002,"title":{},"body":{"classes/Transaction.html":{}}}],["compat",{"_index":824,"title":{},"body":{"classes/Stomp.html":{}}}],["compatcli",{"_index":807,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":840,"title":{},"body":{"classes/Stomp.html":{}}}],["complaint",{"_index":498,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["complet",{"_index":376,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["compliant",{"_index":354,"title":{},"body":{"classes/RxStomp.html":{}}}],["complic",{"_index":604,"title":{},"body":{"classes/RxStomp.html":{}}}],["compodoc/compodoc",{"_index":1060,"title":{},"body":{"dependencies.html":{}}}],["compos",{"_index":153,"title":{},"body":{"classes/Frame.html":{}}}],["comput",{"_index":147,"title":{},"body":{"classes/Frame.html":{}}}],["config",{"_index":515,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["config(config",{"_index":950,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.debug",{"_index":962,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.head",{"_index":965,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_in",{"_index":957,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_out",{"_index":959,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.reconnect_delay",{"_index":961,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.t",{"_index":225,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.ts:101",{"_index":850,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:107",{"_index":664,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:20",{"_index":773,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:21",{"_index":670,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:24",{"_index":775,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:26",{"_index":868,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:31",{"_index":869,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:34",{"_index":701,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:36",{"_index":866,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:37",{"_index":684,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:41",{"_index":853,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:46",{"_index":855,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:51",{"_index":849,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:56",{"_index":852,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:60",{"_index":708,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:61",{"_index":862,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:66",{"_index":863,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:67",{"_index":698,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:71",{"_index":860,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:74",{"_index":688,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:76",{"_index":848,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:81",{"_index":695,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:86",{"_index":857,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:90",{"_index":677,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:91",{"_index":859,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:96",{"_index":864,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:97",{"_index":686,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.url",{"_index":953,"title":{},"body":{"injectables/StompRService.html":{}}}],["configur",{"_index":242,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure(rxstompconfig",{"_index":390,"title":{},"body":{"classes/RxStomp.html":{}}}],["connect",{"_index":106,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{}}}],["connecthead",{"_index":398,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["connectionst",{"_index":313,"title":{},"body":{"classes/RxStomp.html":{}}}],["connectobserv",{"_index":901,"title":{},"body":{"injectables/StompRService.html":{}}}],["consequ",{"_index":509,"title":{},"body":{"classes/RxStomp.html":{}}}],["console.log(new",{"_index":408,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["consolidated/.../rx",{"_index":1064,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1066,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.t",{"_index":1077,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":222,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["consolidated/rx",{"_index":291,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.t",{"_index":1050,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.t",{"_index":785,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:32",{"_index":793,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:48",{"_index":803,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:92",{"_index":809,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/frame.t",{"_index":5,"title":{},"body":{"classes/Frame.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/frame.ts:17",{"_index":35,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:22",{"_index":37,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:27",{"_index":42,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:32",{"_index":49,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/frame.ts:43",{"_index":52,"title":{},"body":{"classes/Frame.html":{}}}],["consolidated/stompjs/src/message.t",{"_index":262,"title":{},"body":{"classes/Message.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/message.ts:20",{"_index":270,"title":{},"body":{"classes/Message.html":{}}}],["consolidated/stompjs/src/message.ts:27",{"_index":277,"title":{},"body":{"classes/Message.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":843,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/transaction.t",{"_index":997,"title":{},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/transaction.ts:12",{"_index":1007,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/transaction.ts:17",{"_index":1005,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/transaction.ts:22",{"_index":1003,"title":{},"body":{"classes/Transaction.html":{}}}],["consolidated/stompjs/src/types.t",{"_index":190,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.t",{"_index":1010,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":1022,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":1023,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":1024,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:23",{"_index":1017,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:31",{"_index":1025,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:37",{"_index":1027,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:44",{"_index":1026,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":76,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["constructor",{"_index":72,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":982,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(param",{"_index":75,"title":{},"body":{"classes/Frame.html":{}}}],["constructor(priv",{"_index":748,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["constructor(publ",{"_index":1031,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":728,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(vers",{"_index":1016,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":880,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":198,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["convert",{"_index":635,"title":{},"body":{"classes/RxStomp.html":{}}}],["correlationid",{"_index":761,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":499,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["count",{"_index":151,"title":{},"body":{"classes/Frame.html":{}}}],["coverag",{"_index":1035,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":431,"title":{},"body":{"classes/RxStomp.html":{}}}],["cr",{"_index":881,"title":{},"body":{"classes/StompHeaders.html":{}}}],["creat",{"_index":47,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":341,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["currentst",{"_index":548,"title":{},"body":{"classes/RxStomp.html":{}}}],["data",{"_index":88,"title":{},"body":{"classes/Frame.html":{}}}],["date",{"_index":409,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["deactiv",{"_index":319,"title":{},"body":{"classes/RxStomp.html":{}}}],["debug",{"_index":407,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["debugfntyp",{"_index":202,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["declar",{"_index":1021,"title":{},"body":{"classes/Versions.html":{}}}],["default",{"_index":197,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["defaultmessagesobserv",{"_index":903,"title":{},"body":{"injectables/StompRService.html":{}}}],["defaultmessagessubscript",{"_index":760,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscrib",{"_index":770,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defin",{"_index":34,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["delay",{"_index":699,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["delet",{"_index":127,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["depend",{"_index":897,"title":{"dependencies.html":{}},"body":{"injectables/StompRService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["deprec",{"_index":787,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["deseri",{"_index":86,"title":{},"body":{"classes/Frame.html":{}}}],["design",{"_index":474,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["destin",{"_index":194,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["detail",{"_index":235,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["differ",{"_index":297,"title":{},"body":{"classes/RxStomp.html":{}}}],["directli",{"_index":507,"title":{},"body":{"classes/RxStomp.html":{}}}],["disabl",{"_index":693,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["disconnect",{"_index":386,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["disconnecthead",{"_index":661,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["document",{"_index":358,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"coverage.html":{}}}],["documentation/rpc",{"_index":740,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["drop",{"_index":467,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["dure",{"_index":470,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":433,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["each",{"_index":349,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["earlier",{"_index":476,"title":{},"body":{"classes/RxStomp.html":{}}}],["element",{"_index":1019,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":340,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["enabl",{"_index":685,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["end",{"_index":195,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["endpoint",{"_index":302,"title":{},"body":{"classes/RxStomp.html":{}}}],["enumer",{"_index":1063,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":797,"title":{},"body":{"classes/Stomp.html":{}}}],["error",{"_index":353,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["errorsubject",{"_index":905,"title":{},"body":{"injectables/StompRService.html":{}}}],["es6",{"_index":895,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["escap",{"_index":173,"title":{},"body":{"classes/Frame.html":{}}}],["escapeheadervalu",{"_index":70,"title":{},"body":{"classes/Frame.html":{}}}],["establish",{"_index":327,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["even",{"_index":466,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["event",{"_index":929,"title":{},"body":{"injectables/StompRService.html":{}}}],["evt",{"_index":213,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["exact",{"_index":359,"title":{},"body":{"classes/RxStomp.html":{}}}],["exactli",{"_index":230,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["exampl",{"_index":267,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"miscellaneous/typealiases.html":{}}}],["except",{"_index":304,"title":{},"body":{"classes/RxStomp.html":{}}}],["exist",{"_index":394,"title":{},"body":{"classes/RxStomp.html":{}}}],["explanatori",{"_index":640,"title":{},"body":{"classes/RxStomp.html":{}}}],["explicitli",{"_index":914,"title":{},"body":{"injectables/StompRService.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["expos",{"_index":298,"title":{},"body":{"classes/RxStomp.html":{}}}],["extend",{"_index":22,"title":{},"body":{"classes/Frame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["f8094ed53339",{"_index":645,"title":{},"body":{"classes/RxStomp.html":{}}}],["factori",{"_index":247,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.t",{"_index":1042,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["failur",{"_index":311,"title":{},"body":{"classes/RxStomp.html":{}}}],["fals",{"_index":83,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["favor",{"_index":887,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":241,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":510,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["filter((currentst",{"_index":547,"title":{},"body":{"classes/RxStomp.html":{}}}],["filter((head",{"_index":558,"title":{},"body":{"classes/RxStomp.html":{}}}],["first",{"_index":98,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{}}}],["fix",{"_index":243,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["follow",{"_index":484,"title":{},"body":{"classes/RxStomp.html":{}}}],["format",{"_index":113,"title":{},"body":{"classes/Frame.html":{}}}],["frame",{"_index":1,"title":{"classes/Frame.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["frame#bodi",{"_index":286,"title":{},"body":{"classes/Message.html":{}}}],["frame#head",{"_index":58,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/StompHeaders.html":{}}}],["frame(param",{"_index":171,"title":{},"body":{"classes/Frame.html":{}}}],["frame.hdrvalueunescape(valu",{"_index":107,"title":{},"body":{"classes/Frame.html":{}}}],["frame.seri",{"_index":172,"title":{},"body":{"classes/Frame.html":{}}}],["frame.tounit8array(cmdandhead",{"_index":122,"title":{},"body":{"classes/Frame.html":{}}}],["frame:17",{"_index":280,"title":{},"body":{"classes/Message.html":{}}}],["frame:22",{"_index":281,"title":{},"body":{"classes/Message.html":{}}}],["frame:27",{"_index":282,"title":{},"body":{"classes/Message.html":{}}}],["frame]{@link",{"_index":524,"title":{},"body":{"classes/RxStomp.html":{}}}],["framecallbacktyp",{"_index":207,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["fromrawframe(rawfram",{"_index":90,"title":{},"body":{"classes/Frame.html":{}}}],["function",{"_index":232,"title":{"miscellaneous/functions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":609,"title":{},"body":{"classes/RxStomp.html":{}}}],["generatebinarydata",{"_index":455,"title":{},"body":{"classes/RxStomp.html":{}}}],["get",{"_index":463,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["getbinarybodi",{"_index":51,"title":{},"body":{"classes/Frame.html":{}}}],["getbodi",{"_index":48,"title":{},"body":{"classes/Frame.html":{}}}],["getclient",{"_index":939,"title":{},"body":{"injectables/StompRService.html":{}}}],["getconnectobserv",{"_index":923,"title":{},"body":{"injectables/StompRService.html":{}}}],["getdefaultmessagesobserv",{"_index":931,"title":{},"body":{"injectables/StompRService.html":{}}}],["geterrorsubject",{"_index":935,"title":{},"body":{"injectables/StompRService.html":{}}}],["getreceiptsobserv",{"_index":933,"title":{},"body":{"injectables/StompRService.html":{}}}],["getserverheadersobserv",{"_index":926,"title":{},"body":{"injectables/StompRService.html":{}}}],["getstompcli",{"_index":504,"title":{},"body":{"classes/RxStomp.html":{}}}],["good",{"_index":456,"title":{},"body":{"classes/RxStomp.html":{}}}],["guest",{"_index":400,"title":{},"body":{"classes/RxStomp.html":{}}}],["guid",{"_index":240,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":236,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["guide/rx",{"_index":258,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](../addit",{"_index":739,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["hack",{"_index":827,"title":{},"body":{"classes/Stomp.html":{}}}],["handl",{"_index":310,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["handler",{"_index":571,"title":{},"body":{"classes/RxStomp.html":{}}}],["handshak",{"_index":702,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["happen",{"_index":638,"title":{},"body":{"classes/RxStomp.html":{}}}],["hdrvalueescape(str",{"_index":174,"title":{},"body":{"classes/Frame.html":{}}}],["hdrvalueunescape(str",{"_index":181,"title":{},"body":{"classes/Frame.html":{}}}],["header",{"_index":18,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["header.indexof",{"_index":102,"title":{},"body":{"classes/Frame.html":{}}}],["headers.ack",{"_index":620,"title":{},"body":{"classes/RxStomp.html":{}}}],["headers.t",{"_index":877,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":883,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correl",{"_index":768,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['repli",{"_index":767,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers[key",{"_index":108,"title":{},"body":{"classes/Frame.html":{}}}],["headers]{@link",{"_index":57,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["heart",{"_index":954,"title":{},"body":{"injectables/StompRService.html":{}}}],["heartbeat",{"_index":690,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["heartbeatincom",{"_index":402,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["heartbeatoutgo",{"_index":403,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["hello",{"_index":450,"title":{},"body":{"classes/RxStomp.html":{}}}],["here",{"_index":477,"title":{},"body":{"classes/RxStomp.html":{}}}],["hold",{"_index":529,"title":{},"body":{"classes/RxStomp.html":{}}}],["host",{"_index":678,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["hot",{"_index":636,"title":{},"body":{"classes/RxStomp.html":{}}}],["html5",{"_index":812,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":210,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["https://github.com/stomp",{"_index":518,"title":{},"body":{"classes/RxStomp.html":{}}}],["https://medium.com/@benlesh/hot",{"_index":642,"title":{},"body":{"classes/RxStomp.html":{}}}],["i.",{"_index":117,"title":{},"body":{"classes/Frame.html":{}}}],["id",{"_index":493,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["identifi",{"_index":1036,"title":{},"body":{"coverage.html":{}}}],["idx",{"_index":101,"title":{},"body":{"classes/Frame.html":{}}}],["ignor",{"_index":334,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["immedi",{"_index":332,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["impact",{"_index":666,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["implement",{"_index":613,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["import",{"_index":54,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["incom",{"_index":689,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["inde",{"_index":606,"title":{},"body":{"classes/RxStomp.html":{}}}],["index",{"_index":23,"title":{"index.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":440,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["inherit",{"_index":279,"title":{},"body":{"classes/Message.html":{}}}],["initandconnect",{"_index":899,"title":{},"body":{"injectables/StompRService.html":{}}}],["initi",{"_index":381,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":220,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":221,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"coverage.html":{}}}],["injectablerxstomprpcconfig",{"_index":255,"title":{"injectables/InjectableRxStompRpcConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["instanc",{"_index":263,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":834,"title":{},"body":{"classes/Stomp.html":{}}}],["interfac",{"_index":188,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"index.html":{}}}],["intern",{"_index":74,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["interv",{"_index":691,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["invok",{"_index":368,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["ipublishparam",{"_index":189,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{}}}],["irawframetyp",{"_index":56,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{}}}],["isbinarybodi",{"_index":27,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["isbodyempti",{"_index":140,"title":{},"body":{"classes/Frame.html":{}}}],["issu",{"_index":471,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["javascript",{"_index":560,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["js/stompj",{"_index":519,"title":{},"body":{"classes/RxStomp.html":{}}}],["json",{"_index":434,"title":{},"body":{"classes/RxStomp.html":{}}}],["keep",{"_index":384,"title":{},"body":{"classes/RxStomp.html":{}}}],["key",{"_index":38,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["klass",{"_index":838,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":839,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":753,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":244,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["later",{"_index":246,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leav",{"_index":916,"title":{},"body":{"injectables/StompRService.html":{}}}],["left",{"_index":630,"title":{},"body":{"classes/RxStomp.html":{}}}],["length",{"_index":129,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["length:${this.bodylength",{"_index":137,"title":{},"body":{"classes/Frame.html":{}}}],["level",{"_index":589,"title":{},"body":{"classes/RxStomp.html":{}}}],["lf",{"_index":882,"title":{},"body":{"classes/StompHeaders.html":{}}}],["librari",{"_index":472,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["line",{"_index":126,"title":{},"body":{"classes/Frame.html":{}}}],["line:vari",{"_index":826,"title":{},"body":{"classes/Stomp.html":{}}}],["lines.join(byte.lf",{"_index":138,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`${name}:${frame.hdrvalueescape(`${valu",{"_index":133,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`${name}:${valu",{"_index":134,"title":{},"body":{"classes/Frame.html":{}}}],["lines.push(`cont",{"_index":136,"title":{},"body":{"classes/Frame.html":{}}}],["link",{"_index":59,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["list",{"_index":891,"title":{},"body":{"injectables/StompRService.html":{}}}],["local",{"_index":460,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["locat",{"_index":804,"title":{},"body":{"classes/Stomp.html":{}}}],["logic",{"_index":603,"title":{},"body":{"classes/RxStomp.html":{}}}],["login",{"_index":399,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["long",{"_index":639,"title":{},"body":{"classes/RxStomp.html":{}}}],["loop",{"_index":416,"title":{},"body":{"classes/RxStomp.html":{}}}],["magic",{"_index":625,"title":{},"body":{"classes/RxStomp.html":{}}}],["main",{"_index":294,"title":{},"body":{"classes/RxStomp.html":{}}}],["major",{"_index":789,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":734,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["mandatori",{"_index":451,"title":{},"body":{"classes/RxStomp.html":{}}}],["mani",{"_index":9,"title":{},"body":{"classes/Frame.html":{},"classes/StompHeaders.html":{}}}],["manual",{"_index":272,"title":{},"body":{"classes/Message.html":{},"injectables/StompService.html":{}}}],["map",{"_index":361,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["mark",{"_index":681,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["marshall(param",{"_index":170,"title":{},"body":{"classes/Frame.html":{}}}],["match",{"_index":187,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["mean",{"_index":486,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mechan",{"_index":252,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["messag",{"_index":21,"title":{"classes/Message.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["message(",{"_index":600,"title":{},"body":{"classes/RxStomp.html":{}}}],["message.headers['correl",{"_index":764,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["messagecallbacktyp",{"_index":205,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messagecheckcallbacktyp",{"_index":206,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["messages.next(messag",{"_index":628,"title":{},"body":{"classes/RxStomp.html":{}}}],["method",{"_index":275,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["millisecond",{"_index":692,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["miscellan",{"_index":1062,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":445,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["modul",{"_index":1074,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":816,"title":{},"body":{"classes/Stomp.html":{}}}],["mozwebsocket",{"_index":830,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":203,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mssage",{"_index":917,"title":{},"body":{"injectables/StompRService.html":{}}}],["multipl",{"_index":392,"title":{},"body":{"classes/RxStomp.html":{}}}],["n').replace(/:/g",{"_index":178,"title":{},"body":{"classes/Frame.html":{}}}],["n').replace(/\\\\c/g",{"_index":184,"title":{},"body":{"classes/Frame.html":{}}}],["nack",{"_index":269,"title":{},"body":{"classes/Message.html":{},"classes/Transaction.html":{}}}],["name",{"_index":130,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":16,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{},"miscellaneous/typealiases.html":{}}}],["new",{"_index":63,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":608,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["nodej",{"_index":796,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":794,"title":{},"body":{"classes/Stomp.html":{}}}],["noop",{"_index":540,"title":{},"body":{"classes/RxStomp.html":{}}}],["note",{"_index":469,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["notifi",{"_index":374,"title":{},"body":{"classes/RxStomp.html":{}}}],["null",{"_index":443,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["nulltermin",{"_index":160,"title":{},"body":{"classes/Frame.html":{}}}],["nullterminator.length",{"_index":164,"title":{},"body":{"classes/Frame.html":{}}}],["number",{"_index":144,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["object",{"_index":80,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["object.keys(this.head",{"_index":131,"title":{},"body":{"classes/Frame.html":{}}}],["observ",{"_index":301,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["observable.cr",{"_index":622,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["observables/subjects/behaviorsubject",{"_index":307,"title":{},"body":{"classes/RxStomp.html":{}}}],["occasion",{"_index":248,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["occur",{"_index":330,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["octet(",{"_index":444,"title":{},"body":{"classes/RxStomp.html":{}}}],["on",{"_index":674,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onc",{"_index":817,"title":{},"body":{"classes/Stomp.html":{}}}],["onconnect",{"_index":572,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":844,"title":{},"body":{"classes/StompConfig.html":{}}}],["onstomperror",{"_index":575,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledfram",{"_index":845,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledmessag",{"_index":846,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":847,"title":{},"body":{"classes/StompConfig.html":{}}}],["onwebsocketclos",{"_index":577,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["op",{"_index":536,"title":{},"body":{"classes/RxStomp.html":{}}}],["open",{"_index":1067,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["oper",{"_index":299,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["option",{"_index":193,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":813,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwis",{"_index":413,"title":{},"body":{"classes/RxStomp.html":{}}}],["out",{"_index":437,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["outgo",{"_index":696,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["output",{"_index":116,"title":{},"body":{"classes/Frame.html":{}}}],["over",{"_index":792,"title":{},"body":{"classes/Stomp.html":{}}}],["over(w",{"_index":808,"title":{},"body":{"classes/Stomp.html":{}}}],["overrid",{"_index":1020,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1070,"title":{"index.html":{}},"body":{"index.html":{}}}],["packag",{"_index":1059,"title":{"dependencies.html":{}},"body":{}}],["pair",{"_index":40,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["param",{"_index":77,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["paramet",{"_index":191,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["params.head",{"_index":755,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["parser",{"_index":217,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":19,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":11,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["passcod",{"_index":401,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["payload",{"_index":432,"title":{},"body":{"classes/RxStomp.html":{}}}],["per",{"_index":96,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{}}}],["pleas",{"_index":233,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["point",{"_index":196,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["possibl",{"_index":829,"title":{},"body":{"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practic",{"_index":457,"title":{},"body":{"classes/RxStomp.html":{}}}],["prat",{"_index":312,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["prefer",{"_index":377,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["present",{"_index":682,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["prior",{"_index":831,"title":{},"body":{"classes/Stomp.html":{}}}],["prioriti",{"_index":448,"title":{},"body":{"classes/RxStomp.html":{}}}],["privat",{"_index":65,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["procedur",{"_index":260,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["process",{"_index":370,"title":{},"body":{"classes/RxStomp.html":{}}}],["properti",{"_index":24,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["protect",{"_index":521,"title":{},"body":{"classes/RxStomp.html":{}}}],["protocol",{"_index":427,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["protocolvers",{"_index":1014,"title":{},"body":{"classes/Versions.html":{}}}],["provid",{"_index":346,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":25,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["publish",{"_index":320,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["publish(paramet",{"_index":422,"title":{},"body":{"classes/RxStomp.html":{}}}],["publish(queuenam",{"_index":909,"title":{},"body":{"injectables/StompRService.html":{}}}],["publishparam",{"_index":423,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["pubparam",{"_index":972,"title":{},"body":{"injectables/StompRService.html":{}}}],["queu",{"_index":461,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["queue",{"_index":367,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":743,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":447,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessag",{"_index":551,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessages.length",{"_index":598,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuenam",{"_index":911,"title":{},"body":{"injectables/StompRService.html":{}}}],["quit",{"_index":481,"title":{},"body":{"classes/RxStomp.html":{}}}],["r').replace(/\\\\n/g",{"_index":183,"title":{},"body":{"classes/Frame.html":{}}}],["r').replace(/\\n/g",{"_index":177,"title":{},"body":{"classes/Frame.html":{}}}],["r.servic",{"_index":986,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.t",{"_index":886,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{}}}],["r.service.ts:103",{"_index":938,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:132",{"_index":908,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:143",{"_index":907,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:157",{"_index":910,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:183",{"_index":913,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:215",{"_index":919,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:219",{"_index":940,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:221",{"_index":906,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:40",{"_index":922,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:63",{"_index":924,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:76",{"_index":927,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:83",{"_index":932,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:90",{"_index":934,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:98",{"_index":936,"title":{},"body":{"injectables/StompRService.html":{}}}],["rabbitmq",{"_index":365,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["random",{"_index":497,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["randomtext",{"_index":501,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["raw",{"_index":87,"title":{},"body":{"classes/Frame.html":{},"injectables/StompRService.html":{}}}],["rawframe.binarybodi",{"_index":109,"title":{},"body":{"classes/Frame.html":{}}}],["rawframe.command",{"_index":105,"title":{},"body":{"classes/Frame.html":{}}}],["rawframe.headers.revers",{"_index":100,"title":{},"body":{"classes/Frame.html":{}}}],["rawheadertyp",{"_index":216,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re",{"_index":610,"title":{},"body":{"classes/RxStomp.html":{}}}],["re)connect",{"_index":329,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reactiv",{"_index":419,"title":{},"body":{"classes/RxStomp.html":{}}}],["read",{"_index":480,"title":{},"body":{"classes/RxStomp.html":{}}}],["readm",{"_index":984,"title":{},"body":{"injectables/StompService.html":{}}}],["receipt",{"_index":208,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptid",{"_index":500,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptsobserv",{"_index":904,"title":{},"body":{"injectables/StompRService.html":{}}}],["receiv",{"_index":12,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["recent",{"_index":347,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reconnect",{"_index":350,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["reconnectdelay",{"_index":405,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["refer",{"_index":426,"title":{},"body":{"classes/RxStomp.html":{}}}],["relat",{"_index":306,"title":{},"body":{"classes/RxStomp.html":{}}}],["remain",{"_index":617,"title":{},"body":{"classes/RxStomp.html":{}}}],["remark",{"_index":835,"title":{},"body":{"classes/Stomp.html":{}}}],["remot",{"_index":727,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["remov",{"_index":788,"title":{},"body":{"classes/Stomp.html":{}}}],["repeat",{"_index":95,"title":{},"body":{"classes/Frame.html":{}}}],["replace(/\\\\\\\\/g",{"_index":185,"title":{},"body":{"classes/Frame.html":{}}}],["replace(/\\r/g",{"_index":176,"title":{},"body":{"classes/Frame.html":{}}}],["repli",{"_index":744,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuenam",{"_index":771,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":442,"title":{},"body":{"classes/RxStomp.html":{}}}],["repres",{"_index":7,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":371,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["require('../../esm5",{"_index":798,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":801,"title":{},"body":{"classes/Stomp.html":{}}}],["respons",{"_index":930,"title":{},"body":{"injectables/StompRService.html":{}}}],["resubscrib",{"_index":468,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["result",{"_index":186,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":50,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["rpc",{"_index":256,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rpc(param",{"_index":732,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.service.t",{"_index":778,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":780,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.t",{"_index":726,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:25",{"_index":730,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:44",{"_index":733,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:52",{"_index":736,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserv",{"_index":759,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(messag",{"_index":766,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":224,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxj",{"_index":300,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{}}}],["rxjs/oper",{"_index":512,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["rxstomp",{"_index":290,"title":{"classes/RxStomp.html":{}},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rxstomp#activ",{"_index":420,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#activate]{@link",{"_index":580,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#configur",{"_index":659,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":715,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactiv",{"_index":385,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate]{@link",{"_index":567,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#decativ",{"_index":668,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#decativate]{@link",{"_index":723,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#watchforreceipt",{"_index":378,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#watchforreceipt]{@link",{"_index":523,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.activ",{"_index":410,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.configur",{"_index":395,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":452,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({destin",{"_index":446,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":920,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":502,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig",{"_index":229,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":383,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#reconnectdelay]{@link",{"_index":566,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#websocketfactori",{"_index":675,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":716,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.brokerurl",{"_index":952,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.connecthead",{"_index":964,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.debug",{"_index":963,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatincom",{"_index":956,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatoutgo",{"_index":958,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.reconnectdelay",{"_index":960,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.stompvers",{"_index":705,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactori",{"_index":711,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["rxstomprpc",{"_index":725,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstomprpcconfig",{"_index":257,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{}}}],["rxstomprpcservic",{"_index":776,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstompservic",{"_index":779,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactori",{"_index":784,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1068,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstat",{"_index":516,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["rxstompstate.clos",{"_index":945,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.connect",{"_index":590,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstompstate.open",{"_index":549,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["s",{"_index":155,"title":{},"body":{"classes/Frame.html":{}}}],["safe",{"_index":333,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["same",{"_index":231,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["sampl",{"_index":985,"title":{},"body":{"injectables/StompService.html":{}}}],["see",{"_index":234,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":425,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/Transaction.html":{}}}],["sent",{"_index":169,"title":{},"body":{"classes/Frame.html":{},"classes/RxStomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["sequenc",{"_index":495,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["serial",{"_index":112,"title":{},"body":{"classes/Frame.html":{}}}],["serializecmdandhead",{"_index":125,"title":{},"body":{"classes/Frame.html":{}}}],["server",{"_index":348,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["serverhead",{"_index":314,"title":{},"body":{"classes/RxStomp.html":{}}}],["serverheadersobserv",{"_index":902,"title":{},"body":{"injectables/StompRService.html":{}}}],["servic",{"_index":889,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":200,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["setconfig(config",{"_index":937,"title":{},"body":{"injectables/StompRService.html":{}}}],["setup",{"_index":550,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueu",{"_index":772,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntyp",{"_index":738,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["share",{"_index":511,"title":{},"body":{"classes/RxStomp.html":{}}}],["show",{"_index":343,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["similar",{"_index":709,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simpl",{"_index":614,"title":{},"body":{"classes/RxStomp.html":{}}}],["simplest",{"_index":1069,"title":{},"body":{"miscellaneous/functions.html":{}}}],["situat",{"_index":587,"title":{},"body":{"classes/RxStomp.html":{}}}],["size",{"_index":148,"title":{},"body":{"classes/Frame.html":{}}}],["sizeofutf8(",{"_index":154,"title":{},"body":{"classes/Frame.html":{}}}],["skip",{"_index":201,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["skipcontentlengthhead",{"_index":71,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["socket",{"_index":820,"title":{},"body":{"classes/Stomp.html":{}}}],["sockj",{"_index":710,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":713,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["sometim",{"_index":435,"title":{},"body":{"classes/RxStomp.html":{}}}],["soon",{"_index":462,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{}}}],["special",{"_index":618,"title":{},"body":{"classes/RxStomp.html":{}}}],["specif",{"_index":357,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["specifi",{"_index":428,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["st",{"_index":943,"title":{},"body":{"injectables/StompRService.html":{}}}],["standard",{"_index":97,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["state",{"_index":339,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["state.t",{"_index":1065,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statement",{"_index":1037,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":89,"title":{},"body":{"classes/Frame.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["statu",{"_index":342,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["step",{"_index":239,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":8,"title":{"classes/Stomp.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stomp#client",{"_index":811,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":841,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":832,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":806,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":941,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.j",{"_index":893,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.ov",{"_index":833,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(funct",{"_index":821,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.servic",{"_index":781,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.t",{"_index":783,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.t",{"_index":293,"title":{},"body":{"classes/RxStomp.html":{},"coverage.html":{}}}],["stomp.ts:102",{"_index":352,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:116",{"_index":505,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:129",{"_index":324,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:202",{"_index":391,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:226",{"_index":380,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:261",{"_index":414,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:280",{"_index":412,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:327",{"_index":424,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:369",{"_index":465,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:45",{"_index":338,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:478",{"_index":490,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:53",{"_index":325,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:60",{"_index":345,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:77",{"_index":363,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:89",{"_index":373,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.websocketclass",{"_index":800,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":226,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stomp/rx",{"_index":254,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/rx",{"_index":292,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.j",{"_index":890,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp/stompj",{"_index":20,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stompjs]{@link",{"_index":517,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompclient",{"_index":323,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig",{"_index":513,"title":{"classes/StompConfig.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompconfig.beforeconnect",{"_index":562,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig.debug",{"_index":565,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscript",{"_index":626,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscription.unsubscrib",{"_index":632,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomperror",{"_index":315,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomphead",{"_index":36,"title":{"classes/StompHeaders.html":{}},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompj",{"_index":227,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stompjs.stomp",{"_index":799,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/2018/10/12/remot",{"_index":259,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/2018/11/04/ng2",{"_index":237,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/inject",{"_index":223,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"coverage.html":{}}}],["stompjs/src/rx",{"_index":777,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/stomp",{"_index":885,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/stomp.service.t",{"_index":981,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/stomp.service.ts:25",{"_index":983,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs@8.x.x",{"_index":888,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":729,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuenam",{"_index":749,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueu",{"_index":751,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservic",{"_index":884,"title":{"injectables/StompRService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomprservice._mapstompstate(st",{"_index":949,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompservic",{"_index":898,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompstat",{"_index":583,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.clos",{"_index":947,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.connect",{"_index":925,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.disconnect",{"_index":946,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.open",{"_index":336,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompstate.tri",{"_index":944,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompsubscript",{"_index":514,"title":{"classes/StompSubscription.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompsubscription.unsubscrib",{"_index":633,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompvers",{"_index":662,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":387,"title":{},"body":{"classes/RxStomp.html":{}}}],["str",{"_index":92,"title":{},"body":{"classes/Frame.html":{},"injectables/StompRService.html":{}}}],["str.replace(/\\\\/g",{"_index":175,"title":{},"body":{"classes/Frame.html":{}}}],["str.replace(/\\\\r/g",{"_index":182,"title":{},"body":{"classes/Frame.html":{}}}],["str.replace(/^\\s+|\\s+$/g",{"_index":93,"title":{},"body":{"classes/Frame.html":{}}}],["strang",{"_index":482,"title":{},"body":{"classes/RxStomp.html":{}}}],["stray",{"_index":369,"title":{},"body":{"classes/RxStomp.html":{}}}],["stream",{"_index":303,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stream(param",{"_index":735,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["string",{"_index":31,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["string|arraybuff",{"_index":120,"title":{},"body":{"classes/Frame.html":{}}}],["string|publishparam",{"_index":969,"title":{},"body":{"injectables/StompRService.html":{}}}],["structur",{"_index":219,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["subject",{"_index":351,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["subscrib",{"_index":271,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["subscribe((messag",{"_index":765,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["subscribe(queuenam",{"_index":912,"title":{},"body":{"injectables/StompRService.html":{}}}],["subscript",{"_index":264,"title":{},"body":{"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["subscription.t",{"_index":990,"title":{},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["subscription.ts:12",{"_index":991,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscription.ts:17",{"_index":993,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subset",{"_index":563,"title":{},"body":{"classes/RxStomp.html":{}}}],["successfulli",{"_index":612,"title":{},"body":{"classes/RxStomp.html":{}}}],["suggest",{"_index":429,"title":{},"body":{"classes/RxStomp.html":{}}}],["suitabl",{"_index":114,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":976,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":782,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["super.publish(pubparam",{"_index":973,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.publish({destin",{"_index":971,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.watchforreceipt(receiptid",{"_index":975,"title":{},"body":{"injectables/StompRService.html":{}}}],["support",{"_index":436,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["supportedvers",{"_index":1015,"title":{},"body":{"classes/Versions.html":{}}}],["switch",{"_index":790,"title":{},"body":{"classes/Stomp.html":{}}}],["tabl",{"_index":1058,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":1057,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1018,"title":{},"body":{"classes/Versions.html":{}}}],["tcp",{"_index":819,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":742,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporari",{"_index":366,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["test.destin",{"_index":921,"title":{},"body":{"injectables/StompRService.html":{}}}],["textdecoder().decode(this._binarybodi",{"_index":64,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(cmdandhead",{"_index":159,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(s).length",{"_index":156,"title":{},"body":{"classes/Frame.html":{}}}],["textencoder().encode(this._bodi",{"_index":68,"title":{},"body":{"classes/Frame.html":{}}}],["thing",{"_index":488,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._beforeconnect",{"_index":541,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._binarybodi",{"_index":67,"title":{},"body":{"classes/Frame.html":{}}}],["this._binarybody).buff",{"_index":123,"title":{},"body":{"classes/Frame.html":{}}}],["this._bodi",{"_index":61,"title":{},"body":{"classes/Frame.html":{}}}],["this._changestate(rxstompstate.clos",{"_index":578,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.connect",{"_index":570,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.open",{"_index":574,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug",{"_index":542,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`attempt",{"_index":601,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`not",{"_index":594,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`request",{"_index":619,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stomp",{"_index":634,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stop",{"_index":631,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`wil",{"_index":599,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessag",{"_index":597,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessages.push(paramet",{"_index":595,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._repliesobserv",{"_index":756,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable.pipe(filter((messag",{"_index":763,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuenam",{"_index":750,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._sendqueuedmessag",{"_index":553,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject",{"_index":554,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.next(frame.head",{"_index":573,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.pip",{"_index":557,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupreplyqueu",{"_index":752,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue(this._replyqueuenam",{"_index":757,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupunhandledmessag",{"_index":538,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupunhandledreceipt",{"_index":539,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompcli",{"_index":531,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this._stompclient.activ",{"_index":579,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configur",{"_index":569,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configure(stompconfig",{"_index":564,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.deactiv",{"_index":582,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledmessag",{"_index":649,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledreceipt",{"_index":653,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.publish(paramet",{"_index":593,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.subscribe(destin",{"_index":627,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.watchforreceipt(receiptid",{"_index":656,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.activ",{"_index":968,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.binarybodi",{"_index":145,"title":{},"body":{"classes/Frame.html":{}}}],["this.bodylength",{"_index":141,"title":{},"body":{"classes/Frame.html":{}}}],["this.command",{"_index":78,"title":{},"body":{"classes/Frame.html":{}}}],["this.config",{"_index":988,"title":{},"body":{"injectables/StompService.html":{}}}],["this.configure(rxstompconfig",{"_index":966,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connect",{"_index":545,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connected$.pipe(map((st",{"_index":948,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connected$.subscrib",{"_index":552,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionst",{"_index":543,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.getvalu",{"_index":584,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.next(st",{"_index":658,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.pip",{"_index":546,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.subscribe((st",{"_index":979,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.deactiv",{"_index":967,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.escapeheadervalu",{"_index":84,"title":{},"body":{"classes/Frame.html":{}}}],["this.head",{"_index":79,"title":{},"body":{"classes/Frame.html":{}}}],["this.headers['cont",{"_index":128,"title":{},"body":{"classes/Frame.html":{}}}],["this.headers[nam",{"_index":132,"title":{},"body":{"classes/Frame.html":{}}}],["this.initandconnect",{"_index":989,"title":{},"body":{"injectables/StompService.html":{}}}],["this.isbinarybodi",{"_index":62,"title":{},"body":{"classes/Frame.html":{}}}],["this.isbodyempti",{"_index":135,"title":{},"body":{"classes/Frame.html":{}}}],["this.publish(queuedmessag",{"_index":602,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.rxstomp",{"_index":758,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish({destin",{"_index":769,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessag",{"_index":746,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.serializecmdandhead",{"_index":111,"title":{},"body":{"classes/Frame.html":{}}}],["this.serverhead",{"_index":556,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.skipcontentlengthhead",{"_index":85,"title":{},"body":{"classes/Frame.html":{}}}],["this.stat",{"_index":977,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.state.next(stomprservice._mapstompstate(st",{"_index":980,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.stomperror",{"_index":559,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.stomperrors$.next(fram",{"_index":576,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stream(params).pipe(first",{"_index":754,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.unhandledmessag",{"_index":648,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledmessage$.next(messag",{"_index":650,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledreceipt",{"_index":652,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledreceipts$.next(fram",{"_index":654,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.versions.join",{"_index":1032,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map((x",{"_index":1033,"title":{},"body":{"classes/Versions.html":{}}}],["this.watch(queuenam",{"_index":974,"title":{},"body":{"injectables/StompRService.html":{}}}],["though",{"_index":679,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["time",{"_index":328,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["todo",{"_index":999,"title":{},"body":{"classes/Transaction.html":{}}}],["topic/speci",{"_index":458,"title":{},"body":{"classes/RxStomp.html":{}}}],["tostr",{"_index":110,"title":{},"body":{"classes/Frame.html":{}}}],["tounit8array(cmdandhead",{"_index":157,"title":{},"body":{"classes/Frame.html":{}}}],["transact",{"_index":996,"title":{"classes/Transaction.html":{}},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["transpar",{"_index":309,"title":{},"body":{"classes/RxStomp.html":{}}}],["transport",{"_index":818,"title":{},"body":{"classes/Stomp.html":{}}}],["tri",{"_index":308,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["tricki",{"_index":586,"title":{},"body":{"classes/RxStomp.html":{}}}],["trigger",{"_index":326,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["trim",{"_index":91,"title":{},"body":{"classes/Frame.html":{}}}],["trim(header[0",{"_index":103,"title":{},"body":{"classes/Frame.html":{}}}],["trim(header[1",{"_index":104,"title":{},"body":{"classes/Frame.html":{}}}],["true",{"_index":82,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["tslint:dis",{"_index":825,"title":{},"body":{"classes/Stomp.html":{}}}],["twice",{"_index":637,"title":{},"body":{"classes/RxStomp.html":{}}}],["two",{"_index":483,"title":{},"body":{"classes/RxStomp.html":{}}}],["type",{"_index":32,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":1075,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":970,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(config.url",{"_index":951,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(w",{"_index":842,"title":{},"body":{"classes/Stomp.html":{}}}],["typic",{"_index":245,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["uint8array",{"_index":53,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["uint8array([0",{"_index":161,"title":{},"body":{"classes/Frame.html":{}}}],["uint8array(uint8cmdandheaders.length",{"_index":163,"title":{},"body":{"classes/Frame.html":{}}}],["uint8array](https://developer.mozilla.org/en",{"_index":591,"title":{},"body":{"classes/RxStomp.html":{}}}],["uint8cmdandhead",{"_index":158,"title":{},"body":{"classes/Frame.html":{}}}],["uint8cmdandheaders.length",{"_index":167,"title":{},"body":{"classes/Frame.html":{}}}],["uint8fram",{"_index":162,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(binarybodi",{"_index":166,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(nulltermin",{"_index":168,"title":{},"body":{"classes/Frame.html":{}}}],["uint8frame.set(uint8cmdandhead",{"_index":165,"title":{},"body":{"classes/Frame.html":{}}}],["underli",{"_index":418,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["understand",{"_index":915,"title":{},"body":{"injectables/StompRService.html":{}}}],["unescap",{"_index":180,"title":{},"body":{"classes/Frame.html":{}}}],["unhandl",{"_index":364,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledmessag",{"_index":316,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledreceipt",{"_index":317,"title":{},"body":{"classes/RxStomp.html":{}}}],["unintend",{"_index":508,"title":{},"body":{"classes/RxStomp.html":{}}}],["uniqu",{"_index":494,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["unit8array",{"_index":118,"title":{},"body":{"classes/Frame.html":{}}}],["unless",{"_index":892,"title":{},"body":{"injectables/StompRService.html":{}}}],["unsubscrib",{"_index":372,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["url",{"_index":671,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us",{"_index":99,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["us/docs/web/api/closeev",{"_index":211,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/javascript/reference/global_objects/uint8array",{"_index":592,"title":{},"body":{"classes/RxStomp.html":{}}}],["usag",{"_index":15,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{}}}],["user",{"_index":344,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["utf",{"_index":149,"title":{},"body":{"classes/Frame.html":{}}}],["uuid",{"_index":496,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["uuid.uuid",{"_index":762,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["v${x.replac",{"_index":1034,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1011,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1012,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1013,"title":{},"body":{"classes/Versions.html":{}}}],["valid",{"_index":667,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["valu",{"_index":39,"title":{},"body":{"classes/Frame.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["var",{"_index":453,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["variabl",{"_index":623,"title":{},"body":{"classes/RxStomp.html":{}}}],["veri",{"_index":487,"title":{},"body":{"classes/RxStomp.html":{}}}],["version",{"_index":228,"title":{"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["versions(['1.0",{"_index":706,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["versions([versions.v1_0",{"_index":1028,"title":{},"body":{"classes/Versions.html":{}}}],["versions.default.protocolvers",{"_index":836,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.v1_1",{"_index":1029,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1030,"title":{},"body":{"classes/Versions.html":{}}}],["via",{"_index":894,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":204,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Message.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Transaction.html":{}}}],["vs",{"_index":643,"title":{},"body":{"classes/RxStomp.html":{}}}],["waitforreceipt",{"_index":900,"title":{},"body":{"injectables/StompRService.html":{}}}],["waitforreceipt(receiptid",{"_index":918,"title":{},"body":{"injectables/StompRService.html":{}}}],["want",{"_index":987,"title":{},"body":{"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":321,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["watch(destin",{"_index":464,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt",{"_index":322,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt(receiptid",{"_index":489,"title":{},"body":{"classes/RxStomp.html":{}}}],["way",{"_index":473,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["websocket",{"_index":115,"title":{},"body":{"classes/Frame.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/w",{"_index":712,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/w",{"_index":822,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":791,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketfactori",{"_index":663,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["well",{"_index":478,"title":{},"body":{"classes/RxStomp.html":{}}}],["whenev",{"_index":611,"title":{},"body":{"classes/RxStomp.html":{}}}],["whether",{"_index":45,"title":{},"body":{"classes/Frame.html":{},"classes/Message.html":{}}}],["wire",{"_index":896,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["within",{"_index":795,"title":{},"body":{"classes/Stomp.html":{},"classes/Transaction.html":{}}}],["wonder",{"_index":607,"title":{},"body":{"classes/RxStomp.html":{}}}],["work",{"_index":475,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["wrap",{"_index":296,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws",{"_index":823,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/w",{"_index":397,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws://broker.329broker.com:15674/w",{"_index":672,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":805,"title":{},"body":{"classes/Stomp.html":{}}}],["wsfn",{"_index":837,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/w",{"_index":673,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ye",{"_index":731,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["yield",{"_index":218,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Frame.html":{"url":"classes/Frame.html","title":"class - Frame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Frame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/frame.ts\n        \n\n            \n                Description\n            \n            \n                Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nMessage is an extended Frame.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                command\n                            \n                            \n                                    Public\n                                headers\n                            \n                            \n                                    Public\n                                isBinaryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    body\n                                \n                                \n                                    binaryBody\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            command\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        command:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:17\n                            \n                        \n\n                \n                    \n                        STOMP Command\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:22\n                            \n                        \n\n                \n                    \n                        Headers, key value pairs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isBinaryBody\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isBinaryBody:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/frame.ts:27\n                            \n                        \n\n                \n                    \n                        Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        body\n                    \n                \n\n                \n                    \n                        getbody()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/stompjs/src/frame.ts:32\n                                \n                            \n                    \n                        \n                                body of the frame\n\n\n                                \n                                    Returns :     string\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        binaryBody\n                    \n                \n\n                \n                    \n                        getbinaryBody()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/stompjs/src/frame.ts:43\n                                \n                            \n                    \n                        \n                                body as Uint8Array\n\n\n                                \n                                    Returns :     Uint8Array\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BYTE} from './byte';\nimport {StompHeaders} from './stomp-headers';\nimport {IRawFrameType} from './types';\n\n/**\n * Frame class represents a STOMP frame. Many of the callbacks pass the Frame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link Frame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link Message} is an extended Frame.\n */\nexport class Frame {\n  /**\n   * STOMP Command\n   */\n  public command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  public headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  public isBinaryBody: boolean;\n\n  /**\n   * body of the frame\n   */\n  get body(): string {\n    if (!this._body && this.isBinaryBody) {\n      this._body = new TextDecoder().decode(this._binaryBody);\n    }\n    return this._body;\n  }\n  private _body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  get binaryBody(): Uint8Array {\n    if (!this._binaryBody && !this.isBinaryBody) {\n      this._binaryBody = new TextEncoder().encode(this._body);\n    }\n    return this._binaryBody;\n  }\n  private _binaryBody: Uint8Array;\n\n  private escapeHeaderValues: boolean;\n  private skipContentLengthHeader: boolean;\n\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  constructor(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const {command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader} = params;\n    this.command = command;\n    this.headers = (Object as any).assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n\n  /**\n   * deserialize a STOMP Frame from raw data.\n   *\n   * @internal\n   */\n  public static fromRawFrame(rawFrame: IRawFrameType, escapeHeaderValues: boolean): Frame {\n    const headers: StompHeaders = {};\n    const trim = (str: string): string => str.replace(/^\\s+|\\s+$/g, '');\n\n    // In case of repeated headers, as per standards, first value need to be used\n    for (const header of rawFrame.headers.reverse()) {\n      const idx = header.indexOf(':');\n\n      const key = trim(header[0]);\n      let value = trim(header[1]);\n\n      if (escapeHeaderValues && (rawFrame.command !== 'CONNECT') && (rawFrame.command !== 'CONNECTED')) {\n        value = Frame.hdrValueUnEscape(value);\n      }\n\n      headers[key] = value;\n    }\n\n    return new Frame({\n      command: rawFrame.command,\n      headers,\n      binaryBody: rawFrame.binaryBody,\n      escapeHeaderValues\n    });\n  }\n\n  /**\n   * @internal\n   */\n  public toString(): string {\n    return this.serializeCmdAndHeaders();\n  }\n\n  /**\n   * serialize this Frame in a format suitable to be passed to WebSocket.\n   * If the body is string the output will be string.\n   * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n   *\n   * @internal\n   */\n  public serialize(): string|ArrayBuffer {\n    const cmdAndHeaders = this.serializeCmdAndHeaders();\n\n    if (this.isBinaryBody) {\n      return Frame.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n    } else {\n      return cmdAndHeaders + this._body + BYTE.NULL;\n    }\n  }\n\n  private serializeCmdAndHeaders(): string {\n    const lines = [this.command];\n    if (this.skipContentLengthHeader) {\n      delete this.headers['content-length'];\n    }\n\n    for (const name of Object.keys(this.headers || {})) {\n      const value = this.headers[name];\n      if (this.escapeHeaderValues && (this.command !== 'CONNECT') && (this.command !== 'CONNECTED')) {\n        lines.push(`${name}:${Frame.hdrValueEscape(`${value}`)}`);\n      } else {\n        lines.push(`${name}:${value}`);\n      }\n    }\n    if (this.isBinaryBody || (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n      lines.push(`content-length:${this.bodyLength()}`);\n    }\n    return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n  }\n\n  private isBodyEmpty(): boolean {\n    return this.bodyLength() === 0;\n  }\n\n  private bodyLength(): number {\n    const binaryBody = this.binaryBody;\n    return binaryBody ? binaryBody.length : 0;\n  }\n\n  /**\n   * Compute the size of a UTF-8 string by counting its number of bytes\n   * (and not the number of characters composing the string)\n   */\n  private static sizeOfUTF8(s: string): number {\n    return s ? new TextEncoder().encode(s).length : 0;\n  }\n\n  private static toUnit8Array(cmdAndHeaders: string, binaryBody: Uint8Array): Uint8Array {\n    const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n    const nullTerminator = new Uint8Array([0]);\n    const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n\n    uint8Frame.set(uint8CmdAndHeaders);\n    uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n    uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n\n    return uint8Frame;\n  }\n  /**\n   * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n   *\n   * @internal\n   */\n  public static marshall(params: {\n    command: string, headers?: StompHeaders, body?: string, binaryBody?: Uint8Array,\n    escapeHeaderValues?: boolean, skipContentLengthHeader?: boolean\n  }) {\n    const frame = new Frame(params);\n    return frame.serialize();\n  }\n\n  /**\n   *  Escape header values\n   */\n  private static hdrValueEscape(str: string): string {\n    return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n  }\n\n  /**\n   * UnEscape header values\n   */\n  private static hdrValueUnEscape(str: string): string {\n    return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for Client#publish\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        binaryBody\n                                \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        destination\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        skipContentLengthHeader\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                    \n                                \n                                \n                                    \n                                        destination:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {Frame} from './frame';\nimport {Message} from './message';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: Message) => void;\n\n/**\n * This callback will receive a {@link Message} as parameter.\n * The callback will need to return a boolean value.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCheckCallbackType = (frame: Frame) => boolean;\n\n/**\n * This callback will receive a {@link Frame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = (receipt: Frame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: CloseEvent) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType { command: string; headers: RawHeaderType[]; binaryBody: Uint8Array; }\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRpcConfig.html":{"url":"injectables/InjectableRxStompRpcConfig.html","title":"injectable - InjectableRxStompRpcConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRpcConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompRPCConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRpcConfig extends RxStompRPCConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Message.html":{"url":"classes/Message.html","title":"class - Message","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/message.ts\n        \n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended Frame, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                    Frame\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ack\n                            \n                            \n                                    Public\n                                nack\n                            \n                            \n                                    Public\n                                command\n                            \n                            \n                                    Public\n                                headers\n                            \n                            \n                                    Public\n                                isBinaryBody\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ack\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ack:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/message.ts:20\n                            \n                        \n\n                \n                    \n                        When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            nack\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        nack:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/message.ts:27\n                            \n                        \n\n                \n                    \n                        When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            command\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        command:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:17\n                            \n                        \n\n                \n                    \n                        STOMP Command\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            headers\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        headers:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:22\n                            \n                        \n\n                \n                    \n                        Headers, key value pairs.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            isBinaryBody\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        isBinaryBody:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from     Frame\n\n                                \n                            \n                        \n                            \n                                    Defined in Frame:27\n                            \n                        \n\n                \n                    \n                        Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Frame} from './frame';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link Frame}, you can access [headers]{@link Frame#headers}\n * and [body]{@link Frame#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport class Message extends Frame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  public ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  public nack: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStomp.html":{"url":"classes/RxStomp.html","title":"class - RxStomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp.ts\n        \n\n            \n                Description\n            \n            \n                This is the main Stomp Client.\nTypically you will create an instance of this to connect to the STOMP broker.\nThis wraps @stomp/stompjs\nClient class.\nThe key difference is that it exposes operations as RxJS Observables.\nFor example when a STOMP endpoint is subscribed it returns an Observable\nthat will stream all received messages.\nWith exception of beforeConnect, functionality related to all callbacks in\n@stomp/stompjs Client\nis exposed as Observables/Subjects/BehaviorSubjects.\nRxStomp also tries to transparently handle connection failures.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                connected$\n                            \n                            \n                                    Public\n                                connectionState$\n                            \n                            \n                                    Public\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                stompErrors$\n                            \n                            \n                                    Public\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                unhandledReceipts$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stompClient\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp.ts:129\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connected$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:53\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connectionState$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectionState$:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:45\n                            \n                        \n\n                \n                    \n                        Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            serverHeaders$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serverHeaders$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:60\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stompErrors$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompErrors$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:102\n                            \n                        \n\n                \n                    \n                        It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onStompError\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledMessage$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledMessage$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:77\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledReceipts$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledReceipts$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:89\n                            \n                        \n\n                \n                    \n                        STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        activate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:226\n                            \n                        \n\n\n                \n                    \n                            Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(rxStompConfig: RxStompConfig)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:202\n                            \n                        \n\n\n                \n                    \n                            Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   *Maps to: Client#configure\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                        \n                                                                    RxStompConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        connected()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:280\n                            \n                        \n\n\n                \n                    \n                            It will return true if STOMP broker is connected and false otherwise.\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            deactivate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        deactivate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:261\n                            \n                        \n\n\n                \n                    \n                            Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(parameters: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:327\n                            \n                        \n\n\n                \n                    \n                            Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nSee: publishParams\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   *The message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nMaps to: Client#publish\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parameters\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watch(destination: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:369\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code read quite strange with two subscribe calls\nfollowing each other and both meaning very different things.\nMaps to: Client#subscribe\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        destination\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watchForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watchForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:478\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stompClient\n                    \n                \n\n                \n                    \n                        getstompClient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:116\n                                \n                            \n                    \n                        \n                                Instance of actual\n@stomp/stompjs\nClient.\nBe careful in calling methods on it directly - you may get unintended consequences.\n\n\n                                \n                                    Returns :     Client\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {filter, share} from 'rxjs/operators';\n\nimport {\n  Client,\n  debugFnType,\n  Frame,\n  Message,\n  publishParams,\n  StompConfig,\n  StompHeaders,\n  StompSubscription\n} from '@stomp/stompjs';\n\nimport {RxStompConfig} from './rx-stomp-config';\nimport {RxStompState} from './rx-stomp-state';\n\n/**\n * This is the main Stomp Client.\n * Typically you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client} class.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception of beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n  /**\n   * Connection State\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public connectionState$: BehaviorSubject;\n\n  /**\n   * Will trigger when connection is established.\n   * It will trigger every time a (re)connection occurs.\n   * If it is already connected it will trigger immediately.\n   * You can safely ignore the value, as it will always be `StompState.OPEN`\n   */\n  public connected$: Observable;\n\n  /**\n   * Provides headers from most recent connection to the server as returned by the CONNECTED frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will trigger for each reconnection.\n   */\n  public serverHeaders$: Observable;\n\n  protected _serverHeadersBehaviourSubject$: BehaviorSubject;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to unsubscribe from an endpoint.\n   *\n   * This Observer will yield the received\n   * {@link Message}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}\n   */\n  public unhandledMessage$: Subject;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [RxStomp#watchForReceipt]{@link RxStomp#watchForReceipt}.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}\n   */\n  public unhandledReceipts$: Subject;\n\n  /**\n   * It will stream all ERROR frames received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onStompError]{@link Client#onStompError}\n   */\n  public stompErrors$: Subject;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected _queuedMessages: publishParams[] = [];\n\n  /**\n   * Instance of actual\n   * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n   * {@link Client}.\n   *\n   * **Be careful in calling methods on it directly - you may get unintended consequences.**\n   */\n  get stompClient(): Client {\n    return this._stompClient;\n  }\n  protected _stompClient: Client;\n\n  /**\n   * Before connect\n   */\n  protected _beforeConnect: () => void;\n\n  /**\n   * Will be assigned during configuration, no-op otherwise\n   */\n  protected _debug: debugFnType;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this._stompClient = new Client();\n\n    // Default messages\n    this._setupUnhandledMessages();\n\n    // Receipts\n    this._setupUnhandledReceipts();\n\n    const noOp = () => {};\n\n    // Before connect is no op by default\n    this._beforeConnect = noOp;\n\n    // debug is no-op by default\n    this._debug = noOp;\n\n    // Initial state is CLOSED\n    this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n\n    this.connected$ = this.connectionState$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connected$.subscribe(() => {\n      this._sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject$ = new BehaviorSubject(null);\n\n    this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompErrors$ = new Subject();\n  }\n\n  /**\n   * Set configuration. This method may be called multiple times.\n   * Each call will add to the existing configuration.\n   *\n   * Example:\n   *\n   * ```javascript\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   * ```\n   *\n   * Maps to: [Client#configure]{@link Client#configure}\n   */\n  public configure(rxStompConfig: RxStompConfig) {\n    const stompConfig: StompConfig = (Object as any).assign({}, rxStompConfig);\n\n    if (stompConfig.beforeConnect) {\n      this._beforeConnect = stompConfig.beforeConnect;\n      delete stompConfig.beforeConnect;\n    }\n\n    // RxStompConfig has subset of StompConfig fields\n    this._stompClient.configure(stompConfig);\n    if (stompConfig.debug) {\n      this._debug = stompConfig.debug;\n    }\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n   *\n   * Maps to: [Client#activate]{@link Client#activate}\n   */\n  public activate(): void {\n    this._stompClient.configure({\n      beforeConnect: () => {\n        this._changeState(RxStompState.CONNECTING);\n\n        // Call handler\n        this._beforeConnect();\n      },\n      onConnect: (frame: Frame) => {\n        this._serverHeadersBehaviourSubject$.next(frame.headers);\n\n        // Indicate our connected state to observers\n        this._changeState(RxStompState.OPEN);\n      },\n      onStompError: (frame: Frame) => {\n        // Trigger the frame subject\n        this.stompErrors$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(RxStompState.CLOSED);\n      }\n    });\n\n    // Attempt connection\n    this._stompClient.activate();\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [RxStomp#activate]{@link RxStomp#activate}.\n   *\n   * Maps to: [Client#deactivate]{@link Client#deactivate}\n   */\n  public deactivate(): void {\n    // Disconnect if connected. Callback will set CLOSED state\n    this._stompClient.deactivate();\n\n    const stompState = this.connectionState$.getValue();\n    if (stompState === RxStompState.OPEN) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSING);\n    }\n    // This is bit tricky situation, it would be better handled at stompjs level\n    if (stompState === RxStompState.CONNECTING) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSED);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.connectionState$.getValue() === RxStompState.OPEN;\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * See: {@link publishParams}\n   *\n   * ```javascript\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * Maps to: [Client#publish]{@link Client#publish}\n   */\n  public publish(parameters: publishParams): void {\n    if (this.connected()) {\n      this._stompClient.publish(parameters);\n    } else {\n      this._debug(`Not connected, queueing`);\n      this._queuedMessages.push(parameters);\n    }\n  }\n\n  /** It will send queued messages. */\n  protected _sendQueuedMessages(): void {\n    const queuedMessages = this._queuedMessages;\n    this._queuedMessages = [];\n\n    if (queuedMessages.length === 0) {\n      return;\n    }\n\n    this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n\n    for (const queuedMessage of queuedMessages) {\n      this._debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * Note that messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * This method in the underlying library is called `subscribe`.\n   * In earlier version it was called `subscribe` here as well.\n   * However `subscribe` is also used by RxJS and code read quite strange with two subscribe calls\n   * following each other and both meaning very different things.\n   *\n   * Maps to: [Client#subscribe]{@link Client#subscribe}\n   */\n  public watch(destination: string, headers: StompHeaders = {}): Observable {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this._debug(`Request to subscribe ${destination}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers.ack) {\n      headers.ack = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this.connected$.subscribe(() => {\n            this._debug(`Will subscribe to ${destination}`);\n            stompSubscription = this._stompClient.subscribe(destination, (message: Message) => {\n                messages.next(message);\n              },\n              headers);\n          });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this._debug(`Stop watching connection state (for ${destination})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.connected()) {\n            this._debug(`Will unsubscribe from ${destination} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this._debug(`Stomp not connected, no need to unsubscribe from ${destination} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * Setup streaming unhandled messages.\n   */\n  protected _setupUnhandledMessages(): void {\n    this.unhandledMessage$ = new Subject();\n\n    this._stompClient.onUnhandledMessage = (message: Message) => {\n      this.unhandledMessage$.next(message);\n    };\n  }\n\n  /**\n   * Setup streaming unhandled receipts.\n   */\n  protected _setupUnhandledReceipts(): void {\n    this.unhandledReceipts$ = new Subject();\n\n    this._stompClient.onUnhandledReceipt = (frame: Frame) => {\n      this.unhandledReceipts$.next(frame);\n    };\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public watchForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    this._stompClient.watchForReceipt(receiptId, callback);\n  }\n\n  protected _changeState(state: RxStompState): void {\n    this.connectionState$.next(state);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:107\n                            \n                        \n\n                \n                    \n                        Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nMaps to: Client#beforeConnect\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:21\n                            \n                        \n\n                \n                    \n                        The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:90\n                            \n                        \n\n                \n                    \n                        Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:37\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:97\n                            \n                        \n\n                \n                    \n                        Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:74\n                            \n                        \n\n                \n                    \n                        Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:81\n                            \n                        \n\n                \n                    \n                        Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:67\n                            \n                        \n\n                \n                    \n                        automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:34\n                            \n                        \n\n                \n                    \n                        STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   *Maps to: Client#stompVersions\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:60\n                            \n                        \n\n                \n                    \n                        This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   *Maps to: Client#webSocketFactory\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {debugFnType, StompHeaders, Versions} from '@stomp/stompjs';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:25\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rpc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        rpc(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:44\n                            \n                        \n\n\n                \n                    \n                            Make an RPC request. See the guide for example.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stream\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stream(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:52\n                            \n                        \n\n\n                \n                    \n                            Make an RPC stream request. See the guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, first } from 'rxjs/operators';\n\nimport { UUID } from 'angular2-uuid';\n\nimport {Message, publishParams, StompHeaders} from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp';\nimport { RxStompRPCConfig, setupReplyQueueFnType } from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  }\n\n  private _repliesObservable: Observable;\n\n  /**\n   * Create an instance, see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n   */\n  constructor(private rxStomp: RxStomp, private stompRPCConfig?: RxStompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html) for example.\n   */\n  public rpc(params: publishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html).\n   */\n  public stream(params: publishParams): Observable {\n    const headers: StompHeaders = (Object as any).assign({}, params.headers || {});\n    const {destination, body, binaryBody} = params;\n\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: Message) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: Message) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.rxStomp.publish({destination, body, binaryBody, headers});\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            replyQueueName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        replyQueueName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:20\n                            \n                        \n\n                \n                    \n                        Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            setupReplyQueue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setupReplyQueue:     setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                            Type :     setupReplyQueueFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:24\n                            \n                        \n\n                \n                    \n                        Setup the reply queue. See the guide for details.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, rxStomp: RxStomp) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRpcConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    InjectableRxStompRpcConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import {Injectable, Optional} from '@angular/core';\n\nimport {RxStompRPC} from '@stomp/rx-stomp';\nimport {RxStompService} from './rx-stomp.service';\nimport {InjectableRxStompRpcConfig} from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  constructor(rxStomp: RxStompService, @Optional() stompRPCConfig?: InjectableRxStompRpcConfig) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WebSocketClass\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        WebSocketClass:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:32\n                            \n                        \n\n                \n                    \n                        In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        client(url: string, protocols?: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:48\n                            \n                        \n\n\n                \n                    \n                            This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        protocols\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            over\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        over(ws: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:92\n                            \n                        \n\n\n                \n                    \n                            This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ws\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    const wsFn = typeof(ws) === 'function' ? ws : () => ws;\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:76\n                            \n                        \n\n                \n                    \n                        See Client#beforeConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:21\n                            \n                        \n\n                \n                    \n                        See Client#brokerURL.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:51\n                            \n                        \n\n                \n                    \n                        See Client#connectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:101\n                            \n                        \n\n                \n                    \n                        See Client#debug.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:56\n                            \n                        \n\n                \n                    \n                        See Client#disconnectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:41\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:46\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatOutgoing.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onConnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:81\n                            \n                        \n\n                \n                    \n                        See Client#onConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onDisconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onDisconnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:86\n                            \n                        \n\n                \n                    \n                        See Client#onDisconnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onStompError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onStompError:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:91\n                            \n                        \n\n                \n                    \n                        See Client#onStompError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledFrame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledFrame:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:71\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledFrame.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledMessage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledMessage:     messageCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     messageCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:61\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledMessage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledReceipt:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:66\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledReceipt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketClose\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onWebSocketClose:     closeEventCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     closeEventCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:96\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketClose.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:36\n                            \n                        \n\n                \n                    \n                        See Client#reconnectDelay.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:26\n                            \n                        \n\n                \n                    \n                        See See Client#stompVersions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:31\n                            \n                        \n\n                \n                    \n                        See Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as Frame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders { [key: string]: string }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRService.html":{"url":"injectables/StompRService.html","title":"injectable - StompRService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp-r.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Raw Service using @stomp/stomp.js\nYou will only need the public properties and\nmethods listed unless you are an advanced user. This service handles subscribing to a\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you will like to pass the configuration as a dependency,\nplease use StompService class.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    connectObservable\n                                \n                                \n                                    serverHeadersObservable\n                                \n                                \n                                    defaultMessagesObservable\n                                \n                                \n                                    receiptsObservable\n                                \n                                \n                                    errorSubject\n                                \n                                \n                                    config\n                                \n                                \n                                    client\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:221\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:143\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:132\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:157\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string | publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:183\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            waitForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:215\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:40\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        connectObservable\n                    \n                \n\n                \n                    \n                        getconnectObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:63\n                                \n                            \n                    \n                        \n                                Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        serverHeadersObservable\n                    \n                \n\n                \n                    \n                        getserverHeadersObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:76\n                                \n                            \n                    \n                        \n                                Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultMessagesObservable\n                    \n                \n\n                \n                    \n                        getdefaultMessagesObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:83\n                                \n                            \n                    \n                        \n                                Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        receiptsObservable\n                    \n                \n\n                \n                    \n                        getreceiptsObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:90\n                                \n                            \n                    \n                        \n                                Will emit all receipts\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorSubject\n                    \n                \n\n                \n                    \n                        geterrorSubject()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:98\n                                \n                            \n                    \n                        \n                                Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:103\n                                \n                            \n                    \n                        \n                                Set configuration \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        client\n                    \n                \n\n                \n                    \n                        getclient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:219\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\nimport {RxStomp, RxStompConfig, RxStompState} from '@stomp/rx-stomp';\n\nimport {publishParams, Client, Message, Frame} from '@stomp/stompjs';\n\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {StompState} from './stomp-state';\nimport { StompHeaders } from './stomp-headers';\nimport {StompConfig} from './stomp.config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Raw Service using @stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\n@Injectable()\nexport class StompRService extends RxStomp {\n  /**\n   * State of the STOMPService\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public state: BehaviorSubject;\n\n  private static _mapStompState(st: RxStompState): StompState {\n    if (st === RxStompState.CONNECTING) {\n      return StompState.TRYING;\n    }\n    if (st === RxStompState.OPEN) {\n      return StompState.CONNECTED;\n    }\n    if (st === RxStompState.CLOSING) {\n      return StompState.DISCONNECTING;\n    }\n    if (st === RxStompState.CLOSED) {\n      return StompState.CLOSED;\n    }\n  }\n\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   */\n  get connectObservable(): Observable {\n    return this.connected$.pipe(map((st: RxStompState): StompState => {\n      return StompRService._mapStompState(st);\n    }));\n  }\n\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   */\n  get serverHeadersObservable(): Observable {\n    return this.serverHeaders$;\n  }\n\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   */\n  get defaultMessagesObservable(): Subject {\n    return this.unhandledMessage$;\n  }\n\n  /**\n   * Will emit all receipts\n   */\n  get receiptsObservable(): Subject {\n    return this.unhandledReceipts$;\n  }\n\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   */\n  get errorSubject(): Subject {\n    return this.stompErrors$;\n  }\n\n  /** Set configuration */\n  set config(config: StompConfig) {\n    const rxStompConfig: RxStompConfig = { };\n\n    if (typeof(config.url) === 'string') {\n      rxStompConfig.brokerURL = config.url;\n    } else {\n      rxStompConfig.webSocketFactory = config.url;\n    }\n\n    // Configure client heart-beating\n    rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n    rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n\n    // Auto reconnect\n    rxStompConfig.reconnectDelay = config.reconnect_delay;\n\n    if (config.debug) {\n      rxStompConfig.debug = (str: string): void => {\n        console.log(new Date(), str);\n      };\n    }\n\n    rxStompConfig.connectHeaders = config.headers;\n\n    this.configure(rxStompConfig);\n  }\n  /**\n   * It will connect to the STOMP broker.\n   */\n  public initAndConnect(): void {\n    // disconnect if connected\n    this.deactivate();\n\n    // Attempt connection, passing in a callback\n    this.activate();\n  }\n\n  /**\n   * It will disconnect from the STOMP broker.\n   */\n  public disconnect(): void {\n    this.deactivate();\n  }\n\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param queueName\n   * @param message\n   * @param headers\n   */\n  public publish(queueName: string|publishParams, message?: string, headers: StompHeaders = {}): void {\n    if (typeof queueName === 'string') {\n      super.publish({destination: queueName as string, body: message, headers});\n    } else {\n      const pubParams: publishParams = queueName;\n      super.publish(pubParams);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, mssages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param queueName\n   * @param headers\n   */\n  public subscribe(queueName: string, headers: StompHeaders = {}): Observable {\n    return this.watch(queueName, headers);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public waitForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    super.watchForReceipt(receiptId, callback);\n  }\n\n  get client(): Client {\n    return this._stompClient;\n  }\n\n  public constructor() {\n    super();\n\n    this.state = new BehaviorSubject(StompState.CLOSED);\n\n    this.connectionState$.subscribe((st: RxStompState) => {\n      this.state.next(StompRService._mapStompState(st));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\n\n            \n\n            \n                Example\n            \n            \n            \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompSubscription.html":{"url":"classes/StompSubscription.html","title":"class - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:12\n                            \n                        \n\n                \n                    \n                        Id associated with this subscription.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unsubscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unsubscribe:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:17\n                            \n                        \n\n                \n                    \n                        Unsubscribe. See Client#unsubscribe for an example.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transaction.html":{"url":"classes/Transaction.html","title":"class - Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/transaction.ts\n        \n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                abort\n                            \n                            \n                                    Public\n                                commit\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            abort\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        abort:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:22\n                            \n                        \n\n                \n                    \n                        Abort this transaction. See Client#abort for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            commit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        commit:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:17\n                            \n                        \n\n                \n                    \n                        Commit this transaction. See Client#commit for an example.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/transaction.ts:12\n                            \n                        \n\n                \n                    \n                        You will need to access this to send, ack, or nack within this transaction.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Transaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  public id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  public commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  public abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:23\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_0\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_0:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:10\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.0\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_1:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.1'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:14\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.1\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.2'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:18\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.2\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            versions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        versions:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            protocolVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        protocolVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:44\n                            \n                        \n\n\n                \n                    \n                            Used while creating a WebSocket\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportedVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        supportedVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:37\n                            \n                        \n\n\n                \n                    \n                            Used as part of CONNECT STOMP Frame\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompRpcConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompRPCService\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n            \n            \n                function\n            \n            \n                rxStompServiceFactory\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompService\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp-r.service.ts\n            \n            \n                injectable\n            \n            \n                StompRService\n            \n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp.service.ts\n            \n            \n                injectable\n            \n            \n                StompService\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            \n                class\n            \n            \n                RxStompConfig\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            \n                class\n            \n            \n                RxStompRPCConfig\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            \n                class\n            \n            \n                RxStompRPC\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            \n                class\n            \n            \n                RxStomp\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            \n                class\n            \n            \n                Client\n            \n            \n                100 %\n                (32/32)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            \n                class\n            \n            \n                CompatClient\n            \n            \n                100 %\n                (35/35)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            \n                class\n            \n            \n                Stomp\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/frame.ts\n            \n            \n                class\n            \n            \n                Frame\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/message.ts\n            \n            \n                class\n            \n            \n                Message\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            \n                class\n            \n            \n                StompConfig\n            \n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            \n                class\n            \n            \n                StompHeaders\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            \n                class\n            \n            \n                StompSubscription\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/transaction.ts\n            \n            \n                class\n            \n            \n                Transaction\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            \n                interface\n            \n            \n                IPublishParams\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            \n                class\n            \n            \n                Versions\n            \n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.6\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPrat of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rxStompServiceFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nrxStompServiceFactory(rxStompConfig)\n                    \n                \n\n\n\n\n                \n                    \n                            Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            messageCheckCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        closeEventCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a CloseEvent\nas parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        closeEventCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        debugFnType\n                    \n                \n                    \n                        \n                            This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        debugFnType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        frameCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Frame as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        frameCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        messageCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Message as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        messageCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        messageCheckCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a Message as parameter.\nThe callback will need to return a boolean value.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        messageCheckCallbackType:     function\n\n                    \n                \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n        \n            \n                \n                    \n                        \n                        setupReplyQueueFnType\n                    \n                \n                    \n                        \n                            See the guide for example\nPrat of @stomp/rx-stomp\n\n                        \n                    \n                \n                    \n                        setupReplyQueueFnType:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
