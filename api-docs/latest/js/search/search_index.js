var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/IFrame.html",[0,0.885,1,1.199]],["body/interfaces/IFrame.html",[0,1.047,1,2.314,2,1.748,3,0.464,4,0.464,5,0.399,6,1.953,7,2.507,8,0.464,9,3.749,10,0.192,11,2.59,12,3.749,13,3.219,14,4.554,15,3.219,16,1.821,17,4.554,18,3.219,19,2.018,20,2.507,21,1.542,22,0.359,23,0.776,24,1.488,25,3.749,26,0.224,27,0.874,28,2.922,29,2.85,30,4.624,31,5.307,32,3.403,33,0.632,34,0.04,35,1.111,36,1.273,37,2.823,38,1.821,39,4.554,40,2.011,41,2.823,42,2.507,43,4.554,44,4.554,45,1.821,46,3.749,47,0.681,48,2.92,49,2.92,50,1.488,51,0.596,52,3.219,53,2.92,54,0.023,55,0.029,56,0.023]],["title/interfaces/IMessage.html",[0,0.885,24,0.98]],["body/interfaces/IMessage.html",[0,1.062,1,2.024,2,1.771,3,0.47,4,0.47,5,0.405,6,1.979,8,0.47,10,0.121,11,1.593,20,2.528,21,1.421,22,0.399,23,0.862,24,1.743,25,3.781,26,0.227,27,1.024,29,1.771,33,0.57,34,0.04,36,1.214,45,1.837,47,0.882,48,2.96,50,1.501,51,0.601,54,0.023,55,0.03,56,0.023,57,2.541,58,2.263,59,2.634,60,2.847,61,1.593,62,2.847,63,4.593,64,0.96,65,3.138,66,1.502,67,2.263,68,4.64,69,4.64,70,1.421,71,5.334,72,5.334,73,3.77,74,1.928,75,3.306,76,4.593,77,4.593,78,3.595,79,2.541,80,3.595,81,3.595,82,3.595,83,2.541,84,3.595,85,2.263,86,3.595,87,2.541]],["title/interfaces/IPublishParams.html",[0,0.885,88,1.329]],["body/interfaces/IPublishParams.html",[0,1.192,1,1.838,2,1.457,3,0.387,4,0.387,5,0.333,8,0.387,10,0.099,11,2.037,16,1.614,21,1.481,22,0.444,23,0.961,24,1.502,26,0.186,27,0.775,28,2.845,29,2.739,30,2.434,32,3.061,33,0.653,34,0.041,35,1.105,36,1.184,40,1.838,41,2.502,47,0.882,50,1.614,51,0.737,54,0.019,55,0.026,56,0.019,59,1.789,61,2.291,85,2.547,87,2.853,88,2.188,89,2.09,90,1.459,91,2.853,92,2.53,93,2.853,94,1.264,95,3.308,96,3.491,97,2.853,98,3.323,99,1.192,100,2.853,101,2.853,102,3.491,103,2.853,104,1.989,105,2.502,106,4.036,107,2.291,108,2.547,109,1.457,110,2.09,111,2.09,112,2.09,113,2.09,114,2.957,115,3.323,116,2.957,117,2.09,118,3.323,119,2.434,120,2.434,121,2.434,122,2.09,123,1.833,124,2.434,125,2.09,126,1.833,127,2.09,128,1.068,129,4.036,130,2.853,131,4.036,132,2.957,133,2.09,134,1.628,135,2.957]],["title/interfaces/IRxStompPublishParams.html",[0,0.885,136,1.65]],["body/interfaces/IRxStompPublishParams.html",[0,1.209,2,2.017,3,0.536,4,0.536,5,0.461,8,0.536,10,0.18,16,1.992,22,0.393,23,0.698,26,0.258,27,0.957,33,0.461,34,0.04,40,2.147,47,0.786,51,0.536,54,0.026,55,0.032,56,0.026,59,2.208,67,2.454,88,2.38,94,1.072,99,1.471,104,2.454,105,3.463,136,2.742,137,1.637,138,1.637,139,2.538,140,3.371,141,4.982,142,4.101,143,4.982,144,1.327,145,3.949,146,4.982,147,3.075,148,4.982,149,4.982,150,3.521,151,4.982,152,4.982,153,4.095]],["title/interfaces/ITransaction.html",[0,0.885,154,2.119]],["body/interfaces/ITransaction.html",[0,1.187,2,1.981,3,0.526,4,0.526,5,0.453,6,2.213,8,0.526,19,2.183,20,2.712,22,0.317,23,0.685,26,0.254,27,0.946,33,0.6,34,0.04,35,1.023,51,0.526,54,0.026,55,0.032,56,0.026,64,0.946,66,1.518,68,4.055,69,4.055,70,1.479,85,2.427,154,3.482,155,3.309,156,5.871,157,3.309,158,2.841,159,4.02,160,4.02,161,4.02,162,5.797,163,5.797,164,2.735,165,4.926,166,4.926,167,3.054,168,4.055,169,4.02,170,4.02]],["title/injectables/InjectableRxStompConfig.html",[171,0.98,172,1.858]],["body/injectables/InjectableRxStompConfig.html",[3,0.293,4,0.293,5,0.252,8,0.293,10,0.181,16,2.014,18,1.585,19,1.748,20,1.234,21,1.051,22,0.261,26,0.141,27,0.637,33,0.638,34,0.039,35,0.431,36,0.795,38,1.326,40,1.743,42,1.234,47,0.637,50,1.289,51,0.293,54,0.015,55,0.021,56,0.015,61,1.932,64,0.83,66,0.883,67,1.634,70,1.342,74,0.81,94,1.289,99,0.662,104,2.482,107,0.994,108,1.105,109,1.105,128,1.426,134,1.825,144,0.597,147,2.172,171,1.424,172,2.055,173,1.234,174,0.897,175,1.39,176,0.733,177,0.897,178,1.326,179,1.198,180,0.133,181,1.577,182,2.347,183,2.73,184,2.055,185,2.344,186,1.634,187,2.147,188,2.344,189,2.344,190,2.344,191,3.081,192,1.326,193,3.588,194,1.944,195,3.316,196,3.588,197,3.316,198,2.446,199,2.73,200,1.634,201,3.316,202,1.932,203,3.316,204,3.316,205,2.344,206,3.316,207,3.316,208,3.316,209,3.316,210,2.73,211,1.597,212,2.344,213,2.055,214,1.825,215,1.825,216,1.825,217,2.344,218,2.344,219,1.825,220,1.825,221,2.344,222,2.344,223,1.825,224,2.344,225,2.344,226,2.344,227,3.512,228,1.359,229,2.243,230,1.585,231,2.243,232,1.39,233,1.585,234,2.73,235,0.979,236,1.846,237,1.846,238,2.446,239,2.344,240,1.846,241,1.846,242,1.585,243,1.846,244,1.932,245,2.73,246,1.234,247,1.39,248,1.846,249,1.846,250,1.846,251,1.846,252,1.846,253,1.846,254,1.234,255,1.846,256,1.39,257,1.846,258,1.846,259,3.454,260,1.585,261,2.243,262,1.585,263,1.846,264,1.846,265,1.585,266,2.73,267,2.055,268,2.446,269,2.243,270,1.585,271,2.73,272,1.39,273,1.39,274,1.846,275,1.846,276,2.344,277,1.585,278,1.846,279,1.846,280,1.39,281,1.105,282,1.39,283,1.585,284,2.243,285,2.73,286,0.994,287,1.846,288,2.243,289,1.846,290,1.585,291,2.243,292,1.585,293,2.399,294,2.243,295,1.846,296,2.73,297,2.73,298,3.248,299,2.446,300,3.248,301,1.846,302,2.243,303,2.73,304,1.585,305,2.243,306,1.846,307,1.39,308,1.846,309,1.846,310,1.846,311,1.846,312,1.846,313,1.846,314,1.39,315,1.825,316,1.39,317,1.846,318,1.846,319,1.585,320,1.585,321,2.243,322,1.585,323,2.243,324,1.39,325,1.846,326,1.846,327,2.243,328,1.234,329,1.846,330,1.39,331,1.585,332,1.846,333,1.846,334,1.846,335,1.846,336,2.344,337,1.39,338,1.846,339,1.846,340,1.39,341,1.743,342,2.243,343,1.39,344,1.234,345,1.585,346,2.344,347,2.789,348,1.846,349,1.825,350,1.585,351,1.846,352,1.748,353,1.846,354,1.585,355,2.243,356,2.055,357,1.585,358,1.39,359,2.344,360,1.234,361,1.846,362,1.846,363,1.39,364,1.39,365,0.897,366,2.73,367,1.846,368,1.585,369,1.846,370,1.39,371,1.39]],["title/injectables/InjectableRxStompRPCConfig.html",[171,0.98,372,1.477]],["body/injectables/InjectableRxStompRPCConfig.html",[3,0.503,4,0.503,5,0.433,8,0.503,10,0.161,22,0.378,26,0.243,27,0.92,33,0.54,34,0.04,35,0.739,47,0.92,50,1.706,51,0.627,54,0.025,55,0.031,56,0.025,64,0.931,67,2.362,94,1.176,99,1.136,125,2.719,126,2.385,144,1.025,171,1.786,173,2.118,174,1.538,175,2.385,176,1.257,177,1.538,178,2.186,179,1.732,180,0.129,181,1.917,187,2.362,192,2.186,200,1.895,211,1.456,227,2.972,228,1.15,365,1.538,371,2.385,372,2.771,373,1.538,374,2.866,375,3.947,376,3.947,377,3.389,378,3.389,379,3.947,380,3.947,381,3.847,382,1.257,383,3.389,384,3.947,385,2.719,386,2.719,387,2.719,388,3.167,389,2.385,390,3.167,391,2.385,392,3.847,393,2.719,394,2.118,395,2.118]],["title/classes/RxStomp.html",[180,0.101,235,0.885]],["body/classes/RxStomp.html",[1,1.651,3,0.104,4,0.104,5,0.089,8,0.104,10,0.19,11,2.111,13,1.63,15,3.123,16,2.137,19,1.298,21,1.199,22,0.15,23,0.45,24,0.864,26,0.05,27,0.271,28,1.27,29,2.086,32,1.179,33,0.53,34,0.041,35,0.813,36,0.634,37,0.873,38,1.269,40,0.922,41,1.816,42,0.776,45,0.563,47,0.562,50,1.167,51,0.104,52,3.477,54,0.005,55,0.009,56,0.005,58,1.136,59,1.919,60,1.43,61,1.582,62,0.873,64,0.24,65,0.873,66,0.845,70,0.995,73,2.243,74,1.147,75,2.099,79,0.56,83,0.56,85,2.133,88,0.624,90,1.147,91,0.996,92,0.776,93,1.345,94,0.496,95,2.315,96,1.63,97,0.996,99,0.681,100,2.993,101,2.64,102,3.123,103,2.07,104,1.563,105,1.816,107,0.624,108,1.443,109,0.694,110,2.07,113,2.993,115,0.652,118,0.652,120,0.652,121,0.652,123,0.873,124,0.652,128,1.147,130,0.56,133,2.64,134,1.27,136,1.612,137,1.856,138,1.856,139,1.816,144,0.375,145,0.56,147,2.653,150,3.281,158,0.996,164,1.136,167,2.099,176,0.622,179,0.286,180,0.064,181,0.563,182,1.269,184,0.491,185,0.996,186,1.443,193,0.652,194,1.302,198,1.816,200,1.759,202,0.624,211,1.474,213,1.179,214,0.776,215,0.776,216,1.047,219,0.776,220,0.776,223,0.776,228,1.097,232,1.43,233,1.63,235,1.054,238,1.43,242,0.56,244,1.777,246,0.776,247,2.684,256,0.873,259,3.049,267,0.873,270,0.56,272,0.873,273,0.873,280,1.43,281,1.443,282,1.816,286,1.958,293,0.776,299,1.179,307,1.967,314,0.491,315,1.966,316,0.873,324,1.43,328,0.776,330,1.43,337,0.873,340,2.099,343,1.179,344,1.455,349,1.612,350,0.56,352,1.777,358,0.873,360,0.436,363,0.873,364,0.873,365,0.922,382,0.754,389,0.873,393,0.56,396,0.234,397,0.652,398,1.16,399,0.776,400,1.409,401,1.409,402,1.409,403,1.409,404,1.816,405,1.902,406,1.899,407,1.409,408,1.72,409,2.272,410,2.099,411,1.409,412,1.409,413,1.409,414,1.409,415,1.409,416,1.409,417,1.409,418,1.409,419,3.298,420,1.899,421,1.566,422,1.566,423,1.566,424,1.566,425,1.566,426,1.566,427,1.136,428,2.176,429,1.16,430,1.899,431,1.16,432,1.16,433,1.409,434,1.902,435,2.644,436,1.455,437,0.792,438,0.792,439,3.398,440,1.899,441,1.16,442,1.16,443,1.16,444,1.869,445,3.075,446,1.899,447,1.16,448,1.899,449,1.16,450,2.612,451,0.792,452,3.075,453,1.16,454,2.176,455,1.899,456,1.16,457,1.345,458,0.792,459,0.996,460,1.16,461,2.393,462,1.16,463,2.099,464,1.63,465,3.704,466,0.792,467,2.787,468,1.16,469,1.16,470,1.899,471,2.835,472,2.787,473,0.996,474,0.792,475,1.899,476,1.16,477,1.16,478,1.899,479,1.16,480,0.996,481,0.792,482,1.16,483,2.393,484,1.16,485,1.899,486,1.16,487,1.16,488,1.816,489,1.869,490,0.792,491,1.16,492,1.899,493,2.787,494,1.899,495,1.899,496,1.16,497,0.996,498,0.792,499,1.16,500,0.996,501,1.16,502,0.996,503,0.792,504,1.16,505,1.16,506,1.16,507,1.16,508,1.16,509,0.996,510,0.996,511,2.612,512,1.899,513,1.16,514,1.16,515,1.16,516,0.792,517,1.16,518,1.16,519,1.16,520,1.16,521,1.16,522,1.16,523,1.899,524,1.16,525,1.16,526,1.16,527,1.16,528,1.16,529,0.996,530,0.792,531,2.411,532,1.899,533,0.792,534,1.63,535,1.16,536,1.16,537,2.243,538,1.16,539,1.16,540,1.16,541,1.16,542,0.792,543,1.16,544,1.16,545,0.996,546,1.16,547,1.16,548,0.996,549,1.16,550,1.16,551,0.996,552,1.16,553,1.16,554,1.16,555,1.16,556,0.996,557,1.899,558,1.16,559,1.345,560,1.16,561,1.869,562,1.16,563,1.16,564,1.566,565,2.787,566,1.16,567,1.566,568,0.996,569,1.16,570,2.787,571,1.899,572,1.16,573,1.16,574,2.411,575,1.899,576,1.16,577,1.16,578,0.996,579,1.899,580,1.16,581,1.566,582,1.16,583,1.899,584,1.16,585,1.16,586,0.792,587,3.486,588,1.16,589,1.16,590,1.899,591,1.16,592,0.873,593,1.16,594,1.16,595,1.63,596,1.16,597,1.345,598,1.16,599,1.566,600,1.16,601,1.16,602,1.16,603,1.16,604,0.873,605,1.16,606,1.16,607,1.16,608,1.16,609,1.16,610,1.16,611,0.792,612,1.16,613,1.16,614,1.869,615,1.16,616,2.411,617,1.16,618,1.16,619,0.996,620,1.16,621,1.16,622,1.16,623,1.16,624,1.566,625,1.16,626,1.16,627,1.16,628,2.176,629,1.16,630,1.16,631,1.16,632,1.16,633,0.792,634,0.792,635,1.409,636,1.409,637,1.409,638,1.409,639,0.792,640,0.792,641,1.409,642,1.409,643,1.16,644,0.792,645,0.652,646,1.43,647,1.43,648,0.491,649,0.56,650,1.899,651,1.409,652,1.409,653,1.409,654,0.792,655,0.792,656,0.792,657,0.792,658,0.792,659,1.902,660,1.16,661,0.792,662,0.792,663,3.173,664,0.792,665,0.652,666,0.792,667,0.652,668,0.652,669,0.652,670,0.652,671,0.792,672,0.792,673,1.409,674,0.792,675,0.792,676,0.56,677,0.792,678,1.902,679,0.792,680,1.902,681,1.409,682,1.409,683,1.409,684,1.566,685,0.792,686,1.409,687,0.792,688,0.792,689,1.409,690,1.409,691,2.307,692,0.792,693,1.902,694,0.792,695,1.902,696,0.792,697,0.792,698,0.792,699,0.792,700,0.792,701,0.792,702,0.792,703,0.792,704,0.792,705,0.792,706,0.792,707,0.792,708,0.652,709,0.652,710,1.902,711,0.792,712,0.792,713,0.792,714,1.409,715,0.792,716,0.792,717,0.792,718,0.792,719,0.792,720,0.792,721,0.792,722,0.792,723,0.652,724,0.792,725,1.902,726,0.792,727,0.652,728,0.792,729,0.652,730,1.409,731,0.652,732,0.792,733,0.652,734,0.792,735,0.652,736,0.792,737,0.652,738,0.792,739,0.792,740,0.792,741,0.792,742,0.792,743,1.566,744,1.409,745,1.16,746,0.792,747,0.792,748,0.792,749,0.792,750,0.792,751,0.792,752,0.792,753,0.792,754,0.792,755,0.792,756,0.792,757,0.792,758,0.792,759,0.792,760,0.792,761,0.792,762,0.792,763,1.409,764,1.409,765,0.792,766,0.792,767,0.792,768,0.792,769,0.792,770,0.792,771,0.792,772,1.409,773,1.409,774,1.902,775,0.792,776,1.409,777,0.792,778,0.792,779,0.792,780,0.792,781,0.792,782,0.792,783,0.792,784,0.792,785,0.792,786,0.792,787,0.792,788,1.409,789,0.792,790,0.56,791,0.56,792,1.409,793,0.792,794,0.792,795,0.792,796,0.792,797,0.652,798,0.792,799,0.792,800,1.409,801,0.792,802,0.652,803,0.56,804,0.792,805,0.792,806,1.409,807,0.792,808,0.792,809,0.792,810,0.652,811,0.792,812,0.792,813,0.792,814,0.792,815,0.792,816,0.792,817,0.792,818,0.792,819,0.792,820,1.409,821,0.792,822,0.792,823,0.792,824,0.792,825,0.792,826,0.792,827,0.792,828,0.792,829,0.792,830,0.792,831,0.792,832,0.792,833,0.792,834,0.792]],["title/classes/RxStompConfig.html",[180,0.101,182,1.199]],["body/classes/RxStompConfig.html",[3,0.22,4,0.22,5,0.189,8,0.22,9,2.189,10,0.196,16,2.121,18,1.879,19,1.178,20,1.463,21,1.157,22,0.21,23,0.286,26,0.106,27,0.51,33,0.604,34,0.04,35,0.51,36,0.98,40,1.886,42,1.463,45,1.063,47,0.51,51,0.22,54,0.011,55,0.017,56,0.011,58,1.31,61,2.091,64,0.639,66,0.999,70,1.257,74,0.961,94,1.258,99,0.785,104,2.613,107,1.178,108,1.31,109,1.625,128,1.57,134,2.064,137,2.166,138,2.166,144,0.708,147,2.391,176,0.549,177,0.672,180,0.056,181,1.063,182,1.063,187,1.847,194,1.847,198,1.648,211,1.596,212,2.331,213,2.045,214,1.816,215,1.816,216,1.816,217,2.331,218,2.331,219,1.816,220,1.816,221,2.331,222,2.331,223,1.816,224,2.331,225,2.331,226,2.331,228,1.286,230,1.879,232,1.648,233,1.879,234,3.087,235,1.393,236,2.189,237,2.189,238,2.693,239,2.65,240,1.384,241,2.189,242,1.188,243,2.189,244,2.091,245,2.715,246,1.463,247,1.648,248,2.189,249,2.189,250,2.189,251,2.189,252,2.189,253,2.189,254,1.463,255,2.189,256,1.648,257,2.189,258,2.189,259,3.561,260,1.879,262,1.879,263,2.189,264,2.189,265,1.879,266,3.087,267,2.324,268,2.693,270,1.879,271,3.087,272,1.648,273,1.648,274,2.189,275,2.189,276,2.65,277,1.879,278,2.189,279,2.189,280,1.648,281,1.31,282,1.648,283,1.879,285,3.087,286,1.462,287,2.189,289,2.189,290,1.879,292,1.879,293,2.597,295,2.189,296,3.087,297,3.087,298,3.576,299,2.693,300,3.576,301,2.189,303,3.087,304,1.879,306,2.189,307,1.648,308,2.189,309,2.189,310,2.189,311,2.189,312,2.189,313,2.189,314,1.648,315,2.064,316,1.648,317,2.189,318,2.189,319,1.879,320,1.879,322,1.879,324,1.648,325,2.189,326,2.189,328,1.463,329,2.189,330,1.648,331,1.879,332,2.189,333,2.189,334,2.189,335,2.189,336,2.65,337,1.648,338,2.189,339,2.189,340,1.648,341,1.942,343,1.648,344,1.463,345,1.879,346,2.65,347,3.07,348,2.189,349,2.064,350,1.879,351,2.189,352,1.925,353,2.189,354,1.879,356,2.324,357,1.879,358,1.648,359,2.65,360,2.064,361,2.189,362,2.189,363,1.648,364,1.648,365,1.063,366,3.087,367,2.189,368,1.879,369,2.189,370,1.648,396,0.496,510,1.188,604,1.648,676,1.188,835,2.658,836,2.658,837,1.681,838,1.681,839,1.384,840,1.384,841,1.681,842,1.681,843,1.681,844,1.384,845,1.681,846,1.384,847,1.681,848,1.681,849,1.681,850,1.681,851,1.681,852,1.681,853,2.658,854,2.331,855,1.384,856,1.384,857,1.188,858,1.384,859,2.189,860,1.384,861,1.384,862,1.384,863,1.384,864,1.384,865,1.681,866,1.681,867,1.681,868,1.681,869,1.681,870,1.384]],["title/classes/RxStompRPC.html",[180,0.101,871,1.65]],["body/classes/RxStompRPC.html",[3,0.356,4,0.356,5,0.306,8,0.356,10,0.183,21,1.27,22,0.3,23,0.463,24,1.437,26,0.172,28,2.097,29,1.877,33,0.495,34,0.04,36,0.914,45,1.524,47,0.998,51,0.356,54,0.018,55,0.025,56,0.018,58,1.877,59,1.205,60,2.362,64,0.928,66,1.015,74,1.722,90,1.589,92,2.939,94,0.946,95,1.686,128,1.377,137,1.905,138,1.905,144,1.015,164,2.63,167,1.686,176,1.245,178,1.905,180,0.091,186,1.877,187,2.348,192,1.905,200,2.167,202,1.689,211,1.385,228,1.055,235,1.535,244,2.223,265,1.923,360,1.497,373,2.243,374,2.348,377,3.675,378,3.368,382,1.437,383,1.923,385,1.923,386,1.923,387,1.923,391,2.362,395,2.097,396,0.803,399,2.097,404,1.686,408,1.689,409,2.862,410,2.954,427,1.877,436,1.497,471,2.693,488,3.11,592,2.362,619,2.693,643,2.239,645,2.239,648,1.686,649,3.109,660,3.923,709,2.239,790,2.693,791,2.693,802,2.239,810,2.239,871,2.097,872,2.239,873,3.81,874,3.81,875,2.239,876,3.923,877,2.72,878,1.923,879,3.137,880,2.72,881,3.923,882,2.693,883,3.137,884,3.137,885,3.137,886,2.72,887,3.137,888,2.693,889,3.137,890,3.137,891,3.923,892,3.137,893,2.72,894,2.72,895,4.765,896,4.765,897,2.72,898,2.72,899,2.72,900,2.72,901,2.72,902,3.81,903,3.81,904,3.81,905,2.72,906,2.72,907,2.72,908,2.72,909,2.72,910,3.81,911,2.72,912,2.72,913,2.72,914,3.81,915,4.398,916,3.81,917,2.72,918,2.72,919,2.72,920,2.72,921,2.72,922,2.72,923,2.72,924,2.72]],["title/classes/RxStompRPCConfig.html",[180,0.101,374,1.477]],["body/classes/RxStompRPCConfig.html",[3,0.486,4,0.486,5,0.418,8,0.486,10,0.187,22,0.293,23,0.633,24,1.214,26,0.234,27,0.901,33,0.579,34,0.04,35,0.987,47,0.987,51,0.614,54,0.024,55,0.03,56,0.024,64,0.984,66,1.37,94,1.161,99,1.385,137,2.056,138,2.056,144,0.99,176,1.214,177,1.486,180,0.125,187,2.66,192,2.308,211,1.515,228,1.125,235,1.518,373,2.226,374,2.311,379,4.445,380,4.232,382,1.533,383,3.816,384,4.445,385,3.316,386,3.316,387,3.316,388,3.862,389,2.908,390,3.862,391,3.187,393,3.316,396,1.097,404,2.304,409,2.582,648,2.908,925,3.717,926,3.717]],["title/injectables/RxStompRPCService.html",[171,0.98,927,1.858]],["body/injectables/RxStompRPCService.html",[3,0.467,4,0.467,5,0.402,8,0.467,10,0.179,21,0.951,22,0.36,26,0.225,33,0.568,34,0.039,45,1.427,47,1.021,50,1.494,51,0.467,54,0.023,55,0.03,56,0.023,64,0.906,66,0.951,67,2.252,74,1.29,90,1.823,92,2.928,94,1.183,128,1.29,144,0.951,164,2.252,171,1.797,173,1.964,174,1.828,176,1.494,178,2.127,179,1.652,180,0.12,181,1.828,192,2.127,211,1.417,227,2.834,228,1.21,235,1.054,371,2.212,372,2.621,373,2.199,375,3.763,376,3.763,377,3.231,378,3.231,382,1.648,395,1.964,408,2.026,409,2.516,410,3.127,427,2.252,436,1.964,488,2.834,592,2.212,648,2.212,649,3.231,791,2.522,871,3.149,875,3.763,876,4.379,878,2.522,879,2.938,881,3.763,882,2.522,883,2.938,884,2.938,885,2.938,887,2.938,888,2.522,889,2.938,890,2.938,891,3.763,892,2.938,927,2.834,928,2.834,929,2.938,930,2.621,931,3.568,932,3.568,933,3.568,934,3.568,935,3.568]],["title/injectables/RxStompService.html",[171,0.98,930,1.477]],["body/injectables/RxStompService.html",[1,1.525,3,0.227,4,0.227,5,0.195,8,0.227,10,0.19,11,2.113,13,1.225,15,3.254,16,2.179,19,1.207,21,1.271,22,0.215,24,0.566,26,0.109,27,0.523,28,1.5,29,2.268,32,1.689,33,0.614,34,0.039,35,0.916,36,0.653,38,1.525,40,0.693,41,2.086,42,0.954,45,0.693,47,0.523,50,1.246,51,0.227,52,3.852,54,0.011,55,0.018,56,0.011,59,1.951,61,1.691,62,1.075,64,0.784,65,1.075,66,0.726,67,1.342,70,1.105,73,2.379,74,1.216,75,2.365,85,2.268,88,0.768,90,1.591,91,1.225,93,1.225,94,0.82,95,2.086,96,1.926,97,1.225,99,0.512,100,3.254,101,2.931,102,3.371,103,2.379,104,1.658,105,1.689,107,0.768,108,1.658,110,2.379,113,3.254,123,1.075,128,1.216,133,2.931,134,1.5,136,1.853,139,2.086,144,0.462,145,1.225,147,2.7,150,3.111,164,1.342,167,2.086,171,1.246,173,0.954,174,0.693,178,1.089,179,0.985,180,0.113,181,1.346,182,1.346,183,2.243,184,1.689,185,1.926,186,2.043,187,1.342,188,1.926,189,1.926,190,1.926,191,2.696,192,1.089,194,1.342,198,1.689,200,0.854,202,0.768,211,1.556,214,0.954,215,0.954,216,0.954,219,0.954,220,0.954,223,0.954,227,3.347,228,1.295,232,1.689,235,1.69,244,0.768,246,0.954,247,2.854,256,1.075,259,3.172,267,1.075,272,1.075,273,1.075,280,1.689,281,1.658,282,2.086,293,0.954,299,1.075,307,1.689,315,1.853,316,1.075,324,1.689,328,0.954,330,1.689,337,1.075,340,2.365,343,1.075,344,0.954,349,1.853,352,0.768,358,1.075,363,1.075,364,1.075,365,1.089,371,1.075,382,1.246,389,1.075,404,1.075,406,1.427,408,2.04,409,1.853,410,2.086,419,3.271,420,2.243,421,2.243,422,2.243,423,2.243,424,2.243,425,2.243,426,2.243,427,1.342,428,2.771,429,2.243,430,2.771,431,2.243,432,2.243,439,3.414,440,2.243,441,1.427,442,1.427,443,1.427,444,1.926,445,3.14,446,2.243,447,1.427,448,2.243,449,1.427,450,2.243,452,1.427,453,1.427,454,2.243,455,2.243,456,1.427,457,1.225,459,1.225,460,1.427,461,2.696,462,1.427,463,2.365,464,1.926,465,3.414,467,3.14,468,1.427,469,1.427,470,2.243,471,2.931,472,3.14,473,1.225,475,2.243,476,1.427,477,1.427,478,2.243,479,1.427,480,1.225,482,1.427,483,2.696,484,1.427,485,2.243,486,1.427,487,1.427,488,2.086,489,1.225,491,1.427,492,1.427,493,3.14,494,2.243,495,2.243,496,1.427,497,1.225,499,1.427,500,1.225,501,1.427,502,1.225,504,1.427,505,1.427,506,1.427,507,1.427,508,1.427,509,1.225,510,1.225,511,2.771,512,2.243,513,1.427,514,1.427,515,1.427,517,1.427,518,1.427,519,1.427,520,1.427,521,1.427,522,1.427,523,2.243,524,1.427,525,1.427,526,1.427,527,1.427,528,1.427,529,1.225,531,2.771,532,1.427,534,1.225,535,1.427,536,1.427,537,2.379,538,1.427,539,1.427,540,1.427,541,1.427,543,1.427,544,1.427,545,1.225,546,1.427,547,1.427,548,1.225,549,1.427,550,1.427,551,1.225,552,1.427,553,1.427,554,1.427,555,1.427,556,1.225,557,2.243,558,1.427,559,1.225,560,1.427,561,1.225,562,1.427,563,1.427,564,1.427,565,2.243,566,1.427,567,1.427,568,1.225,569,1.427,570,3.14,571,2.243,572,1.427,573,1.427,574,2.771,575,2.243,576,1.427,577,1.427,578,1.225,579,2.243,580,1.427,581,1.427,582,1.427,583,2.243,584,1.427,585,1.427,587,3.414,588,1.427,589,1.427,590,1.427,591,1.427,592,1.075,593,1.427,594,1.427,595,1.926,596,1.427,597,1.225,598,1.427,599,1.427,600,1.427,601,1.427,602,1.427,603,1.427,604,1.075,605,1.427,606,1.427,607,1.427,608,1.427,609,1.427,610,1.427,612,1.427,613,1.427,614,1.926,615,1.427,616,2.771,617,1.427,618,1.427,619,1.225,620,1.427,621,1.427,622,1.427,623,1.427,624,1.427,625,1.427,626,1.427,627,1.427,628,2.771,629,1.427,630,1.427,631,1.427,632,1.427,928,1.075,930,1.342,936,1.427,937,1.689,938,1.734,939,1.734,940,1.734,941,1.734,942,1.734,943,1.734,944,1.734,945,1.734,946,1.734,947,1.734,948,1.734,949,1.734,950,1.734,951,1.734,952,1.734]],["title/classes/Stomp.html",[10,0.101,180,0.101]],["body/classes/Stomp.html",[3,0.302,4,0.302,5,0.26,8,0.302,10,0.175,19,1.5,22,0.267,23,0.577,26,0.146,27,0.65,33,0.452,34,0.041,35,0.944,38,0.922,47,0.65,50,1.538,51,0.302,54,0.015,55,0.022,56,0.015,58,2.177,64,0.577,66,0.902,70,1.389,74,0.834,75,2.917,90,1.223,94,0.728,99,0.681,107,1.022,127,3.686,128,0.834,158,1.631,168,2.787,179,1.223,180,0.171,181,2.085,186,2.621,200,1.668,202,2.311,205,2.835,211,1.069,228,0.962,244,2.253,246,1.864,262,3.326,268,2.099,277,3.326,286,2.58,314,3.298,315,1.27,328,1.864,341,1.354,349,2.708,352,2.358,356,3.439,357,2.393,359,2.393,360,1.864,365,1.882,370,2.739,382,1.31,394,2.929,395,1.27,396,0.681,399,1.864,408,1.5,419,2.099,427,1.668,457,2.393,461,2.393,464,2.393,500,3.123,534,1.631,537,3.123,551,2.393,556,2.393,561,2.835,578,3.477,597,1.631,614,1.631,790,1.631,797,2.787,854,1.631,857,2.393,878,1.631,953,1.899,954,3.385,955,5.214,956,5.214,957,4.38,958,4.011,959,2.787,960,2.307,961,3.385,962,3.385,963,3.385,964,3.385,965,4.418,966,3.385,967,3.385,968,4.919,969,2.307,970,3.385,971,3.385,972,3.385,973,3.385,974,3.874,975,3.385,976,2.307,977,3.385,978,3.385,979,3.385,980,4.011,981,3.385,982,3.385,983,3.385,984,2.787,985,3.385,986,3.385,987,3.385,988,3.385,989,3.385,990,3.385,991,3.385,992,3.385,993,4.418,994,2.307,995,2.307,996,2.307,997,3.385,998,3.385,999,1.899,1000,2.307,1001,2.307,1002,2.307,1003,3.385,1004,2.307,1005,2.307,1006,4.418,1007,2.307,1008,2.307,1009,3.385,1010,2.307,1011,2.307,1012,2.307,1013,2.307,1014,2.307,1015,2.307]],["title/classes/StompConfig.html",[180,0.101,646,1.858]],["body/classes/StompConfig.html",[3,0.285,4,0.285,5,0.245,8,0.285,10,0.13,21,0.58,22,0.256,23,0.552,26,0.137,27,0.623,33,0.661,34,0.04,35,0.623,36,1.101,37,2.01,40,2.05,45,1.296,47,0.744,50,1.059,51,0.285,54,0.014,55,0.021,56,0.014,62,2.01,64,1.042,70,0.864,79,1.538,94,1.313,109,1.909,111,2.739,112,3.826,117,2.739,122,2.739,142,2.669,177,0.87,180,0.073,184,2.01,194,1.597,211,1.648,212,2.739,213,2.402,214,2.133,215,2.133,216,2.133,217,2.739,218,2.739,219,2.133,220,2.133,221,2.739,222,2.739,223,2.133,224,2.739,225,2.739,226,2.739,228,1.407,230,2.292,260,2.292,268,2.01,283,2.292,286,2.134,290,2.292,292,2.292,293,2.822,304,2.292,320,2.292,322,2.292,336,2.292,341,1.717,354,2.292,370,2.01,382,1.059,396,0.642,436,1.785,463,2.01,473,2.292,480,2.292,497,2.292,502,2.292,529,2.292,545,1.538,646,2.01,665,1.791,667,1.791,668,1.791,669,1.791,676,1.538,708,1.791,723,3.19,727,3.19,729,3.19,731,3.19,733,3.19,735,3.19,737,3.19,839,1.791,840,1.791,844,1.791,846,1.791,854,1.538,855,1.791,856,1.791,857,1.538,858,1.791,859,1.791,860,1.791,861,1.791,862,1.791,863,1.791,864,1.791,870,1.791,1016,3.65,1017,3.242,1018,3.242,1019,3.875,1020,2.176,1021,2.176,1022,2.176,1023,2.176,1024,3.242,1025,2.176,1026,2.176,1027,2.176,1028,3.242,1029,2.176,1030,2.176,1031,3.242,1032,2.176,1033,3.242,1034,2.176,1035,2.176,1036,2.176,1037,2.176,1038,3.242,1039,2.176,1040,2.176,1041,3.242,1042,2.176,1043,2.176,1044,2.176,1045,2.176,1046,2.176,1047,2.176,1048,2.176,1049,2.176,1050,2.176]],["title/classes/StompHeaders.html",[36,0.719,180,0.101]],["body/classes/StompHeaders.html",[3,0.577,4,0.577,5,0.496,8,0.577,10,0.148,12,3.63,16,1.763,21,1.477,22,0.347,23,0.751,34,0.038,35,1.099,36,1.249,37,3.549,38,1.763,49,3.63,51,0.577,54,0.029,55,0.034,56,0.029,90,1.593,180,0.148,228,1.057,239,3.117,319,3.117,396,1.302,483,3.117,604,2.733,1016,3.228,1051,3.63,1052,3.117,1053,4.409,1054,4.409,1055,4.409,1056,4.409,1057,4.409,1058,4.409,1059,4.409,1060,4.409]],["title/classes/StompSubscription.html",[180,0.101,647,1.858]],["body/classes/StompSubscription.html",[3,0.537,4,0.537,5,0.463,8,0.537,10,0.138,21,1.33,22,0.393,23,0.851,26,0.259,27,0.959,33,0.562,34,0.04,35,0.959,36,1.197,47,0.789,51,0.537,54,0.027,55,0.032,56,0.027,60,3.095,64,0.851,65,3.095,66,1.33,70,1.095,74,1.804,83,2.904,85,2.024,164,2.824,180,0.138,211,1.553,228,1.197,396,1.213,399,2.748,489,4.051,647,3.467,1016,3.333,1061,3.383,1062,4.109,1063,4.992,1064,4.109,1065,4.992,1066,4.109]],["title/classes/Versions.html",[180,0.101,341,1.199]],["body/classes/Versions.html",[3,0.424,4,0.424,5,0.365,8,0.424,10,0.184,11,1.902,22,0.379,23,0.552,26,0.204,27,0.824,33,0.6,34,0.04,35,1.103,38,1.924,46,3.533,51,0.424,54,0.021,55,0.028,56,0.021,58,2.114,90,1.17,94,0.696,99,1.513,128,1.852,130,2.289,180,0.162,181,2.191,211,1.568,228,1.34,238,2.66,244,1.902,276,3.873,341,2.338,344,2.362,345,3.033,346,3.873,347,3.873,352,1.435,356,2.66,368,3.033,382,1.058,396,0.956,408,1.902,427,2.114,436,1.783,548,3.873,568,3.033,670,3.533,888,3.033,957,4.775,1067,2.666,1068,4.813,1069,4.813,1070,4.813,1071,4.813,1072,5.124,1073,5.124,1074,3.238,1075,3.238,1076,4.291,1077,4.291,1078,4.291,1079,3.238,1080,5.479,1081,3.238,1082,3.238,1083,3.238,1084,3.238,1085,3.238,1086,3.238,1087,3.238,1088,3.238,1089,3.238,1090,3.238,1091,3.238,1092,3.238]],["title/coverage.html",[1093,3.355]],["body/coverage.html",[0,1.605,1,1.376,5,0.387,6,2.729,7,2.432,10,0.197,24,1.124,33,0.387,34,0.04,36,0.825,54,0.022,55,0.029,56,0.022,57,2.432,70,0.917,88,1.525,89,2.432,136,1.894,137,2.174,138,2.174,139,2.133,140,2.833,154,2.432,155,2.833,171,1.821,172,2.133,174,2.299,175,3.073,176,1.62,177,2.228,180,0.198,182,1.376,235,1.016,254,1.894,281,1.695,286,1.525,341,1.376,352,1.525,372,2.2,373,1.982,374,1.695,397,2.833,646,2.133,647,2.133,871,1.894,872,2.833,927,2.133,928,3.073,929,2.833,930,1.695,936,2.833,937,2.133,953,2.833,974,2.833,1016,3.073,1051,2.833,1061,2.833,1067,2.833,1093,2.833,1094,3.441,1095,3.441,1096,6.112,1097,4.958,1098,5.247,1099,3.441,1100,4.958,1101,3.441,1102,3.441,1103,2.833,1104,2.833,1105,3.441,1106,2.833,1107,3.441,1108,3.441,1109,3.441,1110,2.833,1111,3.441,1112,3.441,1113,4.958,1114,3.441,1115,3.441,1116,3.441,1117,3.441,1118,3.441,1119,3.441,1120,4.466,1121,3.441,1122,3.441,1123,3.441,1124,3.441,1125,3.441]],["title/miscellaneous/enumerations.html",[1126,1.004,1127,2.965]],["body/miscellaneous/enumerations.html",[10,0.193,22,0.411,26,0.279,34,0.034,54,0.029,55,0.034,56,0.029,137,1.766,138,1.766,144,1.177,174,1.766,178,2.085,179,1.596,180,0.148,235,1.304,254,2.432,394,2.432,419,2.738,509,3.122,650,4.566,684,4.292,743,4.292,745,3.636,999,4.292,1104,3.636,1126,1.766,1127,3.636,1128,3.122,1129,5.729,1130,4.417,1131,5.213,1132,4.417,1133,4.417,1134,4.417,1135,4.417,1136,4.417,1137,4.417]],["title/miscellaneous/functions.html",[1052,2.545,1126,1.004]],["body/miscellaneous/functions.html",[10,0.185,22,0.341,26,0.273,34,0.037,54,0.028,55,0.033,56,0.028,64,0.736,70,1.464,90,1.562,94,0.93,157,3.558,174,1.728,178,1.728,179,1.562,182,1.728,188,3.055,189,3.055,190,3.055,191,3.638,192,1.728,194,2.129,196,3.558,199,3.558,202,1.915,205,3.055,210,3.558,254,2.833,365,1.728,382,1.412,399,2.379,408,1.915,444,3.055,459,3.055,928,2.679,930,2.863,937,3.19,1052,3.055,1103,4.237,1126,1.728,1128,3.055,1138,4.322,1139,4.322,1140,4.322,1141,4.322,1142,4.322,1143,4.322,1144,4.322,1145,4.322]],["title/index.html",[26,0.158,1146,2.512,1147,2.512]],["body/index.html",[10,0.193,23,0.85,34,0.032,54,0.027,55,0.032,56,0.027,64,0.85,98,4.424,126,2.543,144,1.329,171,1.34,172,2.543,176,1.63,178,1.64,179,1.942,182,1.64,186,2.021,202,2.21,235,1.473,281,2.021,286,1.818,331,2.899,341,2.149,372,2.021,373,1.64,374,2.021,394,2.258,396,1.651,398,3.377,463,2.543,559,2.899,595,2.899,871,2.745,882,2.899,927,2.543,930,2.021,937,2.543,959,4.106,984,3.377,1106,3.377,1110,3.377,1148,4.102,1149,4.102,1150,4.987,1151,5.59,1152,4.102,1153,4.102,1154,4.102,1155,4.102,1156,4.102,1157,4.102,1158,4.102,1159,4.102,1160,4.102,1161,4.102,1162,4.102,1163,4.102,1164,4.102,1165,4.102,1166,4.102,1167,4.102,1168,4.102,1169,4.102,1170,4.102,1171,5.373,1172,4.102]],["title/modules.html",[1173,3.355]],["body/modules.html",[34,0.035,54,0.031,55,0.035,56,0.031,1173,3.971]],["title/overview.html",[1174,3.355]],["body/overview.html",[2,2.348,34,0.035,54,0.031,55,0.035,56,0.031,173,2.624,396,1.407,1174,3.924,1175,4.766,1176,4.766,1177,4.766]],["title/miscellaneous/typealiases.html",[1126,1.004,1178,3.601]],["body/miscellaneous/typealiases.html",[1,2.13,6,2.712,7,3.482,10,0.179,11,2.183,22,0.463,23,0.988,24,1.74,26,0.254,33,0.453,34,0.032,35,0.772,53,3.309,54,0.026,55,0.032,56,0.026,57,3.482,59,2.183,61,2.524,64,0.685,66,1.071,70,1.544,87,2.841,88,2.183,89,2.841,92,2.712,107,2.524,108,2.806,109,2.427,111,3.482,112,3.482,117,3.482,119,3.309,122,3.482,123,2.492,125,2.841,126,2.492,127,2.841,137,1.607,138,1.607,144,1.071,177,1.97,192,1.607,373,1.97,391,3.054,1126,1.607,1128,2.841,1179,4.02,1180,5.797,1181,4.926]],["title/miscellaneous/variables.html",[803,2.545,1126,1.004]],["body/miscellaneous/variables.html",[10,0.18,26,0.291,34,0.037,38,1.844,54,0.03,55,0.035,56,0.03,99,1.362,174,1.844,175,2.858,176,1.747,177,2.138,365,1.844,372,2.862,373,2.138,394,2.538,395,2.538,803,3.259,1126,1.844,1182,4.611]]],"invertedIndex":[["",{"_index":34,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":299,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["0.1.1",{"_index":241,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["0.3.5",{"_index":257,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["1.0",{"_index":346,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":347,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.2",{"_index":276,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":1176,"title":{},"body":{"overview.html":{}}}],["16/16",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["17/17",{"_index":1114,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":1112,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":525,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["20000",{"_index":524,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["22/23",{"_index":1108,"title":{},"body":{"coverage.html":{}}}],["24/24",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":1102,"title":{},"body":{"coverage.html":{}}}],["37/37",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["38/38",{"_index":1111,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":1113,"title":{},"body":{"coverage.html":{}}}],["40/40",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":1177,"title":{},"body":{"overview.html":{}}}],["6",{"_index":1175,"title":{},"body":{"overview.html":{}}}],["6/6",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":1123,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":573,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["95",{"_index":1107,"title":{},"body":{"coverage.html":{}}}],["_beforeconnect",{"_index":675,"title":{},"body":{"classes/RxStomp.html":{}}}],["_changestate(state",{"_index":832,"title":{},"body":{"classes/RxStomp.html":{}}}],["_connectedpre",{"_index":662,"title":{},"body":{"classes/RxStomp.html":{}}}],["_connectionstatepre",{"_index":661,"title":{},"body":{"classes/RxStomp.html":{}}}],["_debug",{"_index":679,"title":{},"body":{"classes/RxStomp.html":{}}}],["_queuedmessages",{"_index":672,"title":{},"body":{"classes/RxStomp.html":{}}}],["_repliesobservable",{"_index":900,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuename",{"_index":897,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_sendqueuedmessages",{"_index":771,"title":{},"body":{"classes/RxStomp.html":{}}}],["_serverheadersbehavioursubject",{"_index":664,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupreplyqueue",{"_index":898,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_stompclient",{"_index":674,"title":{},"body":{"classes/RxStomp.html":{}}}],["abort",{"_index":162,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["accept",{"_index":1053,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":20,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["accessors",{"_index":433,"title":{},"body":{"classes/RxStomp.html":{}}}],["ack",{"_index":68,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["acknowledgement",{"_index":73,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["acknowledges",{"_index":631,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["activate",{"_index":428,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["activated",{"_index":1142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["active",{"_index":435,"title":{},"body":{"classes/RxStomp.html":{}}}],["activemq",{"_index":390,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["acts",{"_index":954,"title":{},"body":{"classes/Stomp.html":{}}}],["actual",{"_index":307,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["actually",{"_index":494,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["add",{"_index":519,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["added",{"_index":103,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["addition",{"_index":1055,"title":{},"body":{"classes/StompHeaders.html":{}}}],["additional",{"_index":141,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["advance",{"_index":197,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["advanced",{"_index":17,"title":{},"body":{"interfaces/IFrame.html":{}}}],["alias",{"_index":53,"title":{},"body":{"interfaces/IFrame.html":{},"miscellaneous/typealiases.html":{}}}],["aliased",{"_index":87,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":1179,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":614,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["allows",{"_index":551,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["already",{"_index":444,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["alternative",{"_index":977,"title":{},"body":{"classes/Stomp.html":{}}}],["alternatively",{"_index":989,"title":{},"body":{"classes/Stomp.html":{}}}],["always",{"_index":448,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["angular's",{"_index":208,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/core",{"_index":371,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["angular2",{"_index":894,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["angular7.html",{"_index":190,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["another",{"_index":998,"title":{},"body":{"classes/Stomp.html":{}}}],["any).assign",{"_index":709,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["anything",{"_index":477,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["api",{"_index":1150,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":209,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["appendmissingnullonincoming",{"_index":212,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["application/octet",{"_index":584,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["appropriate",{"_index":536,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["around",{"_index":883,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["array",{"_index":670,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["article",{"_index":824,"title":{},"body":{"classes/RxStomp.html":{}}}],["assigned",{"_index":677,"title":{},"body":{"classes/RxStomp.html":{}}}],["associated",{"_index":1063,"title":{},"body":{"classes/StompSubscription.html":{}}}],["assumes",{"_index":317,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["async",{"_index":242,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["async](https://developer.mozilla.org/en",{"_index":866,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["asynchronous",{"_index":255,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["asynchronously",{"_index":613,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["attempt",{"_index":343,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["attempted",{"_index":348,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["attempts",{"_index":513,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["attributes",{"_index":836,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["auto",{"_index":534,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["automatically",{"_index":324,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["available",{"_index":1054,"title":{},"body":{"classes/StompHeaders.html":{}}}],["await",{"_index":721,"title":{},"body":{"classes/RxStomp.html":{}}}],["backward",{"_index":125,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["based",{"_index":42,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["beautifully",{"_index":782,"title":{},"body":{"classes/RxStomp.html":{}}}],["before",{"_index":233,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":213,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":470,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["behaviorsubject",{"_index":450,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["behaviorsubject(null",{"_index":699,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(rxstompstate.closed",{"_index":686,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviour",{"_index":761,"title":{},"body":{"classes/RxStomp.html":{}}}],["behavioursubject",{"_index":792,"title":{},"body":{"classes/RxStomp.html":{}}}],["belong",{"_index":1163,"title":{},"body":{"index.html":{}}}],["better",{"_index":750,"title":{},"body":{"classes/RxStomp.html":{}}}],["binary",{"_index":41,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["binarybody",{"_index":28,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["binarydata",{"_index":579,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["bit",{"_index":747,"title":{},"body":{"classes/RxStomp.html":{}}}],["body",{"_index":29,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["body/binarybody",{"_index":44,"title":{},"body":{"interfaces/IFrame.html":{}}}],["body]{@link",{"_index":81,"title":{},"body":{"interfaces/IMessage.html":{}}}],["boolean",{"_index":40,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["both",{"_index":267,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["box",{"_index":558,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["breaks",{"_index":505,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["broker",{"_index":16,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{}}}],["brokers",{"_index":340,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["brokerurl",{"_index":214,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["builds",{"_index":1161,"title":{},"body":{"index.html":{}}}],["call",{"_index":74,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompSubscription.html":{}}}],["call.html",{"_index":378,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callable",{"_index":983,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":61,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":78,"title":{},"body":{"interfaces/IMessage.html":{}}}],["callbacks",{"_index":13,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["called",{"_index":247,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["caller",{"_index":793,"title":{},"body":{"classes/RxStomp.html":{}}}],["calling",{"_index":158,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["calls",{"_index":604,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{}}}],["care",{"_index":889,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["careful",{"_index":635,"title":{},"body":{"classes/RxStomp.html":{}}}],["carry",{"_index":612,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["case",{"_index":246,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["caution",{"_index":316,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["caveat",{"_index":161,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["change",{"_index":234,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["check",{"_index":280,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["class",{"_index":180,"title":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["classes",{"_index":396,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"overview.html":{}}}],["cleanup",{"_index":810,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["client",{"_index":286,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"coverage.html":{},"index.html":{}}}],["client#abort",{"_index":165,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#abort]{@link",{"_index":170,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#ack",{"_index":76,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#ack]{@link",{"_index":84,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#activate",{"_index":514,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["client#activate]{@link",{"_index":717,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#active",{"_index":642,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#active]{@link",{"_index":754,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#appendmissingnullonincoming",{"_index":230,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#appendmissingnullonincoming]{@link",{"_index":861,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect",{"_index":260,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":870,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":159,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#brokerurl",{"_index":268,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":854,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":166,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#commit]{@link",{"_index":169,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#configure",{"_index":529,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#configure]{@link",{"_index":708,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders",{"_index":283,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":863,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactivate",{"_index":540,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["client#deactivate]{@link",{"_index":741,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#debug",{"_index":1024,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":1050,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#disconnectheaders",{"_index":290,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":864,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes",{"_index":292,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#forcebinarywsframes]{@link",{"_index":860,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincoming",{"_index":1028,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@client#heartbeatincoming",{"_index":301,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":1046,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing",{"_index":304,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":858,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication",{"_index":320,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommunication]{@link",{"_index":856,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize",{"_index":322,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#maxwebsocketchunksize]{@link",{"_index":862,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#nack",{"_index":77,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#nack]{@link",{"_index":86,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#onconnect",{"_index":1031,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":1047,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":1033,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":1048,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":473,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#onstomperror]{@link",{"_index":668,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledframe",{"_index":480,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledframe]{@link",{"_index":665,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledmessage",{"_index":62,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledmessage]{@link",{"_index":79,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":497,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":667,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onwebsocketclose",{"_index":1038,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":1049,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror",{"_index":502,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["client#onwebsocketerror]{@link",{"_index":669,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#publish",{"_index":91,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["client#publish]{@link",{"_index":124,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["client#reconnectdelay",{"_index":1041,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@client#reconnectdelay",{"_index":326,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":1045,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#splitlargeframes",{"_index":336,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#splitlargeframes]{@link",{"_index":859,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions",{"_index":354,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":855,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscribe",{"_index":65,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":83,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#unsubscribe",{"_index":1065,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":1066,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":632,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["client#watchforreceipt]{@link",{"_index":830,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#websocketfactory",{"_index":370,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":857,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":967,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":982,"title":{},"body":{"classes/Stomp.html":{}}}],["client.ts",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["client]{@link",{"_index":654,"title":{},"body":{"classes/RxStomp.html":{}}}],["close",{"_index":468,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["closed",{"_index":684,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["closeevent",{"_index":119,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":114,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktype",{"_index":117,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closing",{"_index":1134,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["closure",{"_index":804,"title":{},"body":{"classes/RxStomp.html":{}}}],["code",{"_index":599,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["cold",{"_index":827,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobservable",{"_index":801,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobservable.pipe(share",{"_index":829,"title":{},"body":{"classes/RxStomp.html":{}}}],["combination",{"_index":621,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["combined",{"_index":207,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["command",{"_index":30,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{}}}],["commit",{"_index":163,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["communication",{"_index":309,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["compat",{"_index":994,"title":{},"body":{"classes/Stomp.html":{}}}],["compatclient",{"_index":974,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":1009,"title":{},"body":{"classes/Stomp.html":{}}}],["compatibility",{"_index":126,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["complaint",{"_index":622,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["completed",{"_index":495,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["compliant",{"_index":330,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["complicated",{"_index":780,"title":{},"body":{"classes/RxStomp.html":{}}}],["compodoc",{"_index":1169,"title":{},"body":{"index.html":{}}}],["config",{"_index":648,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["config.ts",{"_index":177,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["config.ts:102",{"_index":1030,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:103",{"_index":849,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:107",{"_index":1032,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:108",{"_index":843,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:112",{"_index":1034,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:113",{"_index":837,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:117",{"_index":1037,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:118",{"_index":847,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:122",{"_index":1039,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:127",{"_index":840,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:132",{"_index":1023,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:134",{"_index":842,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:154",{"_index":838,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:20",{"_index":925,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:22",{"_index":839,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:24",{"_index":926,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:27",{"_index":1043,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:32",{"_index":1044,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:35",{"_index":850,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:37",{"_index":1040,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:42",{"_index":1027,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:47",{"_index":846,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:50",{"_index":841,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:52",{"_index":1042,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:57",{"_index":1026,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:62",{"_index":1020,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:67",{"_index":1029,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:72",{"_index":1022,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:73",{"_index":851,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:77",{"_index":1025,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:80",{"_index":848,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:82",{"_index":1036,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:87",{"_index":844,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:92",{"_index":1035,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:94",{"_index":845,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:97",{"_index":1021,"title":{},"body":{"classes/StompConfig.html":{}}}],["configuration",{"_index":194,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":429,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["configure(rxstompconfig",{"_index":515,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["configured",{"_index":1141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["connect",{"_index":238,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["connected",{"_index":419,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["connectheaders",{"_index":215,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["connecting",{"_index":1132,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["connection",{"_index":147,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["connectionstate",{"_index":420,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["consequences",{"_index":638,"title":{},"body":{"classes/RxStomp.html":{}}}],["console.log(new",{"_index":526,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["console.warn('stomp.over",{"_index":1012,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/.../i",{"_index":1181,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/.../injectable",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["consolidated/.../rx",{"_index":1128,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":1130,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.ts",{"_index":1180,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":174,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["consolidated/rx",{"_index":137,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.ts",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts",{"_index":953,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:32",{"_index":960,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:48",{"_index":969,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:92",{"_index":976,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/i",{"_index":6,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":1016,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/types.ts",{"_index":89,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.ts",{"_index":1067,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":1079,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":1081,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":1082,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:23",{"_index":1075,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:31",{"_index":1083,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:37",{"_index":1085,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:44",{"_index":1084,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":200,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["constructor",{"_index":436,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{}}}],["constructor(private",{"_index":901,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["constructor(public",{"_index":1089,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":875,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(versions",{"_index":1074,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":1056,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":100,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["convert",{"_index":817,"title":{},"body":{"classes/RxStomp.html":{}}}],["correlation",{"_index":891,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["correlationid",{"_index":915,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":1152,"title":{},"body":{"index.html":{}}}],["corresponding",{"_index":626,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["corresponds",{"_index":1017,"title":{},"body":{"classes/StompConfig.html":{}}}],["cover",{"_index":1158,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1093,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":552,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["cr",{"_index":1057,"title":{},"body":{"classes/StompHeaders.html":{}}}],["create",{"_index":399,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/StompSubscription.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":157,"title":{},"body":{"interfaces/ITransaction.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":970,"title":{},"body":{"classes/Stomp.html":{}}}],["creating",{"_index":46,"title":{},"body":{"interfaces/IFrame.html":{},"classes/Versions.html":{}}}],["credentials",{"_index":251,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["current",{"_index":454,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["currentstate",{"_index":690,"title":{},"body":{"classes/RxStomp.html":{}}}],["date",{"_index":527,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["deactivate",{"_index":430,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["debug",{"_index":216,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["debugfntype",{"_index":109,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["debugging",{"_index":287,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["declared",{"_index":1078,"title":{},"body":{"classes/Versions.html":{}}}],["default",{"_index":99,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["defaulted",{"_index":762,"title":{},"body":{"classes/RxStomp.html":{}}}],["defaultmessagessubscription",{"_index":914,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscribe",{"_index":924,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["define",{"_index":199,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["defined",{"_index":228,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["defining",{"_index":1139,"title":{},"body":{"miscellaneous/functions.html":{}}}],["delay",{"_index":325,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["delete",{"_index":711,"title":{},"body":{"classes/RxStomp.html":{}}}],["dependency",{"_index":1144,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deprecated",{"_index":394,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":8,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["designed",{"_index":596,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["destination",{"_index":95,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["destinations",{"_index":547,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["details",{"_index":187,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["dev",{"_index":1156,"title":{},"body":{"index.html":{}}}],["development",{"_index":1157,"title":{},"body":{"index.html":{}}}],["difference",{"_index":401,"title":{},"body":{"classes/RxStomp.html":{}}}],["different",{"_index":608,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["directly",{"_index":636,"title":{},"body":{"classes/RxStomp.html":{}}}],["disable",{"_index":300,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["disconnect",{"_index":511,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["disconnectheaders",{"_index":217,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["disconnecting",{"_index":745,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["disconnection",{"_index":289,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["docs",{"_index":1151,"title":{},"body":{"index.html":{}}}],["docs/latest/classes/stomp.html#over",{"_index":1015,"title":{},"body":{"classes/Stomp.html":{}}}],["documentation",{"_index":281,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"index.html":{}}}],["documents",{"_index":1167,"title":{},"body":{"index.html":{}}}],["down",{"_index":148,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["dropped",{"_index":1136,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["drops",{"_index":589,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["during",{"_index":344,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":358,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["each",{"_index":463,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"index.html":{}}}],["earlier",{"_index":598,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["effects",{"_index":313,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["elements",{"_index":1076,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":453,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["enable",{"_index":285,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["end",{"_index":97,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["endpoint",{"_index":406,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["enqueued",{"_index":146,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["entry",{"_index":1171,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":1127,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":962,"title":{},"body":{"classes/Stomp.html":{}}}],["error",{"_index":467,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["error('cannot",{"_index":770,"title":{},"body":{"classes/RxStomp.html":{}}}],["errors",{"_index":501,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["establish",{"_index":787,"title":{},"body":{"classes/RxStomp.html":{}}}],["established",{"_index":440,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["etc",{"_index":253,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["even",{"_index":588,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["event",{"_index":123,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"miscellaneous/typealiases.html":{}}}],["event]{@link",{"_index":120,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["evt",{"_index":118,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["exact",{"_index":469,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["exactly",{"_index":183,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["example",{"_index":66,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["exception",{"_index":411,"title":{},"body":{"classes/RxStomp.html":{}}}],["existing",{"_index":520,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["explanatory",{"_index":823,"title":{},"body":{"classes/RxStomp.html":{}}}],["export",{"_index":51,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["exposed",{"_index":413,"title":{},"body":{"classes/RxStomp.html":{}}}],["exposes",{"_index":402,"title":{},"body":{"classes/RxStomp.html":{}}}],["extended",{"_index":25,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["extends",{"_index":67,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["f8094ed53339",{"_index":828,"title":{},"body":{"classes/RxStomp.html":{}}}],["factory",{"_index":205,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.ts",{"_index":1103,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["failures",{"_index":418,"title":{},"body":{"classes/RxStomp.html":{}}}],["false",{"_index":531,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["favor",{"_index":1135,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fetch",{"_index":250,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["field",{"_index":1018,"title":{},"body":{"classes/StompConfig.html":{}}}],["fields",{"_index":193,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":643,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["filter((currentstate",{"_index":689,"title":{},"body":{"classes/RxStomp.html":{}}}],["filter((headers",{"_index":702,"title":{},"body":{"classes/RxStomp.html":{}}}],["first",{"_index":893,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["fixed",{"_index":195,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["following",{"_index":605,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["forcebinarywsframes",{"_index":218,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["frame",{"_index":11,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["frame.ts",{"_index":7,"title":{},"body":{"interfaces/IFrame.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["framecallbacktype",{"_index":112,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["frameimpl",{"_index":63,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#body",{"_index":82,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#headers",{"_index":80,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frames",{"_index":134,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["function",{"_index":70,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":185,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["functions",{"_index":1052,"title":{"miscellaneous/functions.html":{}},"body":{"classes/StompHeaders.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":785,"title":{},"body":{"classes/RxStomp.html":{}}}],["generatebinarydata",{"_index":580,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["generated",{"_index":1168,"title":{},"body":{"index.html":{}}}],["generating",{"_index":890,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["getactive",{"_index":639,"title":{},"body":{"classes/RxStomp.html":{}}}],["gets",{"_index":567,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["getstompclient",{"_index":633,"title":{},"body":{"classes/RxStomp.html":{}}}],["getting",{"_index":1146,"title":{"index.html":{}},"body":{}}],["going",{"_index":641,"title":{},"body":{"classes/RxStomp.html":{}}}],["good",{"_index":581,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["guest",{"_index":523,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["guide",{"_index":192,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":188,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["guide/rx",{"_index":375,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](/guide/rx",{"_index":895,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["guides",{"_index":1164,"title":{},"body":{"index.html":{}}}],["hack",{"_index":997,"title":{},"body":{"classes/Stomp.html":{}}}],["handle",{"_index":417,"title":{},"body":{"classes/RxStomp.html":{}}}],["handled",{"_index":751,"title":{},"body":{"classes/RxStomp.html":{}}}],["handler",{"_index":720,"title":{},"body":{"classes/RxStomp.html":{}}}],["handling",{"_index":796,"title":{},"body":{"classes/RxStomp.html":{}}}],["handshake",{"_index":345,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["happening",{"_index":821,"title":{},"body":{"classes/RxStomp.html":{}}}],["header",{"_index":102,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["headers",{"_index":21,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{}}}],["headers.ack",{"_index":800,"title":{},"body":{"classes/RxStomp.html":{}}}],["headers.ts",{"_index":1051,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":1060,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correlation",{"_index":916,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['reply",{"_index":922,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers]{@link",{"_index":48,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["heartbeat",{"_index":296,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["heartbeatincoming",{"_index":219,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["heartbeatoutgoing",{"_index":220,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["hello",{"_index":574,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["here",{"_index":478,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["hold",{"_index":671,"title":{},"body":{"classes/RxStomp.html":{}}}],["host",{"_index":274,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["hot",{"_index":818,"title":{},"body":{"classes/RxStomp.html":{}}}],["html5",{"_index":980,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":115,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["https://github.com/stomp",{"_index":652,"title":{},"body":{"classes/RxStomp.html":{}}}],["https://medium.com/@benlesh/hot",{"_index":825,"title":{},"body":{"classes/RxStomp.html":{}}}],["https://stomp",{"_index":1013,"title":{},"body":{"classes/Stomp.html":{}}}],["i.e",{"_index":243,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["id",{"_index":164,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompSubscription.html":{}}}],["identifier",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["iframe",{"_index":1,"title":{"interfaces/IFrame.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["iframe#headers",{"_index":49,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["ignore",{"_index":447,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["imessage",{"_index":24,"title":{"interfaces/IMessage.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["immediate",{"_index":237,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["immediately",{"_index":445,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["impact",{"_index":236,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["implementation",{"_index":790,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["import",{"_index":47,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{}}}],["important",{"_index":270,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["incoming",{"_index":295,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["indeed",{"_index":783,"title":{},"body":{"classes/RxStomp.html":{}}}],["index",{"_index":26,"title":{"index.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":1059,"title":{},"body":{"classes/StompHeaders.html":{}}}],["indicate",{"_index":559,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"index.html":{}}}],["indicates",{"_index":1080,"title":{},"body":{"classes/Versions.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["information",{"_index":1165,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":227,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["initial",{"_index":683,"title":{},"body":{"classes/RxStomp.html":{}}}],["initiate",{"_index":504,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["inject",{"_index":201,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injectable",{"_index":171,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":172,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"coverage.html":{},"index.html":{}}}],["injectablerxstomprpcconfig",{"_index":372,"title":{"injectables/InjectableRxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":173,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"overview.html":{}}}],["injected",{"_index":204,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["injection",{"_index":1145,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instance",{"_index":58,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":395,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":0,"title":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"overview.html":{}}}],["internal",{"_index":130,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["internally",{"_index":887,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["interval",{"_index":297,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["invoke",{"_index":625,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["invoked",{"_index":232,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["ipublishparams",{"_index":88,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irawframetype",{"_index":129,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["irxstomppublishparams",{"_index":136,"title":{"interfaces/IRxStompPublishParams.html":{}},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"coverage.html":{}}}],["irxstomppublishparams#retryifdisconnected",{"_index":759,"title":{},"body":{"classes/RxStomp.html":{}}}],["isbinarybody",{"_index":31,"title":{},"body":{"interfaces/IFrame.html":{}}}],["issue",{"_index":594,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["itransaction",{"_index":154,"title":{"interfaces/ITransaction.html":{}},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["java",{"_index":338,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["javascript",{"_index":349,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["js.github.io/api",{"_index":1014,"title":{},"body":{"classes/Stomp.html":{}}}],["js/stompjs",{"_index":653,"title":{},"body":{"classes/RxStomp.html":{}}}],["json",{"_index":554,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["keep",{"_index":508,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["key",{"_index":37,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["keys",{"_index":271,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["klass",{"_index":1007,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":1008,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":907,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":196,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["large",{"_index":333,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["later",{"_index":203,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["left",{"_index":812,"title":{},"body":{"classes/RxStomp.html":{}}}],["length",{"_index":101,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["level",{"_index":752,"title":{},"body":{"classes/RxStomp.html":{}}}],["lf",{"_index":1058,"title":{},"body":{"classes/StompHeaders.html":{}}}],["libraries",{"_index":1160,"title":{},"body":{"index.html":{}}}],["library",{"_index":595,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"index.html":{}}}],["line",{"_index":1155,"title":{},"body":{"index.html":{}}}],["line:variable",{"_index":996,"title":{},"body":{"classes/Stomp.html":{}}}],["link",{"_index":50,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["locally",{"_index":564,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["located",{"_index":971,"title":{},"body":{"classes/Stomp.html":{}}}],["log",{"_index":306,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["logic",{"_index":779,"title":{},"body":{"classes/RxStomp.html":{}}}],["login",{"_index":272,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["lograwcommunication",{"_index":221,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["logs",{"_index":311,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["long",{"_index":822,"title":{},"body":{"classes/RxStomp.html":{}}}],["loop",{"_index":535,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["magic",{"_index":805,"title":{},"body":{"classes/RxStomp.html":{}}}],["main",{"_index":398,"title":{},"body":{"classes/RxStomp.html":{},"index.html":{}}}],["major",{"_index":956,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":881,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["mandatory",{"_index":575,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["manual",{"_index":72,"title":{},"body":{"interfaces/IMessage.html":{}}}],["many",{"_index":12,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["maps",{"_index":259,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["marks",{"_index":278,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["matched",{"_index":623,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["matching",{"_index":55,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxwebsocketchunksize",{"_index":222,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["meaning",{"_index":606,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["mechanism",{"_index":210,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["message",{"_index":59,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"miscellaneous/typealiases.html":{}}}],["message(s",{"_index":775,"title":{},"body":{"classes/RxStomp.html":{}}}],["message.headers['correlation",{"_index":919,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["message.ts",{"_index":57,"title":{},"body":{"interfaces/IMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagecallbacktype",{"_index":111,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messages",{"_index":150,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["messages.next(message",{"_index":809,"title":{},"body":{"classes/RxStomp.html":{}}}],["messaging",{"_index":874,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["method",{"_index":75,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["methods",{"_index":427,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["milliseconds",{"_index":298,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["miscellaneous",{"_index":1126,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed",{"_index":593,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["missing",{"_index":563,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["mode",{"_index":331,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"index.html":{}}}],["modules",{"_index":1173,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":984,"title":{},"body":{"classes/Stomp.html":{},"index.html":{}}}],["mozwebsocket",{"_index":1000,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":110,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["multiple",{"_index":517,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["nack",{"_index":69,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["name",{"_index":382,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["named",{"_index":543,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["naming",{"_index":546,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["navigating",{"_index":1148,"title":{},"body":{"index.html":{}}}],["need",{"_index":19,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["needed",{"_index":797,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["needs",{"_index":616,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["new",{"_index":352,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":314,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["ng2",{"_index":1172,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":961,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":328,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["noop",{"_index":680,"title":{},"body":{"classes/RxStomp.html":{}}}],["normally",{"_index":476,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["note",{"_index":592,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["notify",{"_index":492,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["npm",{"_index":1153,"title":{},"body":{"index.html":{}}}],["null",{"_index":561,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["number",{"_index":293,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["object",{"_index":360,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["objects",{"_index":472,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["observable",{"_index":409,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["observable.create",{"_index":802,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["observables",{"_index":405,"title":{},"body":{"classes/RxStomp.html":{}}}],["observables/subjects/behaviorsubjects",{"_index":414,"title":{},"body":{"classes/RxStomp.html":{}}}],["observer",{"_index":471,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["observers",{"_index":725,"title":{},"body":{"classes/RxStomp.html":{}}}],["occasionally",{"_index":206,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["occurs",{"_index":443,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["octet(s",{"_index":562,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["once",{"_index":985,"title":{},"body":{"classes/Stomp.html":{}}}],["onconnect",{"_index":723,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":1019,"title":{},"body":{"classes/StompConfig.html":{}}}],["one",{"_index":265,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onstomperror",{"_index":727,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledframe",{"_index":735,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledmessage",{"_index":731,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":733,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onwebsocketclose",{"_index":729,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onwebsocketerror",{"_index":737,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["op",{"_index":678,"title":{},"body":{"classes/RxStomp.html":{}}}],["open",{"_index":1133,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["operation",{"_index":493,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["operations",{"_index":403,"title":{},"body":{"classes/RxStomp.html":{}}}],["optional",{"_index":94,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":142,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/StompConfig.html":{}}}],["order",{"_index":981,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwise",{"_index":532,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["out",{"_index":557,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["outgoing",{"_index":303,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["over",{"_index":959,"title":{},"body":{"classes/Stomp.html":{},"index.html":{}}}],["over(ws",{"_index":975,"title":{},"body":{"classes/Stomp.html":{}}}],["override",{"_index":1077,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":1174,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packets",{"_index":335,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["pairs",{"_index":39,"title":{},"body":{"interfaces/IFrame.html":{}}}],["parameter",{"_index":108,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/typealiases.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["parameters.retryifdisconnected",{"_index":764,"title":{},"body":{"classes/RxStomp.html":{}}}],["params",{"_index":649,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["params.headers",{"_index":909,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["params.ts",{"_index":140,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"coverage.html":{}}}],["parsed",{"_index":312,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["parser",{"_index":132,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":22,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":14,"title":{},"body":{"interfaces/IFrame.html":{}}}],["passcode",{"_index":273,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["passed",{"_index":45,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["passing",{"_index":990,"title":{},"body":{"classes/Stomp.html":{}}}],["payload",{"_index":553,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["per",{"_index":506,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["please",{"_index":186,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"index.html":{}}}],["point",{"_index":98,"title":{},"body":{"interfaces/IPublishParams.html":{},"index.html":{}}}],["possible",{"_index":999,"title":{},"body":{"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practice",{"_index":582,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["prefer",{"_index":363,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["preferred",{"_index":1170,"title":{},"body":{"index.html":{}}}],["present",{"_index":279,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["prior",{"_index":1001,"title":{},"body":{"classes/Stomp.html":{}}}],["priority",{"_index":572,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["private",{"_index":660,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["procedure",{"_index":377,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["processing",{"_index":487,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["promise",{"_index":245,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["promise](https://developer.mozilla.org/en",{"_index":868,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["properties",{"_index":27,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["protected",{"_index":663,"title":{},"body":{"classes/RxStomp.html":{}}}],["protocol",{"_index":548,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["protocols",{"_index":968,"title":{},"body":{"classes/Stomp.html":{}}}],["protocolversions",{"_index":1072,"title":{},"body":{"classes/Versions.html":{}}}],["provider",{"_index":1140,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":459,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":211,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["publish",{"_index":139,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"coverage.html":{}}}],["publish(parameters",{"_index":541,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["published",{"_index":151,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["publishing",{"_index":627,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["publishparams",{"_index":92,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"miscellaneous/typealiases.html":{}}}],["queue",{"_index":384,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/rpc",{"_index":386,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":571,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["queued",{"_index":565,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["queuedmessage",{"_index":776,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessages",{"_index":695,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessages.length",{"_index":773,"title":{},"body":{"classes/RxStomp.html":{}}}],["queueing",{"_index":767,"title":{},"body":{"classes/RxStomp.html":{}}}],["queues",{"_index":485,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["quite",{"_index":601,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["r.service.ts",{"_index":1105,"title":{},"body":{"coverage.html":{}}}],["rabbitmq",{"_index":389,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["raise",{"_index":569,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["random",{"_index":620,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["randomtext",{"_index":629,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["raw",{"_index":308,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rawheadertype",{"_index":131,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re",{"_index":786,"title":{},"body":{"classes/RxStomp.html":{}}}],["re)connection",{"_index":442,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["reactivate",{"_index":538,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["read",{"_index":600,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["readonly",{"_index":52,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["receipt",{"_index":113,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["receiptid",{"_index":628,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["receive",{"_index":107,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["received",{"_index":15,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["receiving",{"_index":482,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["recent",{"_index":460,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["reconnect",{"_index":315,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["reconnectdelay",{"_index":223,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["reconnecting",{"_index":986,"title":{},"body":{"classes/Stomp.html":{}}}],["reconnection",{"_index":464,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["reconnects",{"_index":590,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["reestablished",{"_index":152,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["refer",{"_index":544,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["reinstated",{"_index":658,"title":{},"body":{"classes/RxStomp.html":{}}}],["related",{"_index":412,"title":{},"body":{"classes/RxStomp.html":{}}}],["released",{"_index":1154,"title":{},"body":{"index.html":{}}}],["reliably",{"_index":249,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["remains",{"_index":794,"title":{},"body":{"classes/RxStomp.html":{}}}],["remarks",{"_index":1004,"title":{},"body":{"classes/Stomp.html":{}}}],["remote",{"_index":873,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["removed",{"_index":955,"title":{},"body":{"classes/Stomp.html":{}}}],["replies",{"_index":387,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["reply",{"_index":383,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuename",{"_index":379,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":560,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["represents",{"_index":9,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":488,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["requested",{"_index":491,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["requesting",{"_index":615,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["require('../../esm5",{"_index":963,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":966,"title":{},"body":{"classes/Stomp.html":{}}}],["resolved",{"_index":248,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["resubscribe",{"_index":591,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["result",{"_index":54,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":56,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retry",{"_index":760,"title":{},"body":{"classes/RxStomp.html":{}}}],["retryifdisconnected",{"_index":145,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["retryifdisconnected]{@link",{"_index":758,"title":{},"body":{"classes/RxStomp.html":{}}}],["return",{"_index":244,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["returned",{"_index":462,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["returns",{"_index":408,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["rpc",{"_index":373,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rpc(params",{"_index":879,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rpc.service.ts",{"_index":929,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":931,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.ts",{"_index":872,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:25",{"_index":877,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:47",{"_index":880,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:58",{"_index":886,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver",{"_index":913,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(message",{"_index":921,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":176,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["rxjs",{"_index":404,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["rxjs/operators",{"_index":645,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["rxstomp",{"_index":235,"title":{"classes/RxStomp.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["rxstomp#activate",{"_index":539,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp#activate]{@link",{"_index":740,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#configure",{"_index":835,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":852,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate",{"_index":510,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["rxstomp#deactivate]{@link",{"_index":716,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#decativate",{"_index":240,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstomp#decativate]{@link",{"_index":865,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#publish",{"_index":143,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#publish]{@link",{"_index":153,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["rxstomp#watchforreceipt",{"_index":496,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp#watchforreceipt]{@link",{"_index":666,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.activate",{"_index":528,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp.configure",{"_index":521,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":577,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp.publish({destination",{"_index":570,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":630,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstomp:111",{"_index":951,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:124",{"_index":948,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:134",{"_index":952,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:241",{"_index":939,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:265",{"_index":938,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:312",{"_index":941,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:331",{"_index":940,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:391",{"_index":942,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:440",{"_index":943,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:46",{"_index":946,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:527",{"_index":944,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:54",{"_index":945,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:69",{"_index":947,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:86",{"_index":950,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp:99",{"_index":949,"title":{},"body":{"injectables/RxStompService.html":{}}}],["rxstomp](@link",{"_index":258,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig",{"_index":182,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":507,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["rxstompconfig#reconnectdelay]{@link",{"_index":715,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#websocketfactory",{"_index":266,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":853,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.stompversions",{"_index":351,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactory",{"_index":366,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["rxstompconfig:103",{"_index":327,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:108",{"_index":291,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:113",{"_index":229,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:118",{"_index":321,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:127",{"_index":269,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:134",{"_index":288,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:154",{"_index":231,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:22",{"_index":261,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:35",{"_index":342,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:47",{"_index":305,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:50",{"_index":284,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:73",{"_index":355,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:80",{"_index":323,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:87",{"_index":294,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstompconfig:94",{"_index":302,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["rxstomprpc",{"_index":871,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpc#stream",{"_index":884,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["rxstomprpc#stream]{@link",{"_index":906,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rxstomprpc:47",{"_index":932,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpc:58",{"_index":933,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rxstomprpcconfig",{"_index":374,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"index.html":{}}}],["rxstomprpcconfig:20",{"_index":381,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcconfig:24",{"_index":392,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{}}}],["rxstomprpcservice",{"_index":927,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{},"index.html":{}}}],["rxstompservice",{"_index":930,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory",{"_index":937,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":1138,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstate",{"_index":650,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["rxstompstate.connecting",{"_index":753,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompstate.open",{"_index":691,"title":{},"body":{"classes/RxStomp.html":{}}}],["safely",{"_index":446,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["same",{"_index":184,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["see",{"_index":64,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":167,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["sending",{"_index":659,"title":{},"body":{"classes/RxStomp.html":{}}}],["sent",{"_index":483,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompHeaders.html":{}}}],["sequence",{"_index":618,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["server",{"_index":461,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["serverheaders",{"_index":421,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["service",{"_index":254,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":104,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["setting",{"_index":364,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["setup",{"_index":393,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueue",{"_index":380,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntype",{"_index":391,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["share",{"_index":644,"title":{},"body":{"classes/RxStomp.html":{}}}],["shouldretry",{"_index":763,"title":{},"body":{"classes/RxStomp.html":{}}}],["show",{"_index":456,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["similar",{"_index":357,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simple",{"_index":791,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["simplest",{"_index":1143,"title":{},"body":{"miscellaneous/functions.html":{}}}],["situation",{"_index":749,"title":{},"body":{"classes/RxStomp.html":{}}}],["skip",{"_index":576,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["skipcontentlengthheader",{"_index":96,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["skipped",{"_index":106,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["socket",{"_index":500,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["sockjs",{"_index":359,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":369,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["sometimes",{"_index":555,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["soon",{"_index":566,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["special",{"_index":795,"title":{},"body":{"classes/RxStomp.html":{}}}],["specific",{"_index":282,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["specifies",{"_index":549,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["specify",{"_index":979,"title":{},"body":{"classes/Stomp.html":{}}}],["splitlargeframes",{"_index":224,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["splitting",{"_index":332,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["spring",{"_index":339,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["standard",{"_index":277,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["standards",{"_index":329,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["started",{"_index":1147,"title":{"index.html":{}},"body":{}}],["state",{"_index":452,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["state.ts",{"_index":1129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statements",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":1131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["static",{"_index":957,"title":{},"body":{"classes/Stomp.html":{},"classes/Versions.html":{}}}],["status",{"_index":455,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["step",{"_index":191,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":10,"title":{"classes/Stomp.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["stomp#client",{"_index":978,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":1010,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":1002,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":973,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over",{"_index":1003,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(function",{"_index":991,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.service",{"_index":934,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.ts",{"_index":936,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.ts",{"_index":397,"title":{},"body":{"classes/RxStomp.html":{},"coverage.html":{}}}],["stomp.ts:111",{"_index":490,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:124",{"_index":466,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:134",{"_index":498,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:148",{"_index":634,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:161",{"_index":437,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:241",{"_index":516,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:265",{"_index":503,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:312",{"_index":533,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:331",{"_index":530,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:340",{"_index":640,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:391",{"_index":542,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:440",{"_index":586,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:46",{"_index":451,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:527",{"_index":611,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:54",{"_index":438,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:69",{"_index":458,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:86",{"_index":481,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:99",{"_index":474,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.websocketclass",{"_index":965,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":178,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stomp/rx",{"_index":144,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/rx",{"_index":138,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stompjs",{"_index":23,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stompjs]{@link",{"_index":651,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompclient",{"_index":434,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig",{"_index":646,"title":{"classes/StompConfig.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"coverage.html":{}}}],["stompconfig.beforeconnect",{"_index":710,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig.debug",{"_index":714,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscription",{"_index":806,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscription.unsubscribe",{"_index":814,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomperrors",{"_index":422,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["stompheaders",{"_index":36,"title":{"classes/StompHeaders.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompjs",{"_index":179,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["stompjs.stomp",{"_index":964,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/2018/10/12/remote",{"_index":376,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/2018/11/04/ng2",{"_index":189,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stompjs/remote",{"_index":896,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stompjs/src/injectable",{"_index":175,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["stompjs/src/rx",{"_index":928,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/stomp",{"_index":1104,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/stomp.service.ts",{"_index":1109,"title":{},"body":{"coverage.html":{}}}],["stompjs@8.x.x",{"_index":1137,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":876,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuename",{"_index":902,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueue",{"_index":904,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservice",{"_index":1106,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stompservice",{"_index":1110,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["stompstate",{"_index":743,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.open",{"_index":449,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["stompsubscription",{"_index":647,"title":{"classes/StompSubscription.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompsubscription.unsubscribe",{"_index":815,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompversions",{"_index":225,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":512,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["strange",{"_index":602,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["stray",{"_index":486,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["stream",{"_index":410,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{}}}],["stream(params",{"_index":885,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["string",{"_index":35,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["strings",{"_index":319,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["structure",{"_index":135,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["subject",{"_index":465,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["subscribe",{"_index":587,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["subscribe((message",{"_index":920,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["subscribed",{"_index":407,"title":{},"body":{"classes/RxStomp.html":{}}}],["subscriber",{"_index":798,"title":{},"body":{"classes/RxStomp.html":{}}}],["subscribers",{"_index":811,"title":{},"body":{"classes/RxStomp.html":{}}}],["subscribes",{"_index":819,"title":{},"body":{"classes/RxStomp.html":{}}}],["subscribing",{"_index":71,"title":{},"body":{"interfaces/IMessage.html":{}}}],["subscription",{"_index":60,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/StompSubscription.html":{}}}],["subscription.ts",{"_index":1061,"title":{},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["subscription.ts:12",{"_index":1062,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscription.ts:17",{"_index":1064,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscriptions",{"_index":657,"title":{},"body":{"classes/RxStomp.html":{}}}],["subset",{"_index":712,"title":{},"body":{"classes/RxStomp.html":{}}}],["successfully",{"_index":789,"title":{},"body":{"classes/RxStomp.html":{}}}],["such",{"_index":149,"title":{},"body":{"interfaces/IRxStompPublishParams.html":{}}}],["suggests",{"_index":550,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["suitable",{"_index":388,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPCConfig.html":{}}}],["super(rxstomp",{"_index":935,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["support",{"_index":556,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["supported",{"_index":1068,"title":{},"body":{"classes/Versions.html":{}}}],["supportedversions",{"_index":1073,"title":{},"body":{"classes/Versions.html":{}}}],["supports",{"_index":361,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["switch",{"_index":127,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["table",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":888,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Versions.html":{}}}],["tcp",{"_index":988,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":385,"title":{},"body":{"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporary",{"_index":484,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["text",{"_index":334,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["thin",{"_index":1162,"title":{},"body":{"index.html":{}}}],["things",{"_index":609,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["this._beforeconnect",{"_index":681,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._beforeconnect(this",{"_index":722,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.closed",{"_index":730,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.closing",{"_index":746,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.connecting",{"_index":719,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.open",{"_index":726,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._connectedpre",{"_index":687,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._connectedpre$.subscribe",{"_index":807,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._connectionstatepre",{"_index":685,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._connectionstatepre$.next(state",{"_index":833,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._connectionstatepre$.pipe",{"_index":688,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug",{"_index":682,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`attempting",{"_index":777,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`not",{"_index":766,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`request",{"_index":799,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stomp",{"_index":816,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stop",{"_index":813,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`will",{"_index":774,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessages",{"_index":772,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessages.push(parameters",{"_index":768,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._repliesobservable",{"_index":910,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable.pipe(filter((message",{"_index":918,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuename",{"_index":903,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._sendqueuedmessages",{"_index":697,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject",{"_index":698,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.next(frame.headers",{"_index":724,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.pipe",{"_index":701,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupreplyqueue",{"_index":905,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue(this._replyqueuename",{"_index":911,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._stompclient",{"_index":673,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.activate",{"_index":739,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configure",{"_index":718,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configure(stompconfig",{"_index":713,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.deactivate",{"_index":742,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.publish(parameters",{"_index":765,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.subscribe(destination",{"_index":808,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.watchforreceipt(receiptid",{"_index":831,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connected",{"_index":693,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connected$.subscribe",{"_index":696,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate",{"_index":692,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.getvalue",{"_index":744,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.next(state",{"_index":834,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.pipe",{"_index":694,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.publish(queuedmessage",{"_index":778,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.rxstomp",{"_index":912,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish({destination",{"_index":923,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessage",{"_index":899,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.serverheaders",{"_index":700,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stompclient.active",{"_index":755,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stomperrors",{"_index":703,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stomperrors$.next(frame",{"_index":728,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stream(params).pipe(first",{"_index":908,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.unhandledframe",{"_index":706,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledframe$.next(frame",{"_index":736,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledmessage",{"_index":704,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledmessage$.next(message",{"_index":732,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledreceipts",{"_index":705,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledreceipts$.next(frame",{"_index":734,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.versions.join",{"_index":1090,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map((x",{"_index":1091,"title":{},"body":{"classes/Versions.html":{}}}],["this.websocketerrors",{"_index":707,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.websocketerrors$.next(evt",{"_index":738,"title":{},"body":{"classes/RxStomp.html":{}}}],["though",{"_index":275,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["three",{"_index":1159,"title":{},"body":{"index.html":{}}}],["through",{"_index":1149,"title":{},"body":{"index.html":{}}}],["throw",{"_index":769,"title":{},"body":{"classes/RxStomp.html":{}}}],["time",{"_index":441,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["times",{"_index":518,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["todo",{"_index":160,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["token",{"_index":252,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["topic/special",{"_index":583,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["transaction",{"_index":156,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["transaction.ts",{"_index":155,"title":{},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["transparently",{"_index":416,"title":{},"body":{"classes/RxStomp.html":{}}}],["transport",{"_index":987,"title":{},"body":{"classes/Stomp.html":{}}}],["tricky",{"_index":748,"title":{},"body":{"classes/RxStomp.html":{}}}],["tries",{"_index":415,"title":{},"body":{"classes/RxStomp.html":{}}}],["trigger",{"_index":439,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["triggered",{"_index":655,"title":{},"body":{"classes/RxStomp.html":{}}}],["true",{"_index":105,"title":{},"body":{"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["try",{"_index":350,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["trying",{"_index":509,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"miscellaneous/enumerations.html":{}}}],["tslint:disable",{"_index":995,"title":{},"body":{"classes/Stomp.html":{}}}],["tt",{"_index":656,"title":{},"body":{"classes/RxStomp.html":{}}}],["tutorials",{"_index":1166,"title":{},"body":{"index.html":{}}}],["twice",{"_index":820,"title":{},"body":{"classes/RxStomp.html":{}}}],["two",{"_index":603,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["type",{"_index":33,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/IRxStompPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":1178,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":1011,"title":{},"body":{"classes/Stomp.html":{}}}],["types",{"_index":545,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["typical",{"_index":368,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["typically",{"_index":198,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["uint8array",{"_index":32,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["uint8array](https://developer.mozilla.org/en",{"_index":756,"title":{},"body":{"classes/RxStomp.html":{}}}],["underlying",{"_index":537,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["unhandled",{"_index":475,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unhandledframe",{"_index":423,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unhandledmessage",{"_index":424,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unhandledreceipts",{"_index":425,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unintended",{"_index":637,"title":{},"body":{"classes/RxStomp.html":{}}}],["unique",{"_index":617,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unless",{"_index":479,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["unset",{"_index":310,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["unsubscribe",{"_index":489,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompSubscription.html":{}}}],["url",{"_index":262,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us/docs/web/api/closeevent",{"_index":116,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/event",{"_index":121,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["us/docs/web/javascript/reference/global_objects/promise",{"_index":869,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["us/docs/web/javascript/reference/global_objects/uint8array",{"_index":757,"title":{},"body":{"classes/RxStomp.html":{}}}],["us/docs/web/javascript/reference/statements/async_function",{"_index":867,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["usage",{"_index":18,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["use",{"_index":365,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["used",{"_index":128,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["useful",{"_index":337,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["user",{"_index":457,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["using",{"_index":202,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["utf8",{"_index":318,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["uuid",{"_index":619,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{}}}],["uuid.uuid",{"_index":917,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["v${x.replace",{"_index":1092,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":1069,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":1070,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":1071,"title":{},"body":{"classes/Versions.html":{}}}],["valid",{"_index":239,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["value",{"_index":38,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"classes/Versions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":578,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["variable",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":803,"title":{"miscellaneous/variables.html":{}},"body":{"classes/RxStomp.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":181,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRPCConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["versions",{"_index":341,"title":{"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{},"index.html":{}}}],["versions(['1.0",{"_index":353,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["versions([versions.v1_0",{"_index":1086,"title":{},"body":{"classes/Versions.html":{}}}],["versions.default.protocolversions",{"_index":1005,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.v1_1",{"_index":1087,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":1088,"title":{},"body":{"classes/Versions.html":{}}}],["very",{"_index":607,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["via",{"_index":892,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["void",{"_index":85,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompSubscription.html":{}}}],["void|promise",{"_index":676,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["vs",{"_index":826,"title":{},"body":{"classes/RxStomp.html":{}}}],["want",{"_index":568,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":431,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["watch(destination",{"_index":585,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["watchforreceipt",{"_index":432,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["watchforreceipt(receiptid",{"_index":610,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["watching",{"_index":624,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["way",{"_index":256,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["web",{"_index":499,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["websocket",{"_index":356,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/ws",{"_index":367,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/ws",{"_index":992,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":958,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketerrors",{"_index":426,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["websocketfactory",{"_index":226,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["websockets",{"_index":362,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["well",{"_index":93,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["whenever",{"_index":788,"title":{},"body":{"classes/RxStomp.html":{}}}],["whether",{"_index":43,"title":{},"body":{"interfaces/IFrame.html":{}}}],["within",{"_index":168,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["wonderful",{"_index":784,"title":{},"body":{"classes/RxStomp.html":{}}}],["work",{"_index":597,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{}}}],["works",{"_index":781,"title":{},"body":{"classes/RxStomp.html":{}}}],["wrapper",{"_index":882,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"index.html":{}}}],["wraps",{"_index":400,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws",{"_index":993,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/ws",{"_index":522,"title":{},"body":{"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}],["ws://broker.329broker.com:15674/ws",{"_index":263,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":972,"title":{},"body":{"classes/Stomp.html":{}}}],["wserrorcallbacktype",{"_index":122,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["wsfn",{"_index":1006,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/ws",{"_index":264,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{}}}],["yes",{"_index":878,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{}}}],["yield",{"_index":133,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFrame.html":{"url":"interfaces/IFrame.html","title":"interface - IFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-frame.ts\n        \n\n            \n                Description\n            \n            \n                It represents a STOMP frame. Many of the callbacks pass an IFrame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nIMessage is an extended IFrame.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        binaryBody\n                                \n                                \n                                        body\n                                \n                                \n                                        command\n                                \n                                \n                                        headers\n                                \n                                \n                                        isBinaryBody\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body as Uint8Array\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body of the frame as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                    \n                                \n                                \n                                    \n                                        command:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    STOMP Command\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Headers, key value pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBinaryBody\n                                    \n                                \n                                \n                                    \n                                        isBinaryBody:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * It represents a STOMP frame. Many of the callbacks pass an IFrame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link IFrame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link IMessage} is an extended IFrame.\n */\nexport interface IFrame {\n  /**\n   * STOMP Command\n   */\n  command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  isBinaryBody: boolean;\n\n  /**\n   * body of the frame as string\n   */\n  readonly body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  readonly binaryBody: Uint8Array;\n}\n\n/**\n * Alias for {@link IFrame}\n */\nexport type Frame = IFrame;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMessage.html":{"url":"interfaces/IMessage.html","title":"interface - IMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-message.ts\n        \n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended FrameImpl, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                        IFrame\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ack\n                                \n                                \n                                        nack\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ack\n                                    \n                                \n                                \n                                    \n                                        ack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nack\n                                    \n                                \n                                \n                                    \n                                        nack:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IFrame} from './i-frame';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link FrameImpl}, you can access [headers]{@link FrameImpl#headers}\n * and [body]{@link FrameImpl#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport interface IMessage extends IFrame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  nack: (headers?: StompHeaders) => void;\n}\n\n/**\n * Aliased to {@link IMessage}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type Message = IMessage;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for Client#publish.\nAliased as publishParams as well.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        binaryBody\n                                \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        destination\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        skipContentLengthHeader\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                    \n                                \n                                \n                                    \n                                        destination:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:         StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IFrame} from './i-frame';\nimport {IMessage} from './i-message';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link IMessage} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: IMessage) => void;\n\n/**\n * This callback will receive a {@link IFrame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = (receipt: IFrame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: CloseEvent) => void;\n\n/**\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type wsErrorCallbackType = (evt: Event) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}.\n * Aliased as publishParams as well.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Backward compatibility, switch to {@link IPublishParams}.\n */\nexport type publishParams = IPublishParams;\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType { command: string; headers: RawHeaderType[]; binaryBody: Uint8Array; }\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRxStompPublishParams.html":{"url":"interfaces/IRxStompPublishParams.html","title":"interface - IRxStompPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IRxStompPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-publish-params.ts\n        \n\n            \n                Description\n            \n            \n                Additional options for RxStomp#publish\nPart of @stomp/rx-stomp\n\n            \n\n            \n                Extends\n            \n            \n                        IPublishParams\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        retryIfDisconnected\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        retryIfDisconnected\n                                    \n                                \n                                \n                                    \n                                        retryIfDisconnected:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    When set to true message will be enqueued if the connection\nto the broker is down.\nSuch messages will be published when connection is reestablished.\nDefault is true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IPublishParams} from '@stomp/stompjs';\n\n/**\n * Additional options for [RxStomp#publish]{@link RxStomp#publish}\n *\n * Part of `@stomp/rx-stomp`\n */\nexport interface IRxStompPublishParams extends IPublishParams {\n  /**\n   * When set to `true` message will be enqueued if the connection\n   * to the broker is down.\n   * Such messages will be published when connection is reestablished.\n   *\n   * Default is `true`.\n   */\n  retryIfDisconnected?: boolean;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransaction.html":{"url":"interfaces/ITransaction.html","title":"interface - ITransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-transaction.ts\n        \n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        abort\n                                \n                                \n                                        commit\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abort\n                                    \n                                \n                                \n                                    \n                                        abort:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Abort this transaction. See Client#abort for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commit\n                                    \n                                \n                                \n                                    \n                                        commit:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Commit this transaction. See Client#commit for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    You will need to access this to send, ack, or nack within this transaction.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ITransaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  abort: () => void;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            appendMissingNULLonIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:113\n\n                            \n                        \n\n                \n                    \n                        See Client#appendMissingNULLonIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:154\n\n                            \n                        \n\n                \n                    \n                        Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\nMaps to: Client#beforeConnect\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:22\n\n                            \n                        \n\n                \n                    \n                        The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:127\n\n                            \n                        \n\n                \n                    \n                        Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         debugFnType\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:50\n\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:134\n\n                            \n                        \n\n                \n                    \n                        Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            forceBinaryWSFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:108\n\n                            \n                        \n\n                \n                    \n                        Maps to: Client#forceBinaryWSFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:87\n\n                            \n                        \n\n                \n                    \n                        Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:94\n\n                            \n                        \n\n                \n                    \n                        Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            logRawCommunication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:47\n\n                            \n                        \n\n                \n                    \n                        Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            maxWebSocketChunkSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:118\n\n                            \n                        \n\n                \n                    \n                        Maps to: Client#maxWebSocketChunkSize.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:80\n\n                            \n                        \n\n                \n                    \n                        automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            splitLargeFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:103\n\n                            \n                        \n\n                \n                    \n                        Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Versions\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:35\n\n                            \n                        \n\n                \n                    \n                        STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n```javascript\n\n// Try only versions 1.0 and 1.1\nrxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n\n\nMaps to: Client#stompVersions\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompConfig:73\n\n                            \n                        \n\n                \n                    \n                        This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n```javascript\n\n// use a WebSocket\nrxStompConfig.webSocketFactory= function () {\nreturn new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n};\n\n// Typical usage with SockJS\nrxStompConfig.webSocketFactory= function () {\nreturn new SockJS(\"http://broker.329broker.com/stomp\");\n};\n\n\nMaps to: Client#webSocketFactory\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRPCConfig.html":{"url":"injectables/InjectableRxStompRPCConfig.html","title":"injectable - InjectableRxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPCConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            replyQueueName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompRPCConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompRPCConfig:20\n\n                            \n                        \n\n                \n                    \n                        Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            setupReplyQueue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         setupReplyQueueFnType\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStompRPCConfig\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStompRPCConfig:24\n\n                            \n                        \n\n                \n                    \n                        Setup the reply queue. See the guide for details.\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompRPCConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRPCConfig extends RxStompRPCConfig { }\n\n// Backward compatibility\n/**\n * Deprecated, use {@link InjectableRxStompRPCConfig} instead\n */\nexport const InjectableRxStompRpcConfig = InjectableRxStompRPCConfig;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStomp.html":{"url":"classes/RxStomp.html","title":"class - RxStomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp.ts\n        \n\n            \n                Description\n            \n            \n                This is the main Stomp Client.\nTypically you will create an instance of this to connect to the STOMP broker.\nThis wraps @stomp/stompjs\nClient class.\nThe key difference is that it exposes operations as RxJS Observables.\nFor example when a STOMP endpoint is subscribed it returns an Observable\nthat will stream all received messages.\nWith exception of beforeConnect, functionality related to all callbacks in\n@stomp/stompjs Client\nis exposed as Observables/Subjects/BehaviorSubjects.\nRxStomp also tries to transparently handle connection failures.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stompClient\n                                \n                                \n                                    active\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp.ts:161\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            connected$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:54\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            connectionState$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:46\n                            \n                        \n\n                \n                    \n                        Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            serverHeaders$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:69\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            stompErrors$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:124\n                            \n                        \n\n                \n                    \n                        It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledFrame$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:99\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledMessage$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:86\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledReceipts$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:111\n                            \n                        \n\n                \n                    \n                        STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            webSocketErrors$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:134\n                            \n                        \n\n                \n                    \n                        It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:265\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:241\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n```javascript\n\nconst rxStomp = new RxStomp();\nrxStomp.configure({\nbrokerURL: 'ws://127.0.0.1:15674/ws',\nconnectHeaders: {\nlogin: 'guest',\npasscode: 'guest'\n},\nheartbeatIncoming: 0,\nheartbeatOutgoing: 20000,\nreconnectDelay: 200,\ndebug: (msg: string): void => {\nconsole.log(new Date(), msg);\n}\n});\nrxStomp.activate();\n\n\nMaps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            connected\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:331\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:312\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            publish\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(parameters: IRxStompPublishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:391\n                \n            \n\n\n            \n                \n                    Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nIf you do not want that behavior,\nplease set retryIfDisconnected to false\nin the parameters.\nWhen false, this function will raise an error if message could not be sent immediately.\nMaps to: Client#publish\nSee: IRxStompPublishParams and IPublishParams\n```javascript\n\nrxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n\n// Only destination is mandatory parameter\nrxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n\n// Skip content-length header in the frame to the broker\nrxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n\nvar binaryData = generateBinaryData(); // This need to be of type Uint8Array\n// setting content-type header is not mandatory, however a good practice\nrxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\nheaders: {'content-type': 'application/octet-stream'}});\n```\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                                IRxStompPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            watch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(destination: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:440\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code read quite strange with two subscribe calls\nfollowing each other and both meaning very different things.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    destination\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            watchForReceipt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:527\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n```javascript\n\n// Publishing with acknowledgement\nlet receiptId = randomText();\n\nrxStomp.watchForReceipt(receiptId, function() {\n// Will be called after server acknowledges\n});\nrxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n\n\nMaps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stompClient\n                    \n                \n\n                \n                    \n                        getstompClient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:148\n                                \n                            \n                    \n                        \n                                Instance of actual\n@stomp/stompjs\nClient.\nBe careful in calling methods on it directly - you may get unintended consequences.\n\n\n                                \n                                    Returns :         Client\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        active\n                    \n                \n\n                \n                    \n                        getactive()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:340\n                                \n                            \n                    \n                        \n                                If the client is active (connected or going to reconnect).\n  Maps to: Client#active\n\n\n                                \n                                    Returns :         boolean\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {filter, share} from 'rxjs/operators';\n\nimport {\n  Client,\n  debugFnType,\n  IFrame,\n  IMessage,\n  publishParams,\n  StompConfig,\n  StompHeaders,\n  StompSubscription\n} from '@stomp/stompjs';\n\nimport {RxStompConfig} from './rx-stomp-config';\nimport {IRxStompPublishParams} from './rx-stomp-publish-params';\nimport {RxStompState} from './rx-stomp-state';\n\n/**\n * This is the main Stomp Client.\n * Typically you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client} class.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception of beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n  /**\n   * Connection State\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public readonly connectionState$: BehaviorSubject;\n\n  /**\n   * Will trigger when connection is established.\n   * It will trigger every time a (re)connection occurs.\n   * If it is already connected it will trigger immediately.\n   * You can safely ignore the value, as it will always be `StompState.OPEN`\n   */\n  public readonly connected$: Observable;\n\n  /**\n   * These will be triggered before connectionState$ and connected$.\n   * During a reconnect, tt will allow subscriptions to be reinstated before sending\n   * queued messages.\n   */\n  private _connectionStatePre$: BehaviorSubject;\n  private _connectedPre$: Observable;\n\n  /**\n   * Provides headers from most recent connection to the server as returned by the CONNECTED frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will trigger for each reconnection.\n   */\n  public readonly serverHeaders$: Observable;\n\n  protected _serverHeadersBehaviourSubject$: BehaviorSubject;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to unsubscribe from an endpoint.\n   *\n   * This Observer will yield the received\n   * {@link IMessage}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}\n   */\n  public readonly unhandledMessage$: Subject;\n\n  /**\n   * This function will be called for any unhandled frame.\n   * Normally you should receive anything here unless it is non compliant STOMP broker\n   * or an error.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}\n   */\n  public readonly unhandledFrame$: Subject;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [RxStomp#watchForReceipt]{@link RxStomp#watchForReceipt}.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}\n   */\n  public readonly unhandledReceipts$: Subject;\n\n  /**\n   * It will stream all ERROR frames received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * This Observer will yield the received\n   * {@link IFrame}\n   * objects.\n   *\n   * Maps to: [Client#onStompError]{@link Client#onStompError}\n   */\n  public readonly stompErrors$: Subject;\n\n  /**\n   * It will stream all web socket errors.\n   *\n   * This Observer will yield the received\n   * [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}.\n   *\n   * Maps to: [Client#onWebSocketError]{@link Client#onWebSocketError}\n   */\n  public readonly webSocketErrors$: Subject;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected _queuedMessages: publishParams[] = [];\n\n  /**\n   * Instance of actual\n   * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n   * {@link Client}.\n   *\n   * **Be careful in calling methods on it directly - you may get unintended consequences.**\n   */\n  get stompClient(): Client {\n    return this._stompClient;\n  }\n  protected _stompClient: Client;\n\n  /**\n   * Before connect\n   */\n  protected _beforeConnect: (client: RxStomp) => void|Promise;\n\n  /**\n   * Will be assigned during configuration, no-op otherwise\n   */\n  protected _debug: debugFnType;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this._stompClient = new Client();\n\n    const noOp = () => {};\n\n    // Before connect is no op by default\n    this._beforeConnect = noOp;\n\n    // debug is no-op by default\n    this._debug = noOp;\n\n    // Initial state is CLOSED\n    this._connectionStatePre$ = new BehaviorSubject(RxStompState.CLOSED);\n\n    this._connectedPre$ = this._connectionStatePre$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Initial state is CLOSED\n    this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n\n    this.connected$ = this.connectionState$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connected$.subscribe(() => {\n      this._sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject$ = new BehaviorSubject(null);\n\n    this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompErrors$ = new Subject();\n    this.unhandledMessage$ = new Subject();\n    this.unhandledReceipts$ = new Subject();\n    this.unhandledFrame$ = new Subject();\n    this.webSocketErrors$ = new Subject();\n  }\n\n  /**\n   * Set configuration. This method may be called multiple times.\n   * Each call will add to the existing configuration.\n   *\n   * Example:\n   *\n   * ```javascript\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   * ```\n   *\n   * Maps to: [Client#configure]{@link Client#configure}\n   */\n  public configure(rxStompConfig: RxStompConfig) {\n    const stompConfig: StompConfig = (Object as any).assign({}, rxStompConfig);\n\n    if (stompConfig.beforeConnect) {\n      this._beforeConnect = stompConfig.beforeConnect;\n      delete stompConfig.beforeConnect;\n    }\n\n    // RxStompConfig has subset of StompConfig fields\n    this._stompClient.configure(stompConfig);\n    if (stompConfig.debug) {\n      this._debug = stompConfig.debug;\n    }\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n   *\n   * Maps to: [Client#activate]{@link Client#activate}\n   */\n  public activate(): void {\n    this._stompClient.configure({\n      beforeConnect: async () => {\n        this._changeState(RxStompState.CONNECTING);\n\n        // Call handler\n        await this._beforeConnect(this);\n      },\n      onConnect: (frame: IFrame) => {\n        this._serverHeadersBehaviourSubject$.next(frame.headers);\n\n        // Indicate our connected state to observers\n        this._changeState(RxStompState.OPEN);\n      },\n      onStompError: (frame: IFrame) => {\n        // Trigger the frame subject\n        this.stompErrors$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(RxStompState.CLOSED);\n      },\n      onUnhandledMessage: (message: IMessage) => {\n        this.unhandledMessage$.next(message);\n      },\n      onUnhandledReceipt: (frame: IFrame) => {\n        this.unhandledReceipts$.next(frame);\n      },\n      onUnhandledFrame: (frame: IFrame) => {\n        this.unhandledFrame$.next(frame);\n      },\n      onWebSocketError: (evt: Event) => {\n        this.webSocketErrors$.next(evt);\n      }\n    });\n\n    // Attempt connection\n    this._stompClient.activate();\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [RxStomp#activate]{@link RxStomp#activate}.\n   *\n   * Maps to: [Client#deactivate]{@link Client#deactivate}\n   */\n  public deactivate(): void {\n    // Disconnect if connected. Callback will set CLOSED state\n    this._stompClient.deactivate();\n\n    const stompState = this.connectionState$.getValue();\n    if (stompState === RxStompState.OPEN) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSING);\n    }\n    // This is bit tricky situation, it would be better handled at stompjs level\n    if (stompState === RxStompState.CONNECTING) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSED);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.connectionState$.getValue() === RxStompState.OPEN;\n  }\n\n  /**\n   * If the client is active (connected or going to reconnect).\n   *\n   *  Maps to: [Client#active]{@link Client#active}\n   */\n  get active(): boolean {\n    return this.stompClient.active;\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   * If you do not want that behavior,\n   * please set [retryIfDisconnected]{@link IRxStompPublishParams#retryIfDisconnected} to `false`\n   * in the parameters.\n   * When `false`, this function will raise an error if message could not be sent immediately.\n   *\n   * Maps to: [Client#publish]{@link Client#publish}\n   *\n   * See: {@link IRxStompPublishParams} and {@link IPublishParams}\n   *\n   * ```javascript\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   */\n  public publish(parameters: IRxStompPublishParams): void {\n    // retry behaviour is defaulted to true\n    const shouldRetry = parameters.retryIfDisconnected == null\n      ? true\n      : parameters.retryIfDisconnected;\n\n    if (this.connected()) {\n      this._stompClient.publish(parameters);\n    } else if (shouldRetry) {\n      this._debug(`Not connected, queueing`);\n      this._queuedMessages.push(parameters);\n    } else {\n      throw new Error('Cannot publish while broker is not connected');\n    }\n  }\n\n  /** It will send queued messages. */\n  protected _sendQueuedMessages(): void {\n    const queuedMessages = this._queuedMessages;\n    this._queuedMessages = [];\n\n    if (queuedMessages.length === 0) {\n      return;\n    }\n\n    this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n\n    for (const queuedMessage of queuedMessages) {\n      this._debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * Note that messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * This method in the underlying library is called `subscribe`.\n   * In earlier version it was called `subscribe` here as well.\n   * However `subscribe` is also used by RxJS and code read quite strange with two subscribe calls\n   * following each other and both meaning very different things.\n   *\n   * Maps to: [Client#subscribe]{@link Client#subscribe}\n   */\n  public watch(destination: string, headers: StompHeaders = {}): Observable {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this._debug(`Request to subscribe ${destination}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers.ack) {\n      headers.ack = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this._connectedPre$.subscribe(() => {\n          this._debug(`Will subscribe to ${destination}`);\n          stompSubscription = this._stompClient.subscribe(destination, (message: IMessage) => {\n              messages.next(message);\n            },\n            headers);\n        });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this._debug(`Stop watching connection state (for ${destination})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.connected()) {\n            this._debug(`Will unsubscribe from ${destination} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this._debug(`Stomp not connected, no need to unsubscribe from ${destination} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public watchForReceipt(receiptId: string, callback: (frame: IFrame) => void): void {\n    this._stompClient.watchForReceipt(receiptId, callback);\n  }\n\n  protected _changeState(state: RxStompState): void {\n    this._connectionStatePre$.next(state);\n    this.connectionState$.next(state);\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            appendMissingNULLonIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:113\n                            \n                        \n\n                \n                    \n                        See Client#appendMissingNULLonIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:154\n                            \n                        \n\n                \n                    \n                        Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nAs of version 0.1.1, this callback can be\nasync\n(i.e., it can return a\nPromise).\nIn that case connect will be called only after the Promise is resolved.\nThis can be used to reliably fetch credentials, access token etc. from some other service\nin an asynchronous way.\nAs of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\nMaps to: Client#beforeConnect\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:22\n                            \n                        \n\n                \n                    \n                        The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:127\n                            \n                        \n\n                \n                    \n                        Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:50\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:134\n                            \n                        \n\n                \n                    \n                        Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            forceBinaryWSFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:108\n                            \n                        \n\n                \n                    \n                        Maps to: Client#forceBinaryWSFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:87\n                            \n                        \n\n                \n                    \n                        Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:94\n                            \n                        \n\n                \n                    \n                        Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            logRawCommunication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:47\n                            \n                        \n\n                \n                    \n                        Set it to log the actual raw communication with the broker.\nWhen unset, it logs headers of the parsed frames.\nChange in this effects from next broker reconnect.\nCaution: this assumes that frames only have valid UTF8 strings.\nMaps to: Client#logRawCommunication.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            maxWebSocketChunkSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:118\n                            \n                        \n\n                \n                    \n                        Maps to: Client#maxWebSocketChunkSize.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:80\n                            \n                        \n\n                \n                    \n                        automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            splitLargeFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:103\n                            \n                        \n\n                \n                    \n                        Enable non-standards compliant mode of splitting of outgoing large text packets.\nSee Client#splitLargeFrames for details.\nUseful with Java Spring based brokers.\nMaps to: Client#splitLargeFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:35\n                            \n                        \n\n                \n                    \n                        STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n```javascript\n\n// Try only versions 1.0 and 1.1\nrxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n\n\nMaps to: Client#stompVersions\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:73\n                            \n                        \n\n                \n                    \n                        This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n```javascript\n\n// use a WebSocket\nrxStompConfig.webSocketFactory= function () {\nreturn new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n};\n\n// Typical usage with SockJS\nrxStompConfig.webSocketFactory= function () {\nreturn new SockJS(\"http://broker.329broker.com/stomp\");\n};\n\n\nMaps to: Client#webSocketFactory\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {debugFnType, StompHeaders, Versions} from '@stomp/stompjs';\nimport {RxStomp} from './rx-stomp';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * Set it to log the actual raw communication with the broker.\n   * When unset, it logs headers of the parsed frames.\n   *\n   * Change in this effects from next broker reconnect.\n   *\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\n   *\n   * Maps to: [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Enable non-standards compliant mode of splitting of outgoing large text packets.\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames} for details.\n   * Useful with Java Spring based brokers.\n   *\n   * Maps to: [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * Maps to: [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * Maps to: [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * As of version 0.1.1, this callback can be\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\n   * (i.e., it can return a\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\n   * In that case connect will be called only after the Promise is resolved.\n   * This can be used to reliably fetch credentials, access token etc. from some other service\n   * in an asynchronous way.\n   *\n   * As of 0.3.5, this callback will receive [RxStomp](@link RxStomp) as parameter.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: (client: RxStomp) => void|Promise;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPart of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:25\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            rpc\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: publishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:47\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: publishParams)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:58\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Observable, Observer, Subscription} from 'rxjs';\nimport {filter, first} from 'rxjs/operators';\n\nimport {UUID} from 'angular2-uuid';\n\nimport {IMessage, publishParams, StompHeaders} from '@stomp/stompjs';\n\nimport {RxStomp} from './rx-stomp';\nimport {RxStompRPCConfig, setupReplyQueueFnType} from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n *\n * Part of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  }\n\n  private _repliesObservable: Observable;\n\n  /**\n   * Create an instance, see the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for details.\n   */\n  constructor(private rxStomp: RxStomp, private stompRPCConfig?: RxStompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request.\n   * See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html) for example.\n   *\n   * It is a simple wrapper around [RxStompRPC#stream]{@link RxStompRPC#stream}.\n   */\n  public rpc(params: publishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](/guide/rx-stomp/ng2-stompjs/remote-procedure-call.html).\n   *\n   * Note: This call internally takes care of generating a correlation id,\n   * however, if `correlation-id` is passed via `headers`, that will be used instead.\n   */\n  public stream(params: publishParams): Observable {\n    const headers: StompHeaders = (Object as any).assign({}, params.headers || {});\n    const {destination, body, binaryBody} = params;\n\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = headers['correlation-id'] || UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: IMessage) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: IMessage) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.rxStomp.publish({destination, body, binaryBody, headers});\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            replyQueueName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:20\n                            \n                        \n\n                \n                    \n                        Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            setupReplyQueue\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         setupReplyQueueFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:24\n                            \n                        \n\n                \n                    \n                        Setup the reply queue. See the guide for details.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMessage } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n *\n * Part of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, rxStomp: RxStomp) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n            \n                Extends\n            \n            \n                        RxStompRPC\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                        RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                        InjectableRxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            rpc\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    rpc(params: publishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:47\n\n                \n            \n\n\n            \n                \n                    Make an RPC request.\nSee the guide for example.\nIt is a simple wrapper around RxStompRPC#stream.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stream\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stream(params: publishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStompRPC\n\n                \n            \n            \n                \n                        Defined in         RxStompRPC:58\n\n                \n            \n\n\n            \n                \n                    Make an RPC stream request. See the guide.\nNote: This call internally takes care of generating a correlation id,\nhowever, if correlation-id is passed via headers, that will be used instead.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                                publishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable, Optional} from '@angular/core';\n\nimport {RxStompRPC} from '@stomp/rx-stomp';\nimport {RxStompService} from './rx-stomp.service';\nimport {InjectableRxStompRPCConfig} from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  constructor(rxStomp: RxStompService, @Optional() stompRPCConfig?: InjectableRxStompRPCConfig) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n            \n                Extends\n            \n            \n                        RxStomp\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                connected$\n                            \n                            \n                                    Public\n                                    Readonly\n                                connectionState$\n                            \n                            \n                                    Public\n                                    Readonly\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                    Readonly\n                                stompErrors$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledFrame$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                    Readonly\n                                unhandledReceipts$\n                            \n                            \n                                    Public\n                                    Readonly\n                                webSocketErrors$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            activate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    activate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:265\n\n                \n            \n\n\n            \n                \n                    Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(rxStompConfig: RxStompConfig)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:241\n\n                \n            \n\n\n            \n                \n                    Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n```javascript\n\nconst rxStomp = new RxStomp();\nrxStomp.configure({\nbrokerURL: 'ws://127.0.0.1:15674/ws',\nconnectHeaders: {\nlogin: 'guest',\npasscode: 'guest'\n},\nheartbeatIncoming: 0,\nheartbeatOutgoing: 20000,\nreconnectDelay: 200,\ndebug: (msg: string): void => {\nconsole.log(new Date(), msg);\n}\n});\nrxStomp.activate();\n\n\nMaps to: Client#configure\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n                                    \n                                                RxStompConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            connected\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    connected()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:331\n\n                \n            \n\n\n            \n                \n                    It will return true if STOMP broker is connected and false otherwise.\n\n\n                    \n                        Returns :         boolean\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            deactivate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deactivate()\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:312\n\n                \n            \n\n\n            \n                \n                    Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            publish\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    publish(parameters: IRxStompPublishParams)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:391\n\n                \n            \n\n\n            \n                \n                    Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nIf you do not want that behavior,\nplease set retryIfDisconnected to false\nin the parameters.\nWhen false, this function will raise an error if message could not be sent immediately.\nMaps to: Client#publish\nSee: IRxStompPublishParams and IPublishParams\n```javascript\n\nrxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n\n// Only destination is mandatory parameter\nrxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n\n// Skip content-length header in the frame to the broker\nrxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n\nvar binaryData = generateBinaryData(); // This need to be of type Uint8Array\n// setting content-type header is not mandatory, however a good practice\nrxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\nheaders: {'content-type': 'application/octet-stream'}});\n```\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    parameters\n                                    \n                                                IRxStompPublishParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            watch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    watch(destination: string, headers: StompHeaders)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:440\n\n                \n            \n\n\n            \n                \n                    It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code read quite strange with two subscribe calls\nfollowing each other and both meaning very different things.\nMaps to: Client#subscribe\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    destination\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    headers\n                                    \n                                                StompHeaders\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        {}\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            watchForReceipt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    watchForReceipt(receiptId: string, callback: (frame: IFrame) => void)\n                \n            \n\n\n            \n                \n                    Inherited from         RxStomp\n\n                \n            \n            \n                \n                        Defined in         RxStomp:527\n\n                \n            \n\n\n            \n                \n                    STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n```javascript\n\n// Publishing with acknowledgement\nlet receiptId = randomText();\n\nrxStomp.watchForReceipt(receiptId, function() {\n// Will be called after server acknowledges\n});\nrxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n\n\nMaps to: Client#watchForReceipt\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiptId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            connected$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:54\n\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            connectionState$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:46\n\n                            \n                        \n\n                \n                    \n                        Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            serverHeaders$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:69\n\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            stompErrors$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:124\n\n                            \n                        \n\n                \n                    \n                        It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onStompError\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledFrame$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:99\n\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled frame.\nNormally you should receive anything here unless it is non compliant STOMP broker\nor an error.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledFrame\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledMessage$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:86\n\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nIMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            unhandledReceipts$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:111\n\n                            \n                        \n\n                \n                    \n                        STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nIFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            webSocketErrors$\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                            \n                                \n                                    Inherited from         RxStomp\n\n                                \n                            \n                        \n                            \n                                    Defined in         RxStomp:134\n\n                            \n                        \n\n                \n                    \n                        It will stream all web socket errors.\nThis Observer will yield the received\nEvent.\nMaps to: Client#onWebSocketError\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp { }\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WebSocketClass\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:32\n                            \n                        \n\n                \n                    \n                        In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n```javascript\n\nStompJs = require('../../esm5/');\nStomp = StompJs.Stomp;\nStomp.WebSocketClass = require('websocket').w3cwebsocket;\n\n\nDeprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            client\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    client(url: string, protocols?: string[])\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:48\n                \n            \n\n\n            \n                \n                    This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n```javascript\n\nvar url = \"ws://localhost:61614/stomp\";\nvar client = Stomp.client(url);\n\n\nDeprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    protocols\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            over\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    over(ws: any)\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:92\n                \n            \n\n\n            \n                \n                    This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n```javascript\n\nvar client = Stomp.over(function(){\nreturn new WebSocket('ws://localhost:15674/ws')\n});\n\n\nDeprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ws\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CompatClient\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    let wsFn: () => any;\n\n    if (typeof (ws) === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' +\n        'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n      wsFn = () => ws;\n    }\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                appendMissingNULLonIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                forceBinaryWSFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                maxWebSocketChunkSize\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketError\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                splitLargeFrames\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            appendMissingNULLonIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:62\n                            \n                        \n\n                \n                    \n                        See Client#appendMissingNULLonIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:97\n                            \n                        \n\n                \n                    \n                        See Client#beforeConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:22\n                            \n                        \n\n                \n                    \n                        See Client#brokerURL.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:72\n                            \n                        \n\n                \n                    \n                        See Client#connectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:132\n                            \n                        \n\n                \n                    \n                        See Client#debug.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:77\n                            \n                        \n\n                \n                    \n                        See Client#disconnectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            forceBinaryWSFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:57\n                            \n                        \n\n                \n                    \n                        See Client#forceBinaryWSFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:42\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:47\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatOutgoing.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            logRawCommunication\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:127\n                            \n                        \n\n                \n                    \n                        See Client#logRawCommunication.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            maxWebSocketChunkSize\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:67\n                            \n                        \n\n                \n                    \n                        See Client#maxWebSocketChunkSize.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onConnect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:102\n                            \n                        \n\n                \n                    \n                        See Client#onConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onDisconnect\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:107\n                            \n                        \n\n                \n                    \n                        See Client#onDisconnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onStompError\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:112\n                            \n                        \n\n                \n                    \n                        See Client#onStompError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledFrame\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:92\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledFrame.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledMessage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         messageCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:82\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledMessage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledReceipt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:87\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledReceipt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketClose\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         closeEventCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:117\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketClose.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketError\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         wsErrorCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:122\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:37\n                            \n                        \n\n                \n                    \n                        See Client#reconnectDelay.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            splitLargeFrames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:52\n                            \n                        \n\n                \n                    \n                        See Client#splitLargeFrames.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:27\n                            \n                        \n\n                \n                    \n                        See See Client#stompVersions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:32\n                            \n                        \n\n                \n                    \n                        See Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\n   */\n  public splitLargeFrames?: boolean;\n\n  /**\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\n   */\n  public forceBinaryWSFrames?: boolean;\n\n  /**\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\n   */\n  public appendMissingNULLonIncoming?: boolean;\n\n  /**\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n   */\n  public maxWebSocketChunkSize?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void|Promise;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as IFrame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders { [key: string]: string }\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompSubscription.html":{"url":"classes/StompSubscription.html","title":"class - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:12\n                            \n                        \n\n                \n                    \n                        Id associated with this subscription.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unsubscribe\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:17\n                            \n                        \n\n                \n                    \n                        Unsubscribe. See Client#unsubscribe for an example.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:23\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_0\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:10\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.0\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_1\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.1'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:14\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.1\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_2\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.2'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:18\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.2\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            versions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            protocolVersions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    protocolVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:44\n                \n            \n\n\n            \n                \n                    Used while creating a WebSocket\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            supportedVersions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    supportedVersions()\n                \n            \n\n\n            \n                \n                    Defined in consolidated/stompjs/src/versions.ts:37\n                \n            \n\n\n            \n                \n                    Used as part of CONNECT STOMP Frame\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n            \n            injectable\n            InjectableRxStompConfig\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n            \n            injectable\n            InjectableRxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n            \n            variable\n            InjectableRxStompRpcConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n            \n            injectable\n            RxStompRPCService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n            \n            function\n            rxStompServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp.service.ts\n            \n            injectable\n            RxStompService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp-r.service.ts\n            \n            injectable\n            StompRService\n            \n                95 %\n                (22/23)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp.service.ts\n            \n            injectable\n            StompService\n            \n                100 %\n                (38/38)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            class\n            RxStompConfig\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-publish-params.ts\n            \n            interface\n            IRxStompPublishParams\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            class\n            RxStompRPCConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            class\n            RxStompRPC\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            class\n            RxStomp\n            \n                100 %\n                (17/17)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            class\n            Client\n            \n                100 %\n                (37/37)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            class\n            CompatClient\n            \n                100 %\n                (40/40)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            class\n            Stomp\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-frame.ts\n            \n            interface\n            IFrame\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-message.ts\n            \n            interface\n            IMessage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-transaction.ts\n            \n            interface\n            ITransaction\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            class\n            StompConfig\n            \n                100 %\n                (24/24)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            class\n            StompHeaders\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            class\n            StompSubscription\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            interface\n            IPublishParams\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            class\n            Versions\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPart of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            rxStompServiceFactory\n                        \n                        \n                    \n                \n            \n            \n                \nrxStompServiceFactory(rxStompConfig)\n                \n            \n\n\n\n\n            \n                \n                    Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    rxStompConfig\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         RxStompService\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNavigating through the API docs\nThese docs correspond to NPM released main line versions.\nPlease see dev docs for development versions.\nThe API docs cover three libraries:\n\n@stomp/stompjs\n@stomp/rx-stomp - builds over @stomp/stompjs\n@stomp/ng2-stompjs - thin wrapper over @stomp/rx-stomp\n\nThe documentation for classes indicate which library each of the classes\nbelong. See the guides for more information and tutorials.\nThese documents have been generated using Compodoc.\nstompjs\nPreferred entry point is Client.\nIf you are using compatibility mode your entry point would be\nStomp.\nrx-stomp\nYour entry point would be RxStomp.\nFor RPC RxStompRPC.\nng2-stompjs\nInjectable versions of rx-stomp classes:\n\nRxStompService for RxStomp\nInjectableRxStompConfig for RxStompConfig\nRxStompRPCService for RxStompRPC\nInjectableRxStompRPCConfig for RxStompRPCConfig\nrxStompServiceFactory\n\nDeprecated classes:\n\nStompRService\nStompService\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            Frame   (consolidated/.../i-frame.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            Message   (consolidated/.../i-message.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            publishParams   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                        \n                            wsErrorCallbackType   (consolidated/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n    \n        \n            \n                \n                    \n                    closeEventCallbackType\n                \n            \n            \n                \n                    This callback will receive a CloseEvent\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    debugFnType\n                \n            \n            \n                \n                    This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    frameCallbackType\n                \n            \n            \n                \n                    This callback will receive a IFrame as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    messageCallbackType\n                \n            \n            \n                \n                    This callback will receive a IMessage as parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    publishParams\n                \n            \n            \n                \n                    Backward compatibility, switch to IPublishParams.\n\n                \n            \n            \n                \n                            IPublishParams\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    wsErrorCallbackType\n                \n            \n            \n                \n                    This callback will receive an Event\nas parameter.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-frame.ts\n    \n    \n        \n            \n                \n                    \n                    Frame\n                \n            \n            \n                \n                    Alias for IFrame\n\n                \n            \n            \n                \n                            IFrame\n\n                \n            \n        \n    \n    consolidated/stompjs/src/i-message.ts\n    \n    \n        \n            \n                \n                    \n                    Message\n                \n            \n            \n                \n                    Aliased to IMessage.\nPart of @stomp/stompjs.\n\n                \n            \n            \n                \n                            IMessage\n\n                \n            \n        \n    \n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n    \n        \n            \n                \n                    \n                    setupReplyQueueFnType\n                \n            \n            \n                \n                    See the guide for example\nPart of @stomp/rx-stomp\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            InjectableRxStompRpcConfig   (consolidated/.../injectable-rx-stomp-rpc-config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            InjectableRxStompRpcConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : InjectableRxStompRPCConfig\n                        \n                    \n\n                \n                    \n                        Deprecated, use InjectableRxStompRPCConfig instead\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
