var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/interfaces/IFrame.html",[0,0.973,1,1.467]],["body/interfaces/IFrame.html",[0,1.462,1,2.834,2,0.389,3,0.389,4,0.329,5,1.9,6,2.44,7,0.389,8,3.684,9,0.273,10,2.577,11,3.684,12,1.983,13,2.328,14,2.463,15,2.204,16,3.163,17,3.684,18,1.983,19,3.163,20,1.88,21,0.504,22,0.859,23,2.204,24,1.789,25,0.451,26,1.192,27,3.256,28,2.834,29,4.591,30,5.253,31,3.847,32,0.837,33,0.04,34,1.38,35,1.4,36,2.463,37,1.789,38,4.474,39,3.078,40,3.163,41,3.163,42,4.474,43,4.474,44,1.617,45,0.588,46,2.842,47,2.842,48,1.192,49,0.504,50,4.474,51,2.842,52,0.029,53,0.029]],["title/interfaces/IMessage.html",[0,0.973,23,1.467]],["body/interfaces/IMessage.html",[0,1.476,1,2.463,2,0.394,3,0.394,4,0.334,5,1.927,7,0.394,9,0.168,10,1.552,12,1.552,13,2.001,19,3.192,20,1.726,21,0.563,22,0.96,23,2.602,24,2.112,25,0.458,26,1.407,28,1.725,32,0.75,33,0.04,35,1.332,45,0.769,46,2.882,48,1.203,49,0.508,52,0.029,53,0.029,54,2.475,55,2.225,56,2.367,57,2.486,58,3.192,59,4.516,60,1.075,61,3.533,62,1.653,63,3.957,64,4.608,65,1.014,66,3.274,67,4.348,68,3.733,69,1.909,70,2.602,71,4.516,72,4.516,73,3.501,74,2.475,75,3.501,76,3.501,77,3.501,78,2.475,79,3.501,80,2.001,81,3.501,82,2.475]],["title/interfaces/IPublishParams.html",[0,0.973,83,1.846]],["body/interfaces/IPublishParams.html",[0,1.471,1,2.218,2,0.32,3,0.32,4,0.271,7,0.32,9,0.137,10,2.153,12,2.259,14,2.806,15,1.936,20,1.884,21,0.629,22,1.073,23,2.218,25,0.372,26,1.047,27,3.16,28,2.713,29,2.341,31,3.433,32,0.865,33,0.041,34,1.371,35,1.294,39,2.791,40,2.777,45,0.767,48,1.294,49,0.629,52,0.025,53,0.025,56,1.571,80,2.259,82,2.777,83,3.011,84,2.01,85,1.596,86,3.235,87,2.479,88,3.235,89,1.557,90,3.268,91,3.999,92,2.777,93,3.929,94,1.741,95,3.235,96,3.235,97,3.235,98,2.436,99,3.235,100,3.235,101,1.565,102,2.01,103,2.01,104,2.01,105,2.01,106,2.843,107,3.929,108,2.843,109,2.01,110,3.929,111,2.341,112,2.843,113,2.843,114,2.01,115,2.01,116,2.341,117,2.341,118,2.01,119,2.01,120,0.929,121,3.929,122,2.777,123,3.929,124,2.843,125,2.341,126,2.843]],["title/interfaces/ITransaction.html",[0,0.973,127,2.105]],["body/interfaces/ITransaction.html",[0,1.592,2,0.445,3,0.445,4,0.376,5,2.174,7,0.445,18,2.159,19,3.444,21,0.445,22,0.758,25,0.517,26,1.298,32,0.793,33,0.04,34,1.267,44,1.427,49,0.445,52,0.032,53,0.032,60,1.059,62,1.673,63,3.444,64,4.011,65,1.059,69,1.427,80,2.159,127,3.444,128,3.251,129,5.849,130,3.949,131,3.949,132,3.949,133,5.772,134,5.772,135,3.037,136,4.872,137,4.872,138,3.02,139,4.011,140,3.949,141,3.949]],["title/injectables/InjectableRxStompConfig.html",[142,0.572,143,2.105]],["body/injectables/InjectableRxStompConfig.html",[2,0.418,3,0.418,4,0.353,7,0.418,9,0.259,16,3.311,18,2.076,21,0.527,24,1.483,33,0.04,37,1.873,45,0.798,48,1.368,49,0.418,52,0.03,53,0.03,60,1.036,65,1.036,120,1.763,142,1.131,143,3.311,144,1.34,145,2.621,146,1.643,147,1.643,148,1.873,149,1.531,150,0.032,151,1.383,152,2.518,153,3.857,154,2.904,155,2.076,156,2.579,157,3.311,158,3.311,159,3.311,160,3.813,161,1.873,162,3.344,163,2.076,164,4.685,165,4.441,166,2.579,167,1.008,168,2.579,169,4.685,170,3.311,171,4.685,172,3.311,173,4.685,174,4.685,175,3.857,176,1.827,177,1.095]],["title/injectables/InjectableRxStompRpcConfig.html",[142,0.572,178,1.846]],["body/injectables/InjectableRxStompRpcConfig.html",[2,0.478,3,0.478,4,0.405,7,0.478,9,0.245,21,0.573,24,1.698,33,0.039,45,0.868,48,1.357,49,0.478,52,0.033,53,0.033,60,0.978,142,1.111,144,1.535,145,3.002,146,1.882,147,1.882,148,2.262,149,1.664,150,0.026,151,1.504,161,2.036,176,2.092,177,1.254,178,3.157,179,2.092,180,3.113,181,4.193,182,4.193,183,3.6,184,3.6]],["title/classes/RxStomp.html",[150,0.019,185,0.973]],["body/classes/RxStomp.html",[2,0.089,3,0.089,4,0.076,7,0.089,9,0.269,10,2.284,12,1.83,13,0.625,14,2.331,15,2.684,18,1.83,20,1.713,21,0.089,22,0.508,25,0.104,26,0.376,27,1.431,28,2.087,31,1.346,32,0.706,33,0.041,34,1.016,35,0.705,36,0.776,37,1.27,39,0.874,40,2.071,41,0.997,44,0.51,45,0.499,48,0.705,49,0.089,52,0.009,53,0.015,55,1.137,56,2.146,57,1.271,58,0.997,60,0.271,61,0.997,62,0.938,65,0.65,66,2.878,68,2.525,69,1.778,70,1.977,74,0.56,78,0.56,80,2.027,85,1.146,86,1.161,87,1.748,88,1.567,89,0.615,90,2.487,91,1.9,92,0.997,94,1.172,95,3.487,96,3.076,97,2.413,98,1.968,99,1.9,100,1.161,101,0.776,102,2.071,105,3.124,116,0.653,120,1.415,122,0.56,125,2.413,135,1.271,138,2.316,146,0.625,149,0.259,150,0.014,151,0.416,152,1.407,154,0.492,155,1.023,162,0.492,163,1.407,166,1.613,167,0.932,168,1.864,172,0.997,177,0.416,185,1.107,186,1.959,187,1.959,188,0.653,189,1.41,190,2.034,191,2.8,192,1.41,193,2.308,194,2.308,195,3.076,196,1.817,197,2.799,198,2.308,199,2.136,200,2.1,201,1.41,202,1.346,203,1.41,204,1.41,205,1.87,206,1.41,207,1.632,208,1.41,209,0.695,210,1.774,211,2.308,212,2.308,213,2.308,214,2.308,215,2.308,216,2.178,217,2.308,218,2.413,219,2.178,220,1.41,221,1.161,222,1.904,223,1.172,224,0.793,225,0.793,226,3.399,227,2.178,228,1.9,229,1.161,230,1.161,231,1.87,232,2.394,233,1.9,234,1.161,235,1.9,236,1.41,237,2.614,238,0.793,239,2.525,240,1.161,241,2.178,242,1.9,243,1.161,244,1.346,245,0.793,246,0.997,247,1.161,248,2.394,249,2.394,250,2.626,251,3.487,252,0.793,253,1.9,254,1.41,255,1.9,256,1.9,257,1.817,258,2.071,259,1.41,260,1.41,261,1.968,262,3.234,263,1.161,264,0.793,265,2.308,266,2.071,267,1.161,268,1.161,269,1.64,270,2.071,271,1.41,272,1.41,273,2.641,274,2.178,275,0.793,276,2.308,277,3.196,278,1.9,279,1.161,280,1.41,281,1.161,282,0.793,283,1.346,284,1.41,285,1.41,286,1.41,287,1.41,288,1.161,289,2.215,290,2.308,291,1.87,292,1.41,293,1.41,294,0.793,295,1.41,296,1.41,297,1.41,298,1.669,299,1.41,300,0.997,301,1.41,302,0.997,303,1.161,304,2.308,305,1.161,306,0.997,307,1.567,308,0.997,309,1.41,310,0.997,311,1.41,312,1.346,313,1.161,314,1.161,315,1.41,316,1.161,317,1.107,318,0.793,319,1.41,320,2.308,321,0.793,322,1.9,323,1.41,324,1.41,325,2.244,326,1.41,327,1.41,328,1.41,329,1.41,330,0.793,331,1.41,332,0.997,333,1.161,334,1.41,335,2.071,336,1.41,337,1.41,338,1.161,339,1.161,340,1.41,341,1.41,342,0.874,343,1.9,344,1.41,345,1.632,346,1.567,347,1.41,348,1.41,349,1.9,350,1.41,351,1.9,352,2.788,353,2.308,354,1.41,355,1.41,356,2.93,357,2.308,358,1.41,359,1.161,360,2.308,361,1.41,362,1.904,363,1.41,364,2.308,365,1.41,366,1.567,367,2.614,368,1.161,369,1.567,370,1.41,371,0.793,372,1.161,373,0.874,374,1.161,375,1.161,376,1.431,377,1.161,378,1.632,379,1.161,380,1.161,381,1.9,382,1.41,383,1.41,384,1.904,385,1.41,386,1.41,387,1.41,388,1.41,389,1.41,390,1.161,391,1.161,392,1.41,393,1.41,394,1.41,395,0.793,396,1.161,397,0.997,398,1.161,399,1.161,400,0.997,401,1.161,402,0.874,403,1.161,404,0.997,405,2.178,406,1.161,407,1.41,408,1.161,409,0.793,410,0.793,411,1.41,412,1.41,413,1.41,414,1.41,415,1.161,416,0.793,417,0.56,418,1.137,419,1.431,420,0.391,421,1.346,422,1.41,423,1.41,424,1.41,425,0.793,426,3.573,427,0.793,428,0.793,429,1.41,430,1.41,431,0.653,432,0.653,433,0.653,434,0.793,435,0.793,436,1.161,437,0.793,438,1.161,439,0.793,440,0.793,441,1.904,442,0.793,443,0.793,444,0.793,445,1.904,446,1.904,447,1.41,448,0.793,449,0.793,450,1.904,451,0.793,452,0.793,453,0.793,454,1.567,455,1.567,456,2.645,457,1.41,458,0.793,459,0.793,460,0.793,461,0.653,462,0.793,463,0.793,464,0.653,465,1.18,466,0.653,467,0.653,468,1.904,469,0.793,470,0.793,471,0.793,472,1.41,473,0.793,474,0.793,475,0.793,476,0.793,477,0.793,478,0.793,479,0.653,480,0.793,481,0.793,482,0.653,483,0.793,484,0.653,485,1.904,486,0.793,487,0.793,488,0.793,489,0.793,490,1.346,491,1.41,492,0.793,493,0.793,494,0.793,495,0.793,496,0.793,497,0.653,498,0.793,499,0.793,500,0.793,501,0.793,502,0.793,503,0.793,504,1.41,505,1.41,506,1.904,507,0.793,508,0.793,509,0.793,510,0.793,511,0.793,512,0.793,513,0.793,514,0.793,515,0.653,516,0.793,517,0.793,518,1.41,519,0.793,520,0.56,521,0.793,522,1.41,523,0.793,524,0.793,525,0.793,526,0.793,527,1.41,528,0.793,529,0.653,530,0.793,531,0.793,532,0.793,533,1.41,534,0.793,535,0.793,536,0.653,537,0.793,538,0.793,539,0.793,540,0.793,541,0.793,542,0.793,543,0.793,544,1.41,545,0.793,546,0.793,547,0.793,548,0.793,549,0.793,550,0.793,551,0.793,552,0.793,553,0.793,554,0.793,555,0.653,556,0.793,557,0.793,558,0.793,559,0.653,560,0.793,561,0.793,562,0.653,563,0.793,564,0.793,565,0.793]],["title/classes/RxStompConfig.html",[150,0.019,152,1.319]],["body/classes/RxStompConfig.html",[2,0.218,3,0.218,4,0.185,7,0.218,8,2.448,9,0.28,12,1.796,13,1.318,15,2.552,17,2.448,18,1.318,20,1.324,22,0.373,25,0.254,26,0.792,32,0.777,33,0.04,34,0.867,35,1.278,36,2.23,45,0.616,49,0.218,52,0.019,53,0.019,55,1.465,62,1.196,65,0.994,69,1.464,80,0.86,89,1.535,94,1.318,98,3.39,101,2.23,120,1.506,147,0.86,150,0.019,151,1.529,152,1.318,156,1.637,163,1.796,166,2.23,167,1.114,177,0.878,185,1.324,186,2.335,187,2.335,190,1.465,191,2.552,199,2.043,202,2.864,205,2.101,209,1.465,210,1.931,232,2.101,250,1.843,256,2.448,257,1.843,258,2.101,261,2.512,262,3.99,270,2.101,279,2.448,288,1.597,289,1.843,291,2.864,298,2.271,300,2.864,302,2.864,303,2.448,305,2.448,306,2.864,307,3.794,308,2.864,310,2.864,312,3.258,339,2.448,342,1.843,345,2.101,376,1.843,390,3.336,402,3.146,438,2.448,465,1.843,566,2.973,567,2.973,568,3.336,569,3.336,570,3.336,571,1.597,572,2.973,573,2.973,574,2.448,575,1.94,576,2.448,577,1.94,578,2.448,579,2.973,580,2.973,581,2.448,582,4.052,583,3.258,584,1.94,585,2.973,586,2.973,587,3.336,588,2.448,589,2.973,590,2.973,591,2.448,592,1.597,593,2.973,594,1.597,595,2.448,596,1.94,597,2.973,598,4.052,599,4.052,600,4.609,601,4.609,602,2.973,603,1.94,604,2.973,605,2.448,606,1.597,607,2.973,608,2.973,609,1.94,610,2.448,611,3.336,612,3.794,613,2.973,614,2.973,615,2.448,616,1.94,617,3.258,618,2.448,619,3.336,620,3.336,621,2.973,622,2.973,623,2.101,624,1.94,625,2.973,626,2.555,627,1.597,628,1.371,629,1.597,630,1.597,631,1.597,632,1.94,633,1.597]],["title/classes/RxStompRPC.html",[150,0.019,634,1.846]],["body/classes/RxStompRPC.html",[2,0.307,3,0.307,4,0.26,7,0.307,9,0.262,20,1.247,22,0.523,25,0.357,27,2.366,28,1.88,32,0.661,33,0.04,35,1.017,44,1.379,45,0.887,49,0.307,52,0.025,53,0.025,55,1.88,56,2.081,57,2.101,60,1.047,62,1.127,69,1.379,70,1.88,85,1.3,87,2.941,89,1.173,90,1.69,120,1.247,135,2.101,138,1.69,146,1.691,150,0.024,155,1.691,156,2.626,161,1.907,167,0.947,168,2.424,177,1.127,179,2.765,180,2.626,183,3.678,184,3.372,185,1.7,186,2.114,187,2.114,196,1.69,197,3.001,199,2.367,200,2.957,209,1.88,210,1.7,223,1.208,261,1.69,273,3.549,317,1.439,400,2.698,415,2.244,417,1.927,420,1.343,467,2.244,520,2.698,529,2.244,536,2.244,581,2.244,634,2.366,635,2.244,636,5.203,637,2.244,638,3.927,639,2.726,640,1.69,641,3.816,642,2.726,643,4.77,644,3.625,645,3.816,646,2.726,647,2.726,648,1.927,649,2.698,650,4.77,651,4.77,652,3.927,653,2.726,654,2.244,655,2.244,656,3.142,657,2.726,658,2.726,659,2.726,660,2.726,661,3.816,662,3.816,663,3.816,664,2.726,665,2.726,666,2.726,667,2.726,668,3.816,669,2.726,670,2.726,671,2.726,672,3.816,673,4.403,674,2.726,675,2.726,676,2.726,677,2.726,678,2.726,679,2.726,680,2.726,681,2.726,682,2.726]],["title/classes/RxStompRPCConfig.html",[150,0.019,180,1.639]],["body/classes/RxStompRPCConfig.html",[2,0.406,3,0.406,4,0.343,7,0.406,9,0.265,22,0.692,25,0.472,26,1.226,32,0.76,33,0.04,34,1.28,45,0.864,49,0.518,52,0.03,53,0.03,56,1.441,60,1.101,62,1.497,89,1.423,94,2.039,146,1.598,147,1.598,150,0.029,156,2.939,161,2.292,167,0.99,177,1.064,179,2.718,180,2.533,185,1.656,186,2.246,187,2.246,196,2.235,197,2.533,209,1.776,210,1.843,267,3.788,269,3.31,317,1.503,420,2.267,455,3.788,649,3.774,654,3.788,655,3.788,656,4.644,683,5.516,684,5.339,685,3.605,686,4.601,687,4.601,688,3.605]],["title/injectables/RxStompRPCService.html",[142,0.572,689,2.105]],["body/injectables/RxStompRPCService.html",[2,0.445,3,0.445,4,0.376,7,0.445,9,0.265,21,0.549,24,1.579,32,0.592,33,0.039,45,0.94,48,1.298,49,0.445,52,0.032,53,0.032,60,0.936,85,1.166,89,1.408,142,1.108,144,1.761,146,2.159,148,2.206,149,1.592,150,0.025,151,1.439,161,1.948,167,0.849,176,1.946,177,1.166,178,3.42,179,1.946,181,4.011,182,4.011,183,3.444,184,3.444,185,1.29,223,1.75,317,1.29,420,1.946,634,3.42,637,4.011,638,4.542,640,2.448,689,3.444,690,3.02,691,3.251,692,2.445,693,3.949,694,3.949,695,3.949]],["title/injectables/RxStompService.html",[142,0.572,692,1.319]],["body/injectables/RxStompService.html",[2,0.453,3,0.453,4,0.383,7,0.453,9,0.256,21,0.555,24,1.608,33,0.04,45,0.839,48,1.479,49,0.453,52,0.032,53,0.032,60,1.113,65,0.946,142,1.094,144,1.453,148,1.97,149,1.61,150,0.033,151,1.455,153,4.056,154,3.054,155,2.183,156,2.712,157,3.483,158,3.483,159,3.483,160,3.924,161,1.97,176,1.981,177,1.187,185,1.894,690,2.493,692,2.183,696,3.311,697,3.054]],["title/classes/Stomp.html",[9,0.143,150,0.019]],["body/classes/Stomp.html",[2,0.25,3,0.25,4,0.212,7,0.25,9,0.248,13,1.459,18,1.923,21,0.371,22,0.632,25,0.291,26,0.877,32,0.589,33,0.041,34,1.164,37,0.888,44,1.568,45,0.561,48,1.234,49,0.25,52,0.021,53,0.021,55,2.137,60,0.426,62,0.972,65,0.99,69,1.19,70,2.474,85,0.972,89,0.877,94,0.984,118,1.57,119,3.646,120,1.834,139,2.71,149,1.076,150,0.032,151,1.583,155,2.286,167,0.844,168,2.159,170,2.327,190,2.853,191,1.622,199,2.335,210,1.282,244,2.327,248,2.327,250,2.689,261,2.041,298,2.596,317,1.282,325,3.066,332,3.43,333,2.71,335,2.773,338,2.71,342,2.041,349,3.229,359,3.995,465,2.432,515,4.337,520,1.57,578,3.814,583,2.327,588,3.814,617,3.891,618,2.71,619,2.71,623,3.066,626,1.57,628,2.327,640,1.377,698,1.828,699,3.292,700,3.266,701,5.158,702,5.158,703,3.724,704,4.338,705,3.292,706,2.221,707,3.292,708,3.292,709,3.292,710,3.292,711,3.292,712,4.338,713,3.292,714,3.292,715,2.221,716,3.292,717,3.292,718,3.292,719,3.814,720,3.292,721,2.221,722,4.338,723,3.292,724,3.923,725,3.292,726,3.292,727,3.292,728,3.292,729,3.292,730,3.292,731,3.292,732,4.338,733,3.292,734,3.292,735,3.923,736,2.221,737,2.221,738,3.292,739,3.292,740,1.828,741,2.221,742,2.221,743,2.221,744,3.292,745,2.221,746,2.221,747,2.221,748,3.292,749,2.221,750,2.221,751,3.292,752,2.221,753,2.221]],["title/classes/StompConfig.html",[150,0.019,418,1.467]],["body/classes/StompConfig.html",[2,0.244,3,0.244,4,0.207,7,0.244,9,0.186,13,1.434,20,0.709,21,0.364,22,0.621,25,0.284,26,0.862,32,0.87,33,0.04,34,0.928,35,1.328,36,1.781,39,2.399,45,0.659,48,0.862,49,0.244,52,0.021,53,0.021,58,2.288,60,1.165,65,0.824,74,1.534,89,1.616,101,2.361,103,3.032,104,4.011,109,3.032,114,3.032,147,0.962,150,0.02,151,1.355,154,2.006,162,2.006,163,1.434,167,1.242,190,2.37,202,3.032,210,2.01,223,1.434,249,2.288,263,2.664,281,2.664,300,3.032,302,3.032,306,3.032,308,3.032,310,3.032,312,3.032,316,2.664,317,1.057,402,3.246,404,2.288,418,1.594,431,1.787,432,1.787,466,1.787,479,3.531,482,3.531,484,3.531,568,3.531,569,3.531,570,3.531,571,1.787,576,2.664,583,2.288,591,2.664,592,1.787,594,1.787,595,2.664,605,2.664,606,1.787,615,2.664,623,2.288,626,1.534,627,1.787,628,1.534,629,1.787,630,1.787,631,1.787,633,1.787,754,3.595,755,4.289,756,4.289,757,4.289,758,4.289,759,4.289,760,4.289,761,2.17,762,2.17,763,2.17,764,2.17,765,3.236,766,2.17,767,2.17,768,3.236,769,2.17,770,3.236,771,2.17,772,3.236,773,2.17,774,3.236,775,2.17,776,2.17,777,3.236,778,2.17,779,3.236,780,2.17,781,3.236,782,3.236,783,2.17,784,2.17,785,2.17,786,2.17,787,2.17,788,2.17,789,2.17,790,2.17,791,2.17,792,2.17,793,2.17,794,2.17]],["title/classes/StompHeaders.html",[35,0.793,150,0.019]],["body/classes/StompHeaders.html",[2,0.492,3,0.492,4,0.416,7,0.492,9,0.21,11,3.594,15,2.151,20,1.803,21,0.492,22,0.838,25,0.571,33,0.038,34,1.397,35,1.379,36,3.142,37,1.746,47,3.594,49,0.492,52,0.033,53,0.033,65,0.838,69,1.578,85,1.289,150,0.032,167,0.939,266,3.086,574,3.594,754,3.209,795,3.594,796,4.366,797,4.366,798,4.366,799,4.366,800,4.366,801,4.366,802,4.366]],["title/injectables/StompRService.html",[142,0.572,803,1.846]],["body/injectables/StompRService.html",[2,0.148,3,0.148,4,0.125,7,0.148,9,0.265,10,2.088,12,1.975,13,1.819,14,1.198,15,2.582,16,1.538,18,1.903,20,1.78,21,0.245,22,0.252,24,0.525,25,0.172,26,0.864,28,1.373,32,0.486,33,0.04,34,1.244,35,1.094,37,1.995,41,1.538,44,0.786,45,0.732,48,0.58,49,0.148,52,0.014,53,0.021,56,2.192,57,1.785,62,0.643,63,2.292,65,0.535,66,2.403,68,3.036,69,1.172,70,2.116,80,2.134,85,1.144,87,1.785,89,0.864,90,1.349,92,1.538,94,1.437,98,2.545,102,1.538,105,3.624,115,1.538,120,1.675,135,1.785,138,2.01,142,0.535,144,1.829,148,1.297,149,0.711,150,0.022,152,1.235,155,1.437,162,1.349,163,1.593,166,1.785,167,1.073,168,1.198,172,1.538,176,0.647,177,0.388,185,0.711,190,1.91,191,2.667,195,3.191,196,0.814,197,2.594,199,2.467,200,1.349,207,2.74,210,1.769,218,3.191,219,1.792,221,1.792,223,1.235,226,3.965,227,2.67,228,1.792,229,1.792,230,2.67,231,2.292,232,2.74,233,2.67,234,1.792,235,1.792,237,3.191,239,2.902,240,3.191,241,2.67,242,2.67,243,1.792,244,2.292,246,1.538,247,2.67,248,3.036,249,1.538,250,2.545,251,3.668,253,2.67,257,2.01,262,1.97,266,1.538,268,1.792,269,2.847,270,1.538,273,3.036,277,3.191,278,1.792,283,1.538,289,2.545,291,1.97,298,0.647,313,1.081,314,1.081,317,1.266,322,2.295,325,2.292,335,2.292,343,2.67,345,1.538,351,1.792,352,1.792,366,1.792,367,2.67,368,1.792,369,1.792,372,1.792,373,2.01,374,1.792,375,1.792,376,1.349,377,1.792,378,2.292,379,1.792,380,1.792,381,2.67,391,1.792,396,2.67,397,2.292,398,1.792,399,1.792,400,1.538,401,1.792,402,1.349,403,1.792,404,1.538,405,2.96,406,1.792,408,1.792,417,0.928,418,1.072,420,1.373,421,2.292,436,1.081,454,1.081,461,1.081,464,1.081,465,0.814,490,1.97,497,1.081,555,1.081,559,1.081,562,1.081,620,1.081,640,0.814,644,2.96,648,1.538,652,1.081,692,0.964,700,1.349,703,0.928,803,1.349,804,3.578,805,1.081,806,1.538,807,1.538,808,2.176,809,1.785,810,1.792,811,2.176,812,2.176,813,1.792,814,1.792,815,1.792,816,1.792,817,1.349,818,2.01,819,3.243,820,2.176,821,2.787,822,2.787,823,2.787,824,2.787,825,2.787,826,1.313,827,1.313,828,1.313,829,2.176,830,1.313,831,4.105,832,2.176,833,1.313,834,2.176,835,2.176,836,2.176,837,2.176,838,2.176,839,1.313,840,2.176,841,2.176,842,1.313,843,1.313,844,1.313,845,2.787,846,1.313,847,1.313,848,2.176,849,2.176,850,1.313,851,1.313,852,1.313,853,1.313,854,1.313,855,1.313,856,1.313,857,1.313,858,1.313,859,1.313,860,1.081,861,1.313,862,3.243,863,1.313,864,2.176,865,1.313,866,1.313,867,1.313,868,1.313,869,1.313,870,1.313,871,1.313,872,2.176,873,1.313,874,1.313,875,1.313,876,1.313,877,1.313,878,1.313,879,1.313,880,1.313,881,1.313,882,1.313,883,2.176,884,1.313,885,1.313,886,1.313,887,2.176,888,1.313,889,1.313,890,1.313,891,1.313,892,1.313,893,1.313,894,1.313,895,1.313,896,1.081,897,1.313,898,1.313,899,1.313,900,1.313]],["title/injectables/StompService.html",[142,0.572,818,1.846]],["body/injectables/StompService.html",[2,0.405,3,0.405,4,0.343,7,0.517,9,0.256,21,0.517,24,1.439,32,0.54,33,0.04,37,1.838,45,0.863,48,1.225,49,0.405,52,0.03,53,0.03,56,1.838,60,0.883,62,1.495,66,2.231,67,2.963,85,1.063,89,0.959,120,1.744,142,0.972,144,1.661,148,2.134,149,1.502,150,0.032,155,1.595,163,2.244,167,0.774,176,1.773,197,2.53,199,1.595,200,2.231,207,2.544,210,1.502,223,2.244,257,2.231,269,2.231,283,2.544,317,1.176,373,2.849,378,2.544,397,2.544,418,2.629,420,2.265,648,3.249,692,2.037,697,2.849,700,2.849,803,3.139,806,3.249,807,3.249,809,2.937,810,3.784,813,2.963,814,2.963,815,2.963,816,2.963,818,2.849,860,2.963,896,2.963,901,2.963,902,4.596,903,3.599,904,4.596,905,4.596,906,3.599,907,2.963,908,3.599,909,3.599]],["title/classes/StompSubscription.html",[150,0.019,419,1.846]],["body/classes/StompSubscription.html",[2,0.452,3,0.452,4,0.382,7,0.452,9,0.193,20,1.608,21,0.554,22,0.945,25,0.525,26,1.311,32,0.738,33,0.04,34,1.276,35,1.311,44,1.779,45,0.684,49,0.452,52,0.032,53,0.032,57,2.709,60,0.945,61,3.479,62,1.453,65,0.945,69,1.779,78,2.837,80,1.779,135,3.19,150,0.031,167,1.059,210,1.893,274,4.771,419,3.44,754,3.299,910,3.305,911,4.014,912,4.921,913,4.014,914,4.921,915,4.014]],["title/classes/Versions.html",[150,0.019,151,0.879]],["body/classes/Versions.html",[2,0.349,3,0.349,4,0.295,7,0.349,9,0.26,10,1.845,21,0.53,22,0.594,25,0.405,26,1.11,32,0.788,33,0.04,34,1.411,37,1.882,44,1.505,49,0.349,52,0.027,53,0.027,55,2.052,70,2.052,85,0.914,89,0.825,94,2.23,120,1.644,122,2.188,150,0.031,151,1.774,166,2.292,167,1.189,191,2.052,199,2.23,210,1.91,223,1.372,298,1.525,317,1.012,332,3.823,342,2.917,346,4.453,376,2.581,433,3.428,587,4.453,610,3.428,611,4.453,612,4.453,617,2.944,703,4.066,907,3.428,916,2.549,917,5.033,918,5.033,919,5.033,920,5.033,921,5.033,922,3.096,923,3.096,924,4.164,925,4.164,926,4.164,927,4.164,928,3.096,929,3.096,930,3.096,931,3.096,932,3.096,933,3.096,934,3.096,935,3.096,936,3.096,937,3.096,938,3.096,939,3.096,940,3.096]],["title/coverage.html",[941,3.339]],["body/coverage.html",[0,1.716,1,1.701,4,0.329,5,2.733,6,2.44,9,0.276,23,1.701,32,0.518,33,0.04,35,0.92,52,0.029,53,0.029,54,2.44,65,0.663,83,2.14,84,2.44,127,2.44,128,2.842,142,1.071,143,2.44,144,2.051,145,3.163,146,1.983,147,2.412,150,0.037,151,1.019,152,1.53,178,2.14,179,2.204,180,1.9,185,1.128,186,2.328,187,2.328,188,2.842,190,1.701,258,2.44,298,1.701,418,1.701,419,2.14,634,2.14,635,2.842,689,2.44,690,3.078,691,2.842,692,1.53,696,2.842,697,2.14,698,2.842,719,2.842,754,3.078,795,2.842,803,2.14,804,2.44,805,2.842,809,1.9,818,2.14,901,2.842,910,2.842,916,2.842,941,2.842,942,3.452,943,3.452,944,6.089,945,5.442,946,3.452,947,3.452,948,2.842,949,4.474,950,4.474,951,3.452,952,3.452,953,4.965,954,4.965,955,3.452,956,3.452,957,3.452,958,3.452,959,3.452,960,3.452,961,4.474,962,3.452,963,3.452,964,3.452]],["title/dependencies.html",[817,2.219,965,2.49]],["body/dependencies.html",[33,0.037,52,0.035,53,0.035,817,2.966,966,4.785,967,4.785]],["title/miscellaneous/enumerations.html",[968,1.227,969,2.946]],["body/miscellaneous/enumerations.html",[9,0.274,21,0.492,25,0.572,33,0.034,52,0.034,53,0.034,144,1.581,148,2.073,149,1.429,150,0.027,177,1.292,185,1.429,186,1.939,187,1.939,191,2.554,205,3.092,209,2.155,239,3.664,255,4.547,289,2.712,373,2.712,421,3.904,490,3.664,700,2.712,740,4.267,804,3.092,806,3.092,807,3.092,809,2.408,968,2.155,969,3.601,970,3.092,971,5.711,972,4.374,973,4.374]],["title/miscellaneous/functions.html",[65,0.687,968,1.227]],["body/miscellaneous/functions.html",[9,0.263,21,0.484,25,0.562,33,0.035,44,1.853,52,0.033,53,0.033,60,0.825,65,1.09,85,1.269,89,1.145,120,1.676,142,0.825,144,1.553,148,1.718,149,1.404,152,1.904,157,3.037,158,3.037,159,3.037,160,3.625,161,1.718,163,2.273,165,3.538,167,1.103,170,3.037,175,3.538,216,3.538,231,3.037,246,3.625,317,1.404,690,2.664,692,2.516,697,3.179,809,2.823,817,2.664,948,4.222,968,2.117,970,3.037,974,4.297,975,4.297]],["title/index.html",[25,0.389,976,2.451]],["body/index.html",[0,1.553,33,0.035,52,0.035,53,0.035,142,0.913,150,0.03,976,3.913,977,4.754,978,4.754,979,4.754]],["title/modules.html",[980,3.339]],["body/modules.html",[33,0.035,52,0.035,53,0.035,980,3.965]],["title/miscellaneous/typealiases.html",[968,1.227,981,3.579]],["body/miscellaneous/typealiases.html",[1,2.585,5,2.655,6,3.41,9,0.252,10,2.325,12,2.5,14,3.105,21,0.647,22,1.104,23,2.585,25,0.508,32,0.583,33,0.031,34,0.932,51,3.199,52,0.031,53,0.031,54,3.41,56,2.098,60,0.746,62,1.147,65,1.104,82,3.41,83,2.99,84,2.747,85,1.666,87,2.888,101,2.888,103,3.708,104,3.708,109,3.708,111,3.199,114,3.708,115,2.747,117,3.199,118,2.747,119,2.747,147,2.138,161,1.554,177,1.147,179,2.377,186,1.722,187,1.722,209,1.914,649,3.708,968,1.914,970,2.747,982,5.749,983,4.824]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":307,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["1.0",{"_index":611,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1",{"_index":612,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1.1.6",{"_index":967,"title":{},"body":{"dependencies.html":{}}}],["1.2",{"_index":587,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["1/1",{"_index":945,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":947,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":944,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":978,"title":{},"body":{"index.html":{}}}],["11/11",{"_index":952,"title":{},"body":{"coverage.html":{}}}],["15/15",{"_index":955,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":951,"title":{},"body":{"coverage.html":{}}}],["20/20",{"_index":962,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":311,"title":{},"body":{"classes/RxStomp.html":{}}}],["20000",{"_index":309,"title":{},"body":{"classes/RxStomp.html":{}}}],["3/3",{"_index":953,"title":{},"body":{"coverage.html":{}}}],["33/33",{"_index":957,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":960,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":979,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":954,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":946,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":977,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":961,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":950,"title":{},"body":{"coverage.html":{}}}],["87",{"_index":949,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":355,"title":{},"body":{"classes/RxStomp.html":{}}}],["_beforeconnect",{"_index":439,"title":{},"body":{"classes/RxStomp.html":{}}}],["_changestate(st",{"_index":564,"title":{},"body":{"classes/RxStomp.html":{}}}],["_debug",{"_index":442,"title":{},"body":{"classes/RxStomp.html":{}}}],["_mapstompstate(st",{"_index":861,"title":{},"body":{"injectables/StompRService.html":{}}}],["_queuedmessag",{"_index":435,"title":{},"body":{"classes/RxStomp.html":{}}}],["_repliesobserv",{"_index":659,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_replyqueuenam",{"_index":653,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_sendqueuedmessag",{"_index":503,"title":{},"body":{"classes/RxStomp.html":{}}}],["_serverheadersbehavioursubject",{"_index":427,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupreplyqueu",{"_index":657,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["_setupunhandledmessag",{"_index":554,"title":{},"body":{"classes/RxStomp.html":{}}}],["_setupunhandledreceipt",{"_index":558,"title":{},"body":{"classes/RxStomp.html":{}}}],["_stompclient",{"_index":437,"title":{},"body":{"classes/RxStomp.html":{}}}],["abort",{"_index":133,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["accept",{"_index":796,"title":{},"body":{"classes/StompHeaders.html":{}}}],["access",{"_index":19,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["accessor",{"_index":221,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ack",{"_index":63,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/StompRService.html":{}}}],["acknowledg",{"_index":68,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["act",{"_index":699,"title":{},"body":{"classes/Stomp.html":{}}}],["activ",{"_index":216,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/functions.html":{}}}],["activemq",{"_index":687,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["actual",{"_index":277,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["ad",{"_index":97,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["add",{"_index":296,"title":{},"body":{"classes/RxStomp.html":{}}}],["addit",{"_index":798,"title":{},"body":{"classes/StompHeaders.html":{}}}],["addition",{"_index":848,"title":{},"body":{"injectables/StompRService.html":{}}}],["advanc",{"_index":16,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/StompRService.html":{}}}],["alia",{"_index":51,"title":{},"body":{"interfaces/IFrame.html":{},"miscellaneous/typealiases.html":{}}}],["alias",{"_index":82,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["allow",{"_index":335,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["alreadi",{"_index":231,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["altern",{"_index":722,"title":{},"body":{"classes/Stomp.html":{}}}],["alway",{"_index":235,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["angular'",{"_index":173,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["angular/cor",{"_index":176,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular2",{"_index":648,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["angular7.html",{"_index":159,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["anoth",{"_index":739,"title":{},"body":{"classes/Stomp.html":{}}}],["any).assign",{"_index":467,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["app_initi",{"_index":174,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["application/octet",{"_index":365,"title":{},"body":{"classes/RxStomp.html":{}}}],["appropri",{"_index":324,"title":{},"body":{"classes/RxStomp.html":{}}}],["array",{"_index":433,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["articl",{"_index":548,"title":{},"body":{"classes/RxStomp.html":{}}}],["assign",{"_index":440,"title":{},"body":{"classes/RxStomp.html":{}}}],["associ",{"_index":912,"title":{},"body":{"classes/StompSubscription.html":{}}}],["asynchron",{"_index":397,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["attempt",{"_index":291,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["attribut",{"_index":567,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["auto",{"_index":322,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["automat",{"_index":345,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["avail",{"_index":797,"title":{},"body":{"classes/StompHeaders.html":{}}}],["backward",{"_index":117,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["base",{"_index":41,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["beat",{"_index":874,"title":{},"body":{"injectables/StompRService.html":{}}}],["beautifulli",{"_index":512,"title":{},"body":{"classes/RxStomp.html":{}}}],["befor",{"_index":438,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["beforeconnect",{"_index":202,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["behavior",{"_index":260,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject",{"_index":237,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["behaviorsubject(nul",{"_index":460,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(rxstompstate.clos",{"_index":449,"title":{},"body":{"classes/RxStomp.html":{}}}],["behaviorsubject(stompstate.clos",{"_index":898,"title":{},"body":{"injectables/StompRService.html":{}}}],["behavioursubject",{"_index":522,"title":{},"body":{"classes/RxStomp.html":{}}}],["better",{"_index":495,"title":{},"body":{"classes/RxStomp.html":{}}}],["binari",{"_index":40,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["binarybodi",{"_index":27,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["binarydata",{"_index":360,"title":{},"body":{"classes/RxStomp.html":{}}}],["bit",{"_index":492,"title":{},"body":{"classes/RxStomp.html":{}}}],["bodi",{"_index":28,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["body/binarybodi",{"_index":43,"title":{},"body":{"interfaces/IFrame.html":{}}}],["body]{@link",{"_index":76,"title":{},"body":{"interfaces/IMessage.html":{}}}],["boolean",{"_index":39,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["both",{"_index":390,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["box",{"_index":344,"title":{},"body":{"classes/RxStomp.html":{}}}],["break",{"_index":284,"title":{},"body":{"classes/RxStomp.html":{}}}],["broker",{"_index":15,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["brokerurl",{"_index":300,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["call",{"_index":69,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["call.html",{"_index":184,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["callabl",{"_index":727,"title":{},"body":{"classes/Stomp.html":{}}}],["callback",{"_index":12,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["callback]{@link",{"_index":73,"title":{},"body":{"interfaces/IMessage.html":{}}}],["caller",{"_index":523,"title":{},"body":{"classes/RxStomp.html":{}}}],["care",{"_index":411,"title":{},"body":{"classes/RxStomp.html":{}}}],["carri",{"_index":396,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["case",{"_index":338,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["caution",{"_index":347,"title":{},"body":{"classes/RxStomp.html":{}}}],["caveat",{"_index":132,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["chang",{"_index":572,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["check",{"_index":256,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["class",{"_index":150,"title":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["classes/frame.html",{"_index":430,"title":{},"body":{"classes/RxStomp.html":{}}}],["cleanup",{"_index":536,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["client",{"_index":190,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{}}}],["client#abort",{"_index":136,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#abort]{@link",{"_index":141,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#ack",{"_index":71,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#ack]{@link",{"_index":79,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#activ",{"_index":292,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#activate]{@link",{"_index":475,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#beforeconnect",{"_index":576,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#beforeconnect]{@link",{"_index":633,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#begin",{"_index":130,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#brokerurl",{"_index":583,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#brokerurl]{@link",{"_index":626,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#commit",{"_index":137,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#commit]{@link",{"_index":140,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["client#configur",{"_index":316,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#configure]{@link",{"_index":466,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#connecthead",{"_index":591,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#connectheaders]{@link",{"_index":630,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#deactiv",{"_index":328,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#deactivate]{@link",{"_index":488,"title":{},"body":{"classes/RxStomp.html":{}}}],["client#debug",{"_index":765,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#debug]{@link",{"_index":794,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#disconnecthead",{"_index":595,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#disconnectheaders]{@link",{"_index":631,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatincom",{"_index":768,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatincoming]{@client#heartbeatincom",{"_index":602,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#heartbeatincoming]{@link",{"_index":786,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#heartbeatoutgo",{"_index":605,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#heartbeatoutgoing]{@link",{"_index":629,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#lograwcommun",{"_index":770,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#lograwcommunication]{@link",{"_index":793,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#nack",{"_index":72,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#nack]{@link",{"_index":81,"title":{},"body":{"interfaces/IMessage.html":{}}}],["client#onconnect",{"_index":772,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onconnect]{@link",{"_index":789,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect",{"_index":774,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#ondisconnect]{@link",{"_index":790,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onstomperror",{"_index":263,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onstomperror]{@link",{"_index":432,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledfram",{"_index":777,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledframe]{@link",{"_index":787,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onunhandledmessag",{"_index":58,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledmessage]{@link",{"_index":74,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt",{"_index":281,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onunhandledreceipt]{@link",{"_index":431,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["client#onwebsocketclos",{"_index":779,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketclose]{@link",{"_index":791,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror",{"_index":781,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#onwebsocketerror]{@link",{"_index":792,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#publish",{"_index":86,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["client#publish]{@link",{"_index":116,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["client#reconnectdelay",{"_index":782,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#reconnectdelay]{@client#reconnectdelay",{"_index":608,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["client#reconnectdelay]{@link",{"_index":785,"title":{},"body":{"classes/StompConfig.html":{}}}],["client#stompvers",{"_index":615,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#stompversions]{@link",{"_index":627,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["client#subscrib",{"_index":61,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#subscribe]{@link",{"_index":78,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["client#unsubscrib",{"_index":914,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#unsubscribe]{@link",{"_index":915,"title":{},"body":{"classes/StompSubscription.html":{}}}],["client#watchforreceipt",{"_index":408,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#watchforreceipt]{@link",{"_index":562,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["client#websocketfactori",{"_index":623,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client#websocketfactory]{@link",{"_index":628,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{}}}],["client(url",{"_index":714,"title":{},"body":{"classes/Stomp.html":{}}}],["client._connect",{"_index":726,"title":{},"body":{"classes/Stomp.html":{}}}],["client.t",{"_index":959,"title":{},"body":{"coverage.html":{}}}],["client]{@link",{"_index":425,"title":{},"body":{"classes/RxStomp.html":{}}}],["close",{"_index":255,"title":{},"body":{"classes/RxStomp.html":{},"miscellaneous/enumerations.html":{}}}],["closeev",{"_index":111,"title":{},"body":{"interfaces/IPublishParams.html":{},"miscellaneous/typealiases.html":{}}}],["closeevent]{@link",{"_index":106,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["closeeventcallbacktyp",{"_index":109,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["closur",{"_index":531,"title":{},"body":{"classes/RxStomp.html":{}}}],["code",{"_index":384,"title":{},"body":{"classes/RxStomp.html":{}}}],["cold",{"_index":551,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobserv",{"_index":528,"title":{},"body":{"classes/RxStomp.html":{}}}],["coldobservable.pipe(shar",{"_index":553,"title":{},"body":{"classes/RxStomp.html":{}}}],["combin",{"_index":172,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["command",{"_index":29,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{}}}],["commit",{"_index":134,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["compat",{"_index":118,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["compatcli",{"_index":719,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["compatclient(wsfn",{"_index":751,"title":{},"body":{"classes/Stomp.html":{}}}],["complaint",{"_index":403,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["complet",{"_index":278,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["compliant",{"_index":254,"title":{},"body":{"classes/RxStomp.html":{}}}],["complic",{"_index":511,"title":{},"body":{"classes/RxStomp.html":{}}}],["compodoc/compodoc",{"_index":966,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":420,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["config(config",{"_index":869,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.debug",{"_index":881,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.head",{"_index":885,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_in",{"_index":876,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.heartbeat_out",{"_index":878,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.reconnect_delay",{"_index":880,"title":{},"body":{"injectables/StompRService.html":{}}}],["config.t",{"_index":147,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/StompConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.ts:102",{"_index":780,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:107",{"_index":571,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:112",{"_index":764,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:20",{"_index":685,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:21",{"_index":577,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:22",{"_index":762,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:24",{"_index":688,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["config.ts:27",{"_index":783,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:32",{"_index":784,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:34",{"_index":609,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:37",{"_index":592,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:42",{"_index":767,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:47",{"_index":769,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:52",{"_index":763,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:57",{"_index":766,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:60",{"_index":616,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:62",{"_index":778,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:67",{"_index":606,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.ts:72",{"_index":776,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:74",{"_index":596,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:77",{"_index":761,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:81",{"_index":603,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:82",{"_index":771,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:87",{"_index":773,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:90",{"_index":584,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["config.ts:92",{"_index":775,"title":{},"body":{"classes/StompConfig.html":{}}}],["config.ts:97",{"_index":594,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["config.url",{"_index":872,"title":{},"body":{"injectables/StompRService.html":{}}}],["configur",{"_index":163,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/functions.html":{}}}],["configure(rxstompconfig",{"_index":293,"title":{},"body":{"classes/RxStomp.html":{}}}],["connect",{"_index":191,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{}}}],["connecthead",{"_index":302,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["connectionst",{"_index":211,"title":{},"body":{"classes/RxStomp.html":{}}}],["connectobserv",{"_index":821,"title":{},"body":{"injectables/StompRService.html":{}}}],["consequ",{"_index":414,"title":{},"body":{"classes/RxStomp.html":{}}}],["console.log(new",{"_index":313,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["consolidated/.../i",{"_index":983,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/.../rx",{"_index":970,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/.../stomp",{"_index":972,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["consolidated/.../types.t",{"_index":982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["consolidated/ng2",{"_index":144,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["consolidated/rx",{"_index":186,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/client.t",{"_index":956,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/compat",{"_index":958,"title":{},"body":{"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.t",{"_index":698,"title":{},"body":{"classes/Stomp.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:32",{"_index":706,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:48",{"_index":715,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/compatibility/stomp.ts:92",{"_index":721,"title":{},"body":{"classes/Stomp.html":{}}}],["consolidated/stompjs/src/i",{"_index":5,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/stomp",{"_index":754,"title":{},"body":{"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/types.t",{"_index":84,"title":{},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["consolidated/stompjs/src/versions.t",{"_index":916,"title":{},"body":{"classes/Versions.html":{},"coverage.html":{}}}],["consolidated/stompjs/src/versions.ts:10",{"_index":928,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:14",{"_index":929,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:18",{"_index":930,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:23",{"_index":923,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:31",{"_index":931,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:37",{"_index":933,"title":{},"body":{"classes/Versions.html":{}}}],["consolidated/stompjs/src/versions.ts:44",{"_index":932,"title":{},"body":{"classes/Versions.html":{}}}],["const",{"_index":168,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["constructor",{"_index":223,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["constructor(config",{"_index":902,"title":{},"body":{"injectables/StompService.html":{}}}],["constructor(priv",{"_index":660,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["constructor(publ",{"_index":937,"title":{},"body":{"classes/Versions.html":{}}}],["constructor(rxstomp",{"_index":637,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["constructor(vers",{"_index":922,"title":{},"body":{"classes/Versions.html":{}}}],["contain",{"_index":799,"title":{},"body":{"classes/StompHeaders.html":{}}}],["content",{"_index":95,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["convert",{"_index":542,"title":{},"body":{"classes/RxStomp.html":{}}}],["correlationid",{"_index":673,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["correspond",{"_index":404,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["coverag",{"_index":941,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covert",{"_index":336,"title":{},"body":{"classes/RxStomp.html":{}}}],["cr",{"_index":800,"title":{},"body":{"classes/StompHeaders.html":{}}}],["creat",{"_index":44,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["current",{"_index":241,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["currentst",{"_index":453,"title":{},"body":{"classes/RxStomp.html":{}}}],["date",{"_index":314,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["deactiv",{"_index":217,"title":{},"body":{"classes/RxStomp.html":{}}}],["debug",{"_index":312,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["debugfntyp",{"_index":101,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["declar",{"_index":927,"title":{},"body":{"classes/Versions.html":{}}}],["default",{"_index":94,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["defaultmessagesobserv",{"_index":823,"title":{},"body":{"injectables/StompRService.html":{}}}],["defaultmessagessubscript",{"_index":672,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defaultmessagessubscription.unsubscrib",{"_index":682,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["defin",{"_index":167,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["delay",{"_index":607,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["delet",{"_index":469,"title":{},"body":{"classes/RxStomp.html":{}}}],["depend",{"_index":817,"title":{"dependencies.html":{}},"body":{"injectables/StompRService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["deprec",{"_index":700,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["descript",{"_index":7,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["design",{"_index":380,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["destin",{"_index":90,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["detail",{"_index":156,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompService.html":{}}}],["differ",{"_index":193,"title":{},"body":{"classes/RxStomp.html":{}}}],["directli",{"_index":412,"title":{},"body":{"classes/RxStomp.html":{}}}],["disabl",{"_index":601,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["disconnect",{"_index":289,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["disconnecthead",{"_index":568,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["document",{"_index":258,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"coverage.html":{}}}],["documentation/rpc",{"_index":651,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["drop",{"_index":373,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["dure",{"_index":376,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["e.g",{"_index":339,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["each",{"_index":249,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["earlier",{"_index":382,"title":{},"body":{"classes/RxStomp.html":{}}}],["element",{"_index":925,"title":{},"body":{"classes/Versions.html":{}}}],["emit",{"_index":240,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["enabl",{"_index":593,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["end",{"_index":92,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["endpoint",{"_index":198,"title":{},"body":{"classes/RxStomp.html":{}}}],["enumer",{"_index":969,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":709,"title":{},"body":{"classes/Stomp.html":{}}}],["error",{"_index":253,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["errorsubject",{"_index":825,"title":{},"body":{"injectables/StompRService.html":{}}}],["es6",{"_index":815,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["establish",{"_index":227,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["even",{"_index":372,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["event",{"_index":115,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["event]{@link",{"_index":112,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["evt",{"_index":110,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["exact",{"_index":259,"title":{},"body":{"classes/RxStomp.html":{}}}],["exactli",{"_index":153,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{}}}],["exampl",{"_index":62,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"miscellaneous/typealiases.html":{}}}],["except",{"_index":201,"title":{},"body":{"classes/RxStomp.html":{}}}],["exist",{"_index":297,"title":{},"body":{"classes/RxStomp.html":{}}}],["explanatori",{"_index":547,"title":{},"body":{"classes/RxStomp.html":{}}}],["explicitli",{"_index":834,"title":{},"body":{"injectables/StompRService.html":{}}}],["export",{"_index":49,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["expos",{"_index":194,"title":{},"body":{"classes/RxStomp.html":{}}}],["extend",{"_index":24,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["f8094ed53339",{"_index":552,"title":{},"body":{"classes/RxStomp.html":{}}}],["factori",{"_index":170,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/Stomp.html":{},"miscellaneous/functions.html":{}}}],["factory.t",{"_index":948,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["failur",{"_index":208,"title":{},"body":{"classes/RxStomp.html":{}}}],["fals",{"_index":319,"title":{},"body":{"classes/RxStomp.html":{}}}],["favor",{"_index":806,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":162,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["filter",{"_index":415,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["filter((currentst",{"_index":452,"title":{},"body":{"classes/RxStomp.html":{}}}],["filter((head",{"_index":463,"title":{},"body":{"classes/RxStomp.html":{}}}],["first",{"_index":647,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["fix",{"_index":164,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["follow",{"_index":389,"title":{},"body":{"classes/RxStomp.html":{}}}],["frame",{"_index":10,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["frame.t",{"_index":6,"title":{},"body":{"interfaces/IFrame.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["frame]{@link",{"_index":429,"title":{},"body":{"classes/RxStomp.html":{}}}],["framecallbacktyp",{"_index":104,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["frameimpl",{"_index":59,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#bodi",{"_index":77,"title":{},"body":{"interfaces/IMessage.html":{}}}],["frameimpl#head",{"_index":75,"title":{},"body":{"interfaces/IMessage.html":{}}}],["function",{"_index":65,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["further",{"_index":516,"title":{},"body":{"classes/RxStomp.html":{}}}],["generatebinarydata",{"_index":361,"title":{},"body":{"classes/RxStomp.html":{}}}],["get",{"_index":369,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["getclient",{"_index":858,"title":{},"body":{"injectables/StompRService.html":{}}}],["getconnectobserv",{"_index":843,"title":{},"body":{"injectables/StompRService.html":{}}}],["getdefaultmessagesobserv",{"_index":850,"title":{},"body":{"injectables/StompRService.html":{}}}],["geterrorsubject",{"_index":854,"title":{},"body":{"injectables/StompRService.html":{}}}],["getreceiptsobserv",{"_index":852,"title":{},"body":{"injectables/StompRService.html":{}}}],["getserverheadersobserv",{"_index":846,"title":{},"body":{"injectables/StompRService.html":{}}}],["getstompcli",{"_index":409,"title":{},"body":{"classes/RxStomp.html":{}}}],["good",{"_index":362,"title":{},"body":{"classes/RxStomp.html":{}}}],["guest",{"_index":304,"title":{},"body":{"classes/RxStomp.html":{}}}],["guid",{"_index":161,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["guide/ng2",{"_index":157,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["guide/rx",{"_index":181,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["guide](../addit",{"_index":650,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["hack",{"_index":738,"title":{},"body":{"classes/Stomp.html":{}}}],["handl",{"_index":207,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["handler",{"_index":478,"title":{},"body":{"classes/RxStomp.html":{}}}],["handshak",{"_index":610,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Versions.html":{}}}],["happen",{"_index":545,"title":{},"body":{"classes/RxStomp.html":{}}}],["header",{"_index":20,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["headers.ack",{"_index":527,"title":{},"body":{"classes/RxStomp.html":{}}}],["headers.t",{"_index":795,"title":{},"body":{"classes/StompHeaders.html":{},"coverage.html":{}}}],["headers.ts:10",{"_index":802,"title":{},"body":{"classes/StompHeaders.html":{}}}],["headers['correl",{"_index":680,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers['repli",{"_index":679,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["headers]{@link",{"_index":46,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{}}}],["heart",{"_index":873,"title":{},"body":{"injectables/StompRService.html":{}}}],["heartbeat",{"_index":598,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["heartbeatincom",{"_index":306,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["heartbeatoutgo",{"_index":308,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["hello",{"_index":356,"title":{},"body":{"classes/RxStomp.html":{}}}],["here",{"_index":383,"title":{},"body":{"classes/RxStomp.html":{}}}],["hold",{"_index":434,"title":{},"body":{"classes/RxStomp.html":{}}}],["host",{"_index":585,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["hot",{"_index":543,"title":{},"body":{"classes/RxStomp.html":{}}}],["html5",{"_index":724,"title":{},"body":{"classes/Stomp.html":{}}}],["https://developer.mozilla.org/en",{"_index":107,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["https://github.com/stomp",{"_index":423,"title":{},"body":{"classes/RxStomp.html":{}}}],["https://medium.com/@benlesh/hot",{"_index":549,"title":{},"body":{"classes/RxStomp.html":{}}}],["id",{"_index":135,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["identifi",{"_index":942,"title":{},"body":{"coverage.html":{}}}],["ifram",{"_index":1,"title":{"interfaces/IFrame.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["iframe#head",{"_index":47,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["ignor",{"_index":234,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["imessag",{"_index":23,"title":{"interfaces/IMessage.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["immedi",{"_index":232,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["impact",{"_index":573,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["implement",{"_index":520,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["import",{"_index":45,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{}}}],["incom",{"_index":597,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["inde",{"_index":513,"title":{},"body":{"classes/RxStomp.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":346,"title":{},"body":{"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["initandconnect",{"_index":819,"title":{},"body":{"injectables/StompRService.html":{}}}],["initi",{"_index":283,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["inject",{"_index":142,"title":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["injectablerxstompconfig",{"_index":143,"title":{"injectables/InjectableRxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"coverage.html":{}}}],["injectablerxstomprpcconfig",{"_index":178,"title":{"injectables/InjectableRxStompRpcConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["instanc",{"_index":55,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["instead",{"_index":745,"title":{},"body":{"classes/Stomp.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"coverage.html":{},"index.html":{}}}],["intern",{"_index":122,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/Versions.html":{}}}],["interv",{"_index":599,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["invok",{"_index":270,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["ipublishparam",{"_index":83,"title":{"interfaces/IPublishParams.html":{}},"body":{"interfaces/IPublishParams.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["irawframetyp",{"_index":121,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["isbinarybodi",{"_index":30,"title":{},"body":{"interfaces/IFrame.html":{}}}],["issu",{"_index":377,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["itransact",{"_index":127,"title":{"interfaces/ITransaction.html":{}},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["javascript",{"_index":465,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["js/stompj",{"_index":424,"title":{},"body":{"classes/RxStomp.html":{}}}],["json",{"_index":340,"title":{},"body":{"classes/RxStomp.html":{}}}],["keep",{"_index":287,"title":{},"body":{"classes/RxStomp.html":{}}}],["key",{"_index":36,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{}}}],["klass",{"_index":749,"title":{},"body":{"classes/Stomp.html":{}}}],["klass(url",{"_index":750,"title":{},"body":{"classes/Stomp.html":{}}}],["know",{"_index":665,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["known",{"_index":165,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["later",{"_index":169,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["leav",{"_index":836,"title":{},"body":{"injectables/StompRService.html":{}}}],["left",{"_index":537,"title":{},"body":{"classes/RxStomp.html":{}}}],["length",{"_index":96,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["level",{"_index":496,"title":{},"body":{"classes/RxStomp.html":{}}}],["lf",{"_index":801,"title":{},"body":{"classes/StompHeaders.html":{}}}],["librari",{"_index":378,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["line:vari",{"_index":737,"title":{},"body":{"classes/Stomp.html":{}}}],["link",{"_index":48,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["list",{"_index":811,"title":{},"body":{"injectables/StompRService.html":{}}}],["local",{"_index":366,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["locat",{"_index":716,"title":{},"body":{"classes/Stomp.html":{}}}],["logic",{"_index":510,"title":{},"body":{"classes/RxStomp.html":{}}}],["login",{"_index":303,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["lograwcommun",{"_index":755,"title":{},"body":{"classes/StompConfig.html":{}}}],["long",{"_index":546,"title":{},"body":{"classes/RxStomp.html":{}}}],["loop",{"_index":323,"title":{},"body":{"classes/RxStomp.html":{}}}],["magic",{"_index":532,"title":{},"body":{"classes/RxStomp.html":{}}}],["main",{"_index":189,"title":{},"body":{"classes/RxStomp.html":{}}}],["major",{"_index":702,"title":{},"body":{"classes/Stomp.html":{}}}],["make",{"_index":643,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["mandatori",{"_index":357,"title":{},"body":{"classes/RxStomp.html":{}}}],["mani",{"_index":11,"title":{},"body":{"interfaces/IFrame.html":{},"classes/StompHeaders.html":{}}}],["manual",{"_index":67,"title":{},"body":{"interfaces/IMessage.html":{},"injectables/StompService.html":{}}}],["map",{"_index":262,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["mark",{"_index":589,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["match",{"_index":53,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["mean",{"_index":391,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mechan",{"_index":175,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"miscellaneous/functions.html":{}}}],["messag",{"_index":56,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/typealiases.html":{}}}],["message(",{"_index":507,"title":{},"body":{"classes/RxStomp.html":{}}}],["message.headers['correl",{"_index":676,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["message.t",{"_index":54,"title":{},"body":{"interfaces/IMessage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["messagecallbacktyp",{"_index":103,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["messages.next(messag",{"_index":535,"title":{},"body":{"classes/RxStomp.html":{}}}],["method",{"_index":70,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["millisecond",{"_index":600,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["miscellan",{"_index":968,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["miss",{"_index":351,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["modul",{"_index":980,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":728,"title":{},"body":{"classes/Stomp.html":{}}}],["mozwebsocket",{"_index":741,"title":{},"body":{"classes/Stomp.html":{}}}],["msg",{"_index":102,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["mssage",{"_index":837,"title":{},"body":{"injectables/StompRService.html":{}}}],["multipl",{"_index":295,"title":{},"body":{"classes/RxStomp.html":{}}}],["nack",{"_index":64,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{}}}],["name",{"_index":317,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":18,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["new",{"_index":298,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["next",{"_index":515,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["nodej",{"_index":708,"title":{},"body":{"classes/Stomp.html":{}}}],["non",{"_index":707,"title":{},"body":{"classes/Stomp.html":{}}}],["noop",{"_index":445,"title":{},"body":{"classes/RxStomp.html":{}}}],["note",{"_index":375,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["notifi",{"_index":276,"title":{},"body":{"classes/RxStomp.html":{}}}],["null",{"_index":349,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["number",{"_index":402,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["object",{"_index":261,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{}}}],["observ",{"_index":197,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["observable.cr",{"_index":529,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{}}}],["observables/subjects/behaviorsubject",{"_index":204,"title":{},"body":{"classes/RxStomp.html":{}}}],["occasion",{"_index":171,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{}}}],["occur",{"_index":230,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["octet(",{"_index":350,"title":{},"body":{"classes/RxStomp.html":{}}}],["on",{"_index":581,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{}}}],["onc",{"_index":729,"title":{},"body":{"classes/Stomp.html":{}}}],["onconnect",{"_index":479,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["ondisconnect",{"_index":756,"title":{},"body":{"classes/StompConfig.html":{}}}],["onstomperror",{"_index":482,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onunhandledfram",{"_index":757,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledmessag",{"_index":758,"title":{},"body":{"classes/StompConfig.html":{}}}],["onunhandledreceipt",{"_index":759,"title":{},"body":{"classes/StompConfig.html":{}}}],["onwebsocketclos",{"_index":484,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{}}}],["onwebsocketerror",{"_index":760,"title":{},"body":{"classes/StompConfig.html":{}}}],["op",{"_index":441,"title":{},"body":{"classes/RxStomp.html":{}}}],["open",{"_index":973,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["oper",{"_index":195,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["option",{"_index":89,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["order",{"_index":725,"title":{},"body":{"classes/Stomp.html":{}}}],["otherwis",{"_index":320,"title":{},"body":{"classes/RxStomp.html":{}}}],["out",{"_index":343,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["outgo",{"_index":604,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["over",{"_index":705,"title":{},"body":{"classes/Stomp.html":{}}}],["over(w",{"_index":720,"title":{},"body":{"classes/Stomp.html":{}}}],["overrid",{"_index":926,"title":{},"body":{"classes/Versions.html":{}}}],["overview",{"_index":976,"title":{"index.html":{}},"body":{"index.html":{}}}],["packag",{"_index":965,"title":{"dependencies.html":{}},"body":{}}],["pair",{"_index":38,"title":{},"body":{"interfaces/IFrame.html":{}}}],["param",{"_index":644,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["paramet",{"_index":85,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["params.head",{"_index":667,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["parser",{"_index":124,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["part",{"_index":21,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["pass",{"_index":13,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{}}}],["passcod",{"_index":305,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["payload",{"_index":337,"title":{},"body":{"classes/RxStomp.html":{}}}],["per",{"_index":285,"title":{},"body":{"classes/RxStomp.html":{}}}],["pleas",{"_index":155,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["point",{"_index":93,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["possibl",{"_index":740,"title":{},"body":{"classes/Stomp.html":{},"miscellaneous/enumerations.html":{}}}],["practic",{"_index":363,"title":{},"body":{"classes/RxStomp.html":{}}}],["prat",{"_index":209,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["prefer",{"_index":279,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["present",{"_index":590,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["prior",{"_index":742,"title":{},"body":{"classes/Stomp.html":{}}}],["prioriti",{"_index":354,"title":{},"body":{"classes/RxStomp.html":{}}}],["privat",{"_index":652,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["procedur",{"_index":183,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["process",{"_index":272,"title":{},"body":{"classes/RxStomp.html":{}}}],["properti",{"_index":26,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["protect",{"_index":426,"title":{},"body":{"classes/RxStomp.html":{}}}],["protocol",{"_index":332,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["protocolvers",{"_index":920,"title":{},"body":{"classes/Versions.html":{}}}],["provid",{"_index":246,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/functions.html":{}}}],["public",{"_index":210,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["publish",{"_index":218,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["publish(paramet",{"_index":329,"title":{},"body":{"classes/RxStomp.html":{}}}],["publish(queuenam",{"_index":829,"title":{},"body":{"injectables/StompRService.html":{}}}],["publishparam",{"_index":87,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["pubparam",{"_index":892,"title":{},"body":{"injectables/StompRService.html":{}}}],["queu",{"_index":367,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["queue",{"_index":269,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["queue/rpc",{"_index":655,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["queue/test",{"_index":353,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessag",{"_index":456,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuedmessages.length",{"_index":505,"title":{},"body":{"classes/RxStomp.html":{}}}],["queuenam",{"_index":831,"title":{},"body":{"injectables/StompRService.html":{}}}],["quit",{"_index":386,"title":{},"body":{"classes/RxStomp.html":{}}}],["r.servic",{"_index":906,"title":{},"body":{"injectables/StompService.html":{}}}],["r.service.t",{"_index":805,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{}}}],["r.service.ts:103",{"_index":857,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:132",{"_index":828,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:143",{"_index":827,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:157",{"_index":830,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:183",{"_index":833,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:215",{"_index":839,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:219",{"_index":859,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:221",{"_index":826,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:40",{"_index":842,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:63",{"_index":844,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:76",{"_index":847,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:83",{"_index":851,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:90",{"_index":853,"title":{},"body":{"injectables/StompRService.html":{}}}],["r.service.ts:98",{"_index":855,"title":{},"body":{"injectables/StompRService.html":{}}}],["rabbitmq",{"_index":267,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["random",{"_index":401,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["randomtext",{"_index":406,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["raw",{"_index":808,"title":{},"body":{"injectables/StompRService.html":{}}}],["rawheadertyp",{"_index":123,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["re",{"_index":517,"title":{},"body":{"classes/RxStomp.html":{}}}],["re)connect",{"_index":229,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reactiv",{"_index":326,"title":{},"body":{"classes/RxStomp.html":{}}}],["read",{"_index":385,"title":{},"body":{"classes/RxStomp.html":{}}}],["readm",{"_index":904,"title":{},"body":{"injectables/StompService.html":{}}}],["readonli",{"_index":50,"title":{},"body":{"interfaces/IFrame.html":{}}}],["receipt",{"_index":105,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptid",{"_index":405,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["receiptsobserv",{"_index":824,"title":{},"body":{"injectables/StompRService.html":{}}}],["receiv",{"_index":14,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/typealiases.html":{}}}],["recent",{"_index":247,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["reconnect",{"_index":250,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["reconnectdelay",{"_index":310,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["refer",{"_index":331,"title":{},"body":{"classes/RxStomp.html":{}}}],["relat",{"_index":203,"title":{},"body":{"classes/RxStomp.html":{}}}],["remain",{"_index":524,"title":{},"body":{"classes/RxStomp.html":{}}}],["remark",{"_index":746,"title":{},"body":{"classes/Stomp.html":{}}}],["remot",{"_index":636,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["remov",{"_index":701,"title":{},"body":{"classes/Stomp.html":{}}}],["repli",{"_index":656,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["replyqueuenam",{"_index":683,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["report",{"_index":348,"title":{},"body":{"classes/RxStomp.html":{}}}],["repres",{"_index":8,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["request",{"_index":273,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["require('../../esm5",{"_index":710,"title":{},"body":{"classes/Stomp.html":{}}}],["require('websocket').w3cwebsocket",{"_index":713,"title":{},"body":{"classes/Stomp.html":{}}}],["respons",{"_index":849,"title":{},"body":{"injectables/StompRService.html":{}}}],["resubscrib",{"_index":374,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["result",{"_index":52,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":199,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["rpc",{"_index":179,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["rpc(param",{"_index":641,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.service.t",{"_index":691,"title":{},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rpc.service.ts:15",{"_index":693,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["rpc.t",{"_index":635,"title":{},"body":{"classes/RxStompRPC.html":{},"coverage.html":{}}}],["rpc.ts:25",{"_index":639,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:44",{"_index":642,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpc.ts:52",{"_index":646,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserv",{"_index":671,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rpcobserver.next(messag",{"_index":678,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["rx",{"_index":146,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxj",{"_index":196,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/StompRService.html":{}}}],["rxjs/oper",{"_index":417,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["rxstomp",{"_index":185,"title":{"classes/RxStomp.html":{}},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["rxstomp#activ",{"_index":327,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#activate]{@link",{"_index":487,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#configur",{"_index":566,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#configure]{@link",{"_index":624,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#deactiv",{"_index":288,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{}}}],["rxstomp#deactivate]{@link",{"_index":474,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#decativ",{"_index":575,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#decativate]{@link",{"_index":632,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstomp#watchforreceipt",{"_index":280,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp#watchforreceipt]{@link",{"_index":428,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.activ",{"_index":315,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.configur",{"_index":299,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({\"/queue/test",{"_index":358,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstomp.publish({destin",{"_index":352,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstomp.waitforreceipt(receiptid",{"_index":840,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstomp.watchforreceipt(receiptid",{"_index":407,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig",{"_index":152,"title":{"classes/RxStompConfig.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompconfig#reconnectdelay",{"_index":286,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#reconnectdelay]{@link",{"_index":473,"title":{},"body":{"classes/RxStomp.html":{}}}],["rxstompconfig#websocketfactori",{"_index":582,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig#websocketfactory]{@link",{"_index":625,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.brokerurl",{"_index":871,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.connecthead",{"_index":884,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.debug",{"_index":882,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatincom",{"_index":875,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.heartbeatoutgo",{"_index":877,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.reconnectdelay",{"_index":879,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompconfig.stompvers",{"_index":613,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["rxstompconfig.websocketfactori",{"_index":620,"title":{},"body":{"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["rxstomprpc",{"_index":634,"title":{"classes/RxStompRPC.html":{}},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstomprpcconfig",{"_index":180,"title":{"classes/RxStompRPCConfig.html":{}},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{}}}],["rxstomprpcservic",{"_index":689,"title":{"injectables/RxStompRPCService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"coverage.html":{}}}],["rxstompservic",{"_index":692,"title":{"injectables/RxStompService.html":{}},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactori",{"_index":697,"title":{},"body":{"injectables/RxStompService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxstompservicefactory(rxstompconfig",{"_index":974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rxstompstat",{"_index":421,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["rxstompstate.clos",{"_index":864,"title":{},"body":{"injectables/StompRService.html":{}}}],["rxstompstate.connect",{"_index":497,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["rxstompstate.open",{"_index":454,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["safe",{"_index":233,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["same",{"_index":154,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompService.html":{},"classes/StompConfig.html":{}}}],["sampl",{"_index":905,"title":{},"body":{"injectables/StompService.html":{}}}],["see",{"_index":60,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["send",{"_index":138,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["sent",{"_index":266,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{}}}],["sequenc",{"_index":399,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["server",{"_index":248,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["serverhead",{"_index":212,"title":{},"body":{"classes/RxStomp.html":{}}}],["serverheadersobserv",{"_index":822,"title":{},"body":{"injectables/StompRService.html":{}}}],["servic",{"_index":809,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":98,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{}}}],["setconfig(config",{"_index":856,"title":{},"body":{"injectables/StompRService.html":{}}}],["setup",{"_index":455,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueu",{"_index":684,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["setupreplyqueuefntyp",{"_index":649,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"miscellaneous/typealiases.html":{}}}],["share",{"_index":416,"title":{},"body":{"classes/RxStomp.html":{}}}],["show",{"_index":243,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["similar",{"_index":618,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["simpl",{"_index":521,"title":{},"body":{"classes/RxStomp.html":{}}}],["simplest",{"_index":975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["situat",{"_index":494,"title":{},"body":{"classes/RxStomp.html":{}}}],["skip",{"_index":100,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["skipcontentlengthhead",{"_index":91,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["socket",{"_index":732,"title":{},"body":{"classes/Stomp.html":{}}}],["sockj",{"_index":619,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["sockjs(\"http://broker.329broker.com/stomp",{"_index":622,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["sometim",{"_index":341,"title":{},"body":{"classes/RxStomp.html":{}}}],["soon",{"_index":368,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{}}}],["special",{"_index":525,"title":{},"body":{"classes/RxStomp.html":{}}}],["specif",{"_index":257,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["specifi",{"_index":333,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["st",{"_index":862,"title":{},"body":{"injectables/StompRService.html":{}}}],["standard",{"_index":588,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["state",{"_index":239,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["state.t",{"_index":971,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statement",{"_index":943,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":703,"title":{},"body":{"classes/Stomp.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["statu",{"_index":242,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["step",{"_index":160,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stomp",{"_index":9,"title":{"classes/Stomp.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["stomp#client",{"_index":723,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp#client]{@link",{"_index":752,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client",{"_index":743,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.client(url",{"_index":718,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.config",{"_index":860,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.j",{"_index":813,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp.ov",{"_index":744,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.over(funct",{"_index":733,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp.servic",{"_index":694,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["stomp.service.t",{"_index":696,"title":{},"body":{"injectables/RxStompService.html":{},"coverage.html":{}}}],["stomp.t",{"_index":188,"title":{},"body":{"classes/RxStomp.html":{},"coverage.html":{}}}],["stomp.ts:102",{"_index":252,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:116",{"_index":410,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:129",{"_index":224,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:202",{"_index":294,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:226",{"_index":282,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:261",{"_index":321,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:280",{"_index":318,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:327",{"_index":330,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:369",{"_index":371,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:45",{"_index":238,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:478",{"_index":395,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:53",{"_index":225,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:60",{"_index":245,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:77",{"_index":264,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.ts:89",{"_index":275,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomp.websocketclass",{"_index":712,"title":{},"body":{"classes/Stomp.html":{}}}],["stomp/ng2",{"_index":148,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stomp/rx",{"_index":177,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/src/rx",{"_index":187,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stomp.j",{"_index":810,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stomp/stompj",{"_index":22,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["stomp/stompjs]{@link",{"_index":422,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompclient",{"_index":222,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig",{"_index":418,"title":{"classes/StompConfig.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompconfig.beforeconnect",{"_index":468,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconfig.debug",{"_index":472,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscript",{"_index":533,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompconnectedsubscription.unsubscrib",{"_index":539,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomperror",{"_index":213,"title":{},"body":{"classes/RxStomp.html":{}}}],["stomphead",{"_index":35,"title":{"classes/StompHeaders.html":{}},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompj",{"_index":149,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["stompjs.stomp",{"_index":711,"title":{},"body":{"classes/Stomp.html":{}}}],["stompjs/2018/10/12/remot",{"_index":182,"title":{},"body":{"injectables/InjectableRxStompRpcConfig.html":{},"injectables/RxStompRPCService.html":{}}}],["stompjs/2018/11/04/ng2",{"_index":158,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/RxStompService.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/inject",{"_index":145,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"coverage.html":{}}}],["stompjs/src/rx",{"_index":690,"title":{},"body":{"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["stompjs/src/stomp",{"_index":804,"title":{},"body":{"injectables/StompRService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["stompjs/src/stomp.service.t",{"_index":901,"title":{},"body":{"injectables/StompService.html":{},"coverage.html":{}}}],["stompjs/src/stomp.service.ts:25",{"_index":903,"title":{},"body":{"injectables/StompService.html":{}}}],["stompjs@8.x.x",{"_index":807,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"miscellaneous/enumerations.html":{}}}],["stomprpcconfig",{"_index":638,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{}}}],["stomprpcconfig.replyqueuenam",{"_index":661,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprpcconfig.setupreplyqueu",{"_index":663,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["stomprservic",{"_index":803,"title":{"injectables/StompRService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stomprservice._mapstompstate(st",{"_index":868,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompservic",{"_index":818,"title":{"injectables/StompService.html":{}},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{},"coverage.html":{}}}],["stompstat",{"_index":490,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{},"miscellaneous/enumerations.html":{}}}],["stompstate.clos",{"_index":866,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.connect",{"_index":845,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.disconnect",{"_index":865,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompstate.open",{"_index":236,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompstate.tri",{"_index":863,"title":{},"body":{"injectables/StompRService.html":{}}}],["stompsubscript",{"_index":419,"title":{"classes/StompSubscription.html":{}},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{},"coverage.html":{}}}],["stompsubscription.unsubscrib",{"_index":540,"title":{},"body":{"classes/RxStomp.html":{}}}],["stompvers",{"_index":569,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["stop",{"_index":290,"title":{},"body":{"classes/RxStomp.html":{}}}],["str",{"_index":883,"title":{},"body":{"injectables/StompRService.html":{}}}],["strang",{"_index":387,"title":{},"body":{"classes/RxStomp.html":{}}}],["stray",{"_index":271,"title":{},"body":{"classes/RxStomp.html":{}}}],["stream",{"_index":200,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["stream(param",{"_index":645,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["string",{"_index":34,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPCConfig.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"miscellaneous/typealiases.html":{}}}],["string|publishparam",{"_index":889,"title":{},"body":{"injectables/StompRService.html":{}}}],["structur",{"_index":126,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["subject",{"_index":251,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["subscrib",{"_index":66,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["subscribe((messag",{"_index":677,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["subscribe(queuenam",{"_index":832,"title":{},"body":{"injectables/StompRService.html":{}}}],["subscript",{"_index":57,"title":{},"body":{"interfaces/IMessage.html":{},"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["subscription.t",{"_index":910,"title":{},"body":{"classes/StompSubscription.html":{},"coverage.html":{}}}],["subscription.ts:12",{"_index":911,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subscription.ts:17",{"_index":913,"title":{},"body":{"classes/StompSubscription.html":{}}}],["subset",{"_index":470,"title":{},"body":{"classes/RxStomp.html":{}}}],["successfulli",{"_index":519,"title":{},"body":{"classes/RxStomp.html":{}}}],["suggest",{"_index":334,"title":{},"body":{"classes/RxStomp.html":{}}}],["suitabl",{"_index":686,"title":{},"body":{"classes/RxStompRPCConfig.html":{}}}],["super",{"_index":896,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["super(rxstomp",{"_index":695,"title":{},"body":{"injectables/RxStompRPCService.html":{}}}],["super.publish(pubparam",{"_index":893,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.publish({destin",{"_index":891,"title":{},"body":{"injectables/StompRService.html":{}}}],["super.watchforreceipt(receiptid",{"_index":895,"title":{},"body":{"injectables/StompRService.html":{}}}],["support",{"_index":342,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["supportedvers",{"_index":921,"title":{},"body":{"classes/Versions.html":{}}}],["switch",{"_index":119,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/Stomp.html":{},"miscellaneous/typealiases.html":{}}}],["tabl",{"_index":964,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":963,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":924,"title":{},"body":{"classes/Versions.html":{}}}],["tcp",{"_index":731,"title":{},"body":{"classes/Stomp.html":{}}}],["temp",{"_index":654,"title":{},"body":{"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{}}}],["temporari",{"_index":268,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["test.destin",{"_index":841,"title":{},"body":{"injectables/StompRService.html":{}}}],["thing",{"_index":393,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._beforeconnect",{"_index":446,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.clos",{"_index":485,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.connect",{"_index":477,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._changestate(rxstompstate.open",{"_index":481,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug",{"_index":447,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`attempt",{"_index":508,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`not",{"_index":501,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`request",{"_index":526,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stomp",{"_index":541,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`stop",{"_index":538,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._debug(`wil",{"_index":506,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessag",{"_index":504,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._queuedmessages.push(paramet",{"_index":502,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._repliesobserv",{"_index":668,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._repliesobservable.pipe(filter((messag",{"_index":675,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._replyqueuenam",{"_index":662,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._sendqueuedmessag",{"_index":458,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject",{"_index":459,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.next(frame.head",{"_index":480,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._serverheadersbehavioursubject$.pip",{"_index":462,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupreplyqueu",{"_index":664,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupreplyqueue(this._replyqueuenam",{"_index":669,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this._setupunhandledmessag",{"_index":443,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._setupunhandledreceipt",{"_index":444,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompcli",{"_index":436,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this._stompclient.activ",{"_index":486,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configur",{"_index":476,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.configure(stompconfig",{"_index":471,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.deactiv",{"_index":489,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledmessag",{"_index":556,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.onunhandledreceipt",{"_index":560,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.publish(paramet",{"_index":500,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.subscribe(destin",{"_index":534,"title":{},"body":{"classes/RxStomp.html":{}}}],["this._stompclient.watchforreceipt(receiptid",{"_index":563,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.activ",{"_index":888,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.config",{"_index":908,"title":{},"body":{"injectables/StompService.html":{}}}],["this.configure(rxstompconfig",{"_index":886,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connect",{"_index":450,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connected$.pipe(map((st",{"_index":867,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.connected$.subscrib",{"_index":457,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionst",{"_index":448,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.getvalu",{"_index":491,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.next(st",{"_index":565,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.pip",{"_index":451,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.connectionstate$.subscribe((st",{"_index":899,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.deactiv",{"_index":887,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.initandconnect",{"_index":909,"title":{},"body":{"injectables/StompService.html":{}}}],["this.publish(queuedmessag",{"_index":509,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.rxstomp",{"_index":670,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.publish({destin",{"_index":681,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.rxstomp.unhandledmessag",{"_index":658,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.serverhead",{"_index":461,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.stat",{"_index":897,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.state.next(stomprservice._mapstompstate(st",{"_index":900,"title":{},"body":{"injectables/StompRService.html":{}}}],["this.stomperror",{"_index":464,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.stomperrors$.next(fram",{"_index":483,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.stream(params).pipe(first",{"_index":666,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["this.unhandledmessag",{"_index":555,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledmessage$.next(messag",{"_index":557,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.unhandledreceipt",{"_index":559,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["this.unhandledreceipts$.next(fram",{"_index":561,"title":{},"body":{"classes/RxStomp.html":{}}}],["this.versions.join",{"_index":938,"title":{},"body":{"classes/Versions.html":{}}}],["this.versions.map((x",{"_index":939,"title":{},"body":{"classes/Versions.html":{}}}],["this.watch(queuenam",{"_index":894,"title":{},"body":{"injectables/StompRService.html":{}}}],["though",{"_index":586,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["time",{"_index":228,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["todo",{"_index":131,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["topic/speci",{"_index":364,"title":{},"body":{"classes/RxStomp.html":{}}}],["transact",{"_index":129,"title":{},"body":{"interfaces/ITransaction.html":{}}}],["transaction.t",{"_index":128,"title":{},"body":{"interfaces/ITransaction.html":{},"coverage.html":{}}}],["transpar",{"_index":206,"title":{},"body":{"classes/RxStomp.html":{}}}],["transport",{"_index":730,"title":{},"body":{"classes/Stomp.html":{}}}],["tri",{"_index":205,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"miscellaneous/enumerations.html":{}}}],["tricki",{"_index":493,"title":{},"body":{"classes/RxStomp.html":{}}}],["trigger",{"_index":226,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["true",{"_index":99,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["tslint:dis",{"_index":736,"title":{},"body":{"classes/Stomp.html":{}}}],["twice",{"_index":544,"title":{},"body":{"classes/RxStomp.html":{}}}],["two",{"_index":388,"title":{},"body":{"classes/RxStomp.html":{}}}],["type",{"_index":32,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/RxStompRPCConfig.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/StompSubscription.html":{},"classes/Versions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":981,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":890,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(config.url",{"_index":870,"title":{},"body":{"injectables/StompRService.html":{}}}],["typeof(w",{"_index":753,"title":{},"body":{"classes/Stomp.html":{}}}],["typic",{"_index":166,"title":{},"body":{"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/Versions.html":{}}}],["uint8array",{"_index":31,"title":{},"body":{"interfaces/IFrame.html":{},"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["uint8array](https://developer.mozilla.org/en",{"_index":498,"title":{},"body":{"classes/RxStomp.html":{}}}],["underli",{"_index":325,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["understand",{"_index":835,"title":{},"body":{"injectables/StompRService.html":{}}}],["unhandl",{"_index":265,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledmessag",{"_index":214,"title":{},"body":{"classes/RxStomp.html":{}}}],["unhandledreceipt",{"_index":215,"title":{},"body":{"classes/RxStomp.html":{}}}],["unintend",{"_index":413,"title":{},"body":{"classes/RxStomp.html":{}}}],["uniqu",{"_index":398,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["unless",{"_index":812,"title":{},"body":{"injectables/StompRService.html":{}}}],["unsubscrib",{"_index":274,"title":{},"body":{"classes/RxStomp.html":{},"classes/StompSubscription.html":{}}}],["url",{"_index":578,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{}}}],["us",{"_index":120,"title":{},"body":{"interfaces/IPublishParams.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"classes/RxStompRPC.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{},"miscellaneous/functions.html":{}}}],["us/docs/web/api/closeev",{"_index":108,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/api/ev",{"_index":113,"title":{},"body":{"interfaces/IPublishParams.html":{}}}],["us/docs/web/javascript/reference/global_objects/uint8array",{"_index":499,"title":{},"body":{"classes/RxStomp.html":{}}}],["usag",{"_index":17,"title":{},"body":{"interfaces/IFrame.html":{},"classes/RxStompConfig.html":{}}}],["user",{"_index":244,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["uuid",{"_index":400,"title":{},"body":{"classes/RxStomp.html":{},"classes/RxStompRPC.html":{},"injectables/StompRService.html":{}}}],["uuid.uuid",{"_index":674,"title":{},"body":{"classes/RxStompRPC.html":{}}}],["v${x.replac",{"_index":940,"title":{},"body":{"classes/Versions.html":{}}}],["v1_0",{"_index":917,"title":{},"body":{"classes/Versions.html":{}}}],["v1_1",{"_index":918,"title":{},"body":{"classes/Versions.html":{}}}],["v1_2",{"_index":919,"title":{},"body":{"classes/Versions.html":{}}}],["valid",{"_index":574,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompHeaders.html":{}}}],["valu",{"_index":37,"title":{},"body":{"interfaces/IFrame.html":{},"injectables/InjectableRxStompConfig.html":{},"classes/RxStomp.html":{},"classes/Stomp.html":{},"classes/StompHeaders.html":{},"injectables/StompRService.html":{},"injectables/StompService.html":{},"classes/Versions.html":{}}}],["var",{"_index":359,"title":{},"body":{"classes/RxStomp.html":{},"classes/Stomp.html":{}}}],["variabl",{"_index":530,"title":{},"body":{"classes/RxStomp.html":{}}}],["veri",{"_index":392,"title":{},"body":{"classes/RxStomp.html":{}}}],["version",{"_index":151,"title":{"classes/Versions.html":{}},"body":{"injectables/InjectableRxStompConfig.html":{},"injectables/InjectableRxStompRpcConfig.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/RxStompRPCService.html":{},"injectables/RxStompService.html":{},"classes/Stomp.html":{},"classes/StompConfig.html":{},"classes/Versions.html":{},"coverage.html":{}}}],["versions(['1.0",{"_index":614,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["versions([versions.v1_0",{"_index":934,"title":{},"body":{"classes/Versions.html":{}}}],["versions.default.protocolvers",{"_index":747,"title":{},"body":{"classes/Stomp.html":{}}}],["versions.v1_1",{"_index":935,"title":{},"body":{"classes/Versions.html":{}}}],["versions.v1_2",{"_index":936,"title":{},"body":{"classes/Versions.html":{}}}],["via",{"_index":814,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["void",{"_index":80,"title":{},"body":{"interfaces/IMessage.html":{},"interfaces/IPublishParams.html":{},"interfaces/ITransaction.html":{},"classes/RxStomp.html":{},"classes/RxStompConfig.html":{},"injectables/StompRService.html":{},"classes/StompSubscription.html":{}}}],["void|promis",{"_index":788,"title":{},"body":{"classes/StompConfig.html":{}}}],["vs",{"_index":550,"title":{},"body":{"classes/RxStomp.html":{}}}],["waitforreceipt",{"_index":820,"title":{},"body":{"injectables/StompRService.html":{}}}],["waitforreceipt(receiptid",{"_index":838,"title":{},"body":{"injectables/StompRService.html":{}}}],["want",{"_index":907,"title":{},"body":{"injectables/StompService.html":{},"classes/Versions.html":{}}}],["watch",{"_index":219,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["watch(destin",{"_index":370,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt",{"_index":220,"title":{},"body":{"classes/RxStomp.html":{}}}],["watchforreceipt(receiptid",{"_index":394,"title":{},"body":{"classes/RxStomp.html":{}}}],["way",{"_index":379,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["websocket",{"_index":617,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/Stomp.html":{},"classes/Versions.html":{}}}],["websocket(\"wss://broker.329broker.com:15674/w",{"_index":621,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["websocket('ws://localhost:15674/w",{"_index":734,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketclass",{"_index":704,"title":{},"body":{"classes/Stomp.html":{}}}],["websocketfactori",{"_index":570,"title":{},"body":{"classes/RxStompConfig.html":{},"classes/StompConfig.html":{}}}],["well",{"_index":88,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}],["whenev",{"_index":518,"title":{},"body":{"classes/RxStomp.html":{}}}],["whether",{"_index":42,"title":{},"body":{"interfaces/IFrame.html":{}}}],["wire",{"_index":816,"title":{},"body":{"injectables/StompRService.html":{},"injectables/StompService.html":{}}}],["within",{"_index":139,"title":{},"body":{"interfaces/ITransaction.html":{},"classes/Stomp.html":{}}}],["wonder",{"_index":514,"title":{},"body":{"classes/RxStomp.html":{}}}],["work",{"_index":381,"title":{},"body":{"classes/RxStomp.html":{},"injectables/StompRService.html":{}}}],["wrap",{"_index":192,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws",{"_index":735,"title":{},"body":{"classes/Stomp.html":{}}}],["ws://127.0.0.1:15674/w",{"_index":301,"title":{},"body":{"classes/RxStomp.html":{}}}],["ws://broker.329broker.com:15674/w",{"_index":579,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ws://localhost:61614/stomp",{"_index":717,"title":{},"body":{"classes/Stomp.html":{}}}],["wserrorcallbacktyp",{"_index":114,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/StompConfig.html":{},"miscellaneous/typealiases.html":{}}}],["wsfn",{"_index":748,"title":{},"body":{"classes/Stomp.html":{}}}],["wss://broker.329broker.com:15674/w",{"_index":580,"title":{},"body":{"classes/RxStompConfig.html":{}}}],["ye",{"_index":640,"title":{},"body":{"classes/RxStompRPC.html":{},"injectables/RxStompRPCService.html":{},"classes/Stomp.html":{},"injectables/StompRService.html":{}}}],["yield",{"_index":125,"title":{},"body":{"interfaces/IPublishParams.html":{},"classes/RxStomp.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/IFrame.html":{"url":"interfaces/IFrame.html","title":"interface - IFrame","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IFrame\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-frame.ts\n        \n\n            \n                Description\n            \n            \n                It represents a STOMP frame. Many of the callbacks pass an IFrame received from\nthe STOMP broker. For advanced usage you might need to access headers.\nPart of @stomp/stompjs.\nIMessage is an extended IFrame.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        binaryBody\n                                \n                                \n                                        body\n                                \n                                \n                                        command\n                                \n                                \n                                        headers\n                                \n                                \n                                        isBinaryBody\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body as Uint8Array\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    body of the frame as string\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        command\n                                    \n                                \n                                \n                                    \n                                        command:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    STOMP Command\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Headers, key value pairs.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isBinaryBody\n                                    \n                                \n                                \n                                    \n                                        isBinaryBody:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * It represents a STOMP frame. Many of the callbacks pass an IFrame received from\n * the STOMP broker. For advanced usage you might need to access [headers]{@link IFrame#headers}.\n *\n * Part of `@stomp/stompjs`.\n *\n * {@link IMessage} is an extended IFrame.\n */\nexport interface IFrame {\n  /**\n   * STOMP Command\n   */\n  command: string;\n\n  /**\n   * Headers, key value pairs.\n   */\n  headers: StompHeaders;\n\n  /**\n   * Is this frame binary (based on whether body/binaryBody was passed when creating this frame).\n   */\n  isBinaryBody: boolean;\n\n  /**\n   * body of the frame as string\n   */\n  readonly body: string;\n\n  /**\n   * body as Uint8Array\n   */\n  readonly binaryBody: Uint8Array;\n}\n\n/**\n * Alias for {@link IFrame}\n */\nexport type Frame = IFrame;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IMessage.html":{"url":"interfaces/IMessage.html","title":"interface - IMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-message.ts\n        \n\n            \n                Description\n            \n            \n                Instance of Message will be passed to subscription callback\nand Client#onUnhandledMessage.\nSince it is an extended FrameImpl, you can access headers\nand body as properties.\nPart of @stomp/stompjs.\nSee Client#subscribe for example.\n\n            \n\n            \n                Extends\n            \n            \n                    IFrame\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        ack\n                                \n                                \n                                        nack\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ack\n                                    \n                                \n                                \n                                    \n                                        ack:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to ACK the message.\nSee Client#ack for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nack\n                                    \n                                \n                                \n                                    \n                                        nack:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    When subscribing with manual acknowledgement, call this method on the message to NACK the message.\nSee Client#nack for an example.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IFrame} from './i-frame';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * Instance of Message will be passed to [subscription callback]{@link Client#subscribe}\n * and [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n * Since it is an extended {@link FrameImpl}, you can access [headers]{@link FrameImpl#headers}\n * and [body]{@link FrameImpl#body} as properties.\n *\n * Part of `@stomp/stompjs`.\n *\n * See [Client#subscribe]{@link Client#subscribe} for example.\n */\nexport interface IMessage extends IFrame {\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to ACK the message.\n   *\n   * See [Client#ack]{@link Client#ack} for an example.\n   */\n  ack: (headers?: StompHeaders) => void;\n\n  /**\n   * When subscribing with manual acknowledgement, call this method on the message to NACK the message.\n   *\n   * See [Client#nack]{@link Client#nack} for an example.\n   */\n  nack: (headers?: StompHeaders) => void;\n}\n\n/**\n * Aliased to {@link IMessage}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type Message = IMessage;\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPublishParams.html":{"url":"interfaces/IPublishParams.html","title":"interface - IPublishParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPublishParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/types.ts\n        \n\n            \n                Description\n            \n            \n                Parameters for Client#publish.\nAliased as publishParams as well.\nPart of @stomp/stompjs.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        binaryBody\n                                \n                                \n                                            Optional\n                                        body\n                                \n                                \n                                        destination\n                                \n                                \n                                            Optional\n                                        headers\n                                \n                                \n                                            Optional\n                                        skipContentLengthHeader\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        binaryBody\n                                    \n                                \n                                \n                                    \n                                        binaryBody:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    binary body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        body\n                                    \n                                \n                                \n                                    \n                                        body:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    body (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        destination\n                                    \n                                \n                                \n                                    \n                                        destination:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    destination end point\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        headers\n                                    \n                                \n                                \n                                    \n                                        headers:     StompHeaders\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     StompHeaders\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    headers (optional)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipContentLengthHeader\n                                    \n                                \n                                \n                                    \n                                        skipContentLengthHeader:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    By default a content-length header will be added in the Frame to the broker.\nSet it to true for the header to be skipped.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import {IFrame} from './i-frame';\nimport {IMessage} from './i-message';\nimport {StompHeaders} from './stomp-headers';\n\n/**\n * This callback will receive a `string` as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type debugFnType = (msg: string) => void;\n\n/**\n * This callback will receive a {@link IMessage} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type messageCallbackType = (message: IMessage) => void;\n\n/**\n * This callback will receive a {@link IFrame} as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type frameCallbackType = (receipt: IFrame) => void;\n\n/**\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type closeEventCallbackType = (evt: CloseEvent) => void;\n\n/**\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\n * as parameter.\n *\n * Part of `@stomp/stompjs`.\n */\nexport type wsErrorCallbackType = (evt: Event) => void;\n\n/**\n * Parameters for [Client#publish]{@link Client#publish}.\n * Aliased as publishParams as well.\n *\n * Part of `@stomp/stompjs`.\n */\nexport interface IPublishParams {\n  /**\n   * destination end point\n   */\n  destination: string;\n  /**\n   * headers (optional)\n   */\n  headers?: StompHeaders;\n  /**\n   * body (optional)\n   */\n  body?: string;\n  /**\n   * binary body (optional)\n   */\n  binaryBody?: Uint8Array;\n  /**\n   * By default a `content-length` header will be added in the Frame to the broker.\n   * Set it to `true` for the header to be skipped.\n   */\n  skipContentLengthHeader?: boolean;\n}\n\n/**\n * Backward compatibility, switch to {@link IPublishParams}.\n */\nexport type publishParams = IPublishParams;\n\n/**\n * Used in {@link IRawFrameType}\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport type RawHeaderType = [string, string];\n\n/**\n * The parser yield frames in this structure\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport interface IRawFrameType { command: string; headers: RawHeaderType[]; binaryBody: Uint8Array; }\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ITransaction.html":{"url":"interfaces/ITransaction.html","title":"interface - ITransaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ITransaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/i-transaction.ts\n        \n\n            \n                Description\n            \n            \n                A Transaction is created by calling Client#begin\nPart of @stomp/stompjs.\nTODO: Example and caveat\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        abort\n                                \n                                \n                                        commit\n                                \n                                \n                                        id\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        abort\n                                    \n                                \n                                \n                                    \n                                        abort:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Abort this transaction. See Client#abort for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        commit\n                                    \n                                \n                                \n                                    \n                                        commit:     function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     function\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Commit this transaction. See Client#commit for an example.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                    \n                                \n                                \n                                    \n                                        id:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    You will need to access this to send, ack, or nack within this transaction.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ITransaction {\n  /**\n   * You will need to access this to send, ack, or nack within this transaction.\n   */\n  id: string;\n\n  /**\n   * Commit this transaction. See [Client#commit]{@link Client#commit} for an example.\n   */\n  commit: () => void;\n\n  /**\n   * Abort this transaction. See [Client#abort]{@link Client#abort} for an example.\n   */\n  abort: () => void;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompConfig.html":{"url":"injectables/InjectableRxStompConfig.html","title":"injectable - InjectableRxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStompConfig with exactly same functionality.\nPlease see RxStompConfig for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nIf all fields of configuration are fixed and known in advance you would typically define\na const and inject it using value.\nIf some fields will be known by later, it can be injected using a factory function.\nOccasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStompConfig} with exactly same functionality.\n * Please see {@link RxStompConfig} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * If all fields of configuration are fixed and known in advance you would typically define\n * a `const` and inject it using value.\n *\n * If some fields will be known by later, it can be injected using a factory function.\n *\n * Occasionally it may need to be combined with Angular's APP_INITIALIZER mechanism.\n */\n@Injectable()\nexport class InjectableRxStompConfig extends RxStompConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/InjectableRxStompRpcConfig.html":{"url":"injectables/InjectableRxStompRpcConfig.html","title":"injectable - InjectableRxStompRpcConfig","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  InjectableRxStompRpcConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPCConfig.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\nimport {RxStompRPCConfig} from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPCConfig}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class InjectableRxStompRpcConfig extends RxStompRPCConfig { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStomp.html":{"url":"classes/RxStomp.html","title":"class - RxStomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp.ts\n        \n\n            \n                Description\n            \n            \n                This is the main Stomp Client.\nTypically you will create an instance of this to connect to the STOMP broker.\nThis wraps @stomp/stompjs\nClient class.\nThe key difference is that it exposes operations as RxJS Observables.\nFor example when a STOMP endpoint is subscribed it returns an Observable\nthat will stream all received messages.\nWith exception of beforeConnect, functionality related to all callbacks in\n@stomp/stompjs Client\nis exposed as Observables/Subjects/BehaviorSubjects.\nRxStomp also tries to transparently handle connection failures.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                connected$\n                            \n                            \n                                    Public\n                                connectionState$\n                            \n                            \n                                    Public\n                                serverHeaders$\n                            \n                            \n                                    Public\n                                stompErrors$\n                            \n                            \n                                    Public\n                                unhandledMessage$\n                            \n                            \n                                    Public\n                                unhandledReceipts$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                activate\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                connected\n                            \n                            \n                                    Public\n                                deactivate\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                watch\n                            \n                            \n                                    Public\n                                watchForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    stompClient\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp.ts:129\n                            \n                        \n\n                \n                    \n                            Constructor\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connected$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:53\n                            \n                        \n\n                \n                    \n                        Will trigger when connection is established.\nIt will trigger every time a (re)connection occurs.\nIf it is already connected it will trigger immediately.\nYou can safely ignore the value, as it will always be StompState.OPEN\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connectionState$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectionState$:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:45\n                            \n                        \n\n                \n                    \n                        Connection State\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            serverHeaders$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        serverHeaders$:     Observable\n\n                    \n                \n                    \n                        \n                            Type :     Observable\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:60\n                            \n                        \n\n                \n                    \n                        Provides headers from most recent connection to the server as returned by the CONNECTED frame.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will trigger for each reconnection.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stompErrors$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompErrors$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:102\n                            \n                        \n\n                \n                    \n                        It will stream all ERROR frames received from the STOMP Broker.\nA compliant STOMP Broker will close the connection after this type of frame.\nPlease check broker specific documentation for exact behavior.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onStompError\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledMessage$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledMessage$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:77\n                            \n                        \n\n                \n                    \n                        This function will be called for any unhandled messages.\nIt is useful for receiving messages sent to RabbitMQ temporary queues.\nIt can also get invoked with stray messages while the server is processing\na request to unsubscribe from an endpoint.\nThis Observer will yield the received\nMessage\nobjects.\nMaps to: Client#onUnhandledMessage\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unhandledReceipts$\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unhandledReceipts$:     Subject\n\n                    \n                \n                    \n                        \n                            Type :     Subject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:89\n                            \n                        \n\n                \n                    \n                        STOMP brokers can be requested to notify when an operation is actually completed.\nPrefer using RxStomp#watchForReceipt.\nThis Observer will yield the received\nFrame\nobjects.\nMaps to: Client#onUnhandledReceipt\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            activate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        activate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:226\n                            \n                        \n\n\n                \n                    \n                            Initiate the connection with the broker.\nIf the connection breaks, as per RxStompConfig#reconnectDelay,\nit will keep trying to reconnect.\nCall RxStomp#deactivate to disconnect and stop reconnection attempts.\nMaps to: Client#activate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(rxStompConfig: RxStompConfig)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:202\n                            \n                        \n\n\n                \n                    \n                            Set configuration. This method may be called multiple times.\nEach call will add to the existing configuration.\nExample:\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   *Maps to: Client#configure\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                        \n                                                                    RxStompConfig\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            connected\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        connected()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:280\n                            \n                        \n\n\n                \n                    \n                            It will return true if STOMP broker is connected and false otherwise.\n\n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            deactivate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        deactivate()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:261\n                            \n                        \n\n\n                \n                    \n                            Disconnect if connected and stop auto reconnect loop.\nAppropriate callbacks will be invoked if underlying STOMP connection was connected.\nTo reactivate you can call RxStomp#activate.\nMaps to: Client#deactivate\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(parameters: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:327\n                            \n                        \n\n\n                \n                    \n                            Send a message to a named destination. Refer to your STOMP broker documentation for types\nand naming of destinations.\nSTOMP protocol specifies and suggests some headers and also allows broker specific headers.\nbody must be String.\nYou will need to covert the payload to string in case it is not string (e.g. JSON).\nTo send a binary message body use binaryBody parameter. It should be a\nUint8Array.\nSometimes brokers may not support binary frames out of the box.\nPlease check your broker documentation.\ncontent-length header is automatically added to the STOMP Frame sent to the broker.\nSet skipContentLengthHeader to indicate that content-length header should not be added.\nFor binary messages content-length header is always added.\nCaution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\nand content-length header is missing.\nSee: publishParams\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   *The message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\nMaps to: Client#publish\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        parameters\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watch\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watch(destination: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:369\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nNote that messages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\nThis method in the underlying library is called subscribe.\nIn earlier version it was called subscribe here as well.\nHowever subscribe is also used by RxJS and code read quite strange with two subscribe calls\nfollowing each other and both meaning very different things.\nMaps to: Client#subscribe\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        destination\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            watchForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        watchForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:478\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        stompClient\n                    \n                \n\n                \n                    \n                        getstompClient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/rx-stomp/src/rx-stomp.ts:116\n                                \n                            \n                    \n                        \n                                Instance of actual\n@stomp/stompjs\nClient.\nBe careful in calling methods on it directly - you may get unintended consequences.\n\n\n                                \n                                    Returns :     Client\n\n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import {BehaviorSubject, Observable, Observer, Subject, Subscription} from 'rxjs';\n\nimport {filter, share} from 'rxjs/operators';\n\nimport {\n  Client,\n  debugFnType,\n  Frame,\n  Message,\n  publishParams,\n  StompConfig,\n  StompHeaders,\n  StompSubscription\n} from '@stomp/stompjs';\n\nimport {RxStompConfig} from './rx-stomp-config';\nimport {RxStompState} from './rx-stomp-state';\n\n/**\n * This is the main Stomp Client.\n * Typically you will create an instance of this to connect to the STOMP broker.\n *\n * This wraps [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n * {@link Client} class.\n *\n * The key difference is that it exposes operations as RxJS Observables.\n * For example when a STOMP endpoint is subscribed it returns an Observable\n * that will stream all received messages.\n *\n * With exception of beforeConnect, functionality related to all callbacks in\n * [@stomp/stompjs Client]{@link Client}\n * is exposed as Observables/Subjects/BehaviorSubjects.\n *\n * RxStomp also tries to transparently handle connection failures.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStomp {\n  /**\n   * Connection State\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public connectionState$: BehaviorSubject;\n\n  /**\n   * Will trigger when connection is established.\n   * It will trigger every time a (re)connection occurs.\n   * If it is already connected it will trigger immediately.\n   * You can safely ignore the value, as it will always be `StompState.OPEN`\n   */\n  public connected$: Observable;\n\n  /**\n   * Provides headers from most recent connection to the server as returned by the CONNECTED frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will trigger for each reconnection.\n   */\n  public serverHeaders$: Observable;\n\n  protected _serverHeadersBehaviourSubject$: BehaviorSubject;\n\n  /**\n   * This function will be called for any unhandled messages.\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\n   *\n   * It can also get invoked with stray messages while the server is processing\n   * a request to unsubscribe from an endpoint.\n   *\n   * This Observer will yield the received\n   * {@link Message}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}\n   */\n  public unhandledMessage$: Subject;\n\n  /**\n   * STOMP brokers can be requested to notify when an operation is actually completed.\n   * Prefer using [RxStomp#watchForReceipt]{@link RxStomp#watchForReceipt}.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}\n   */\n  public unhandledReceipts$: Subject;\n\n  /**\n   * It will stream all ERROR frames received from the STOMP Broker.\n   * A compliant STOMP Broker will close the connection after this type of frame.\n   * Please check broker specific documentation for exact behavior.\n   *\n   * This Observer will yield the received\n   * [Frame]{@link ../classes/Frame.html}\n   * objects.\n   *\n   * Maps to: [Client#onStompError]{@link Client#onStompError}\n   */\n  public stompErrors$: Subject;\n\n  /**\n   * Internal array to hold locally queued messages when STOMP broker is not connected.\n   */\n  protected _queuedMessages: publishParams[] = [];\n\n  /**\n   * Instance of actual\n   * [@stomp/stompjs]{@link https://github.com/stomp-js/stompjs}\n   * {@link Client}.\n   *\n   * **Be careful in calling methods on it directly - you may get unintended consequences.**\n   */\n  get stompClient(): Client {\n    return this._stompClient;\n  }\n  protected _stompClient: Client;\n\n  /**\n   * Before connect\n   */\n  protected _beforeConnect: () => void;\n\n  /**\n   * Will be assigned during configuration, no-op otherwise\n   */\n  protected _debug: debugFnType;\n\n  /**\n   * Constructor\n   */\n  public constructor() {\n    this._stompClient = new Client();\n\n    // Default messages\n    this._setupUnhandledMessages();\n\n    // Receipts\n    this._setupUnhandledReceipts();\n\n    const noOp = () => {};\n\n    // Before connect is no op by default\n    this._beforeConnect = noOp;\n\n    // debug is no-op by default\n    this._debug = noOp;\n\n    // Initial state is CLOSED\n    this.connectionState$ = new BehaviorSubject(RxStompState.CLOSED);\n\n    this.connected$ = this.connectionState$.pipe(\n      filter((currentState: RxStompState) => {\n        return currentState === RxStompState.OPEN;\n      })\n    );\n\n    // Setup sending queuedMessages\n    this.connected$.subscribe(() => {\n      this._sendQueuedMessages();\n    });\n\n    this._serverHeadersBehaviourSubject$ = new BehaviorSubject(null);\n\n    this.serverHeaders$ = this._serverHeadersBehaviourSubject$.pipe(\n      filter((headers: null | StompHeaders) => {\n        return headers !== null;\n      })\n    );\n\n    this.stompErrors$ = new Subject();\n  }\n\n  /**\n   * Set configuration. This method may be called multiple times.\n   * Each call will add to the existing configuration.\n   *\n   * Example:\n   *\n   * ```javascript\n   *        const rxStomp = new RxStomp();\n   *        rxStomp.configure({\n   *          brokerURL: 'ws://127.0.0.1:15674/ws',\n   *          connectHeaders: {\n   *            login: 'guest',\n   *            passcode: 'guest'\n   *          },\n   *          heartbeatIncoming: 0,\n   *          heartbeatOutgoing: 20000,\n   *          reconnectDelay: 200,\n   *          debug: (msg: string): void => {\n   *            console.log(new Date(), msg);\n   *          }\n   *        });\n   *        rxStomp.activate();\n   * ```\n   *\n   * Maps to: [Client#configure]{@link Client#configure}\n   */\n  public configure(rxStompConfig: RxStompConfig) {\n    const stompConfig: StompConfig = (Object as any).assign({}, rxStompConfig);\n\n    if (stompConfig.beforeConnect) {\n      this._beforeConnect = stompConfig.beforeConnect;\n      delete stompConfig.beforeConnect;\n    }\n\n    // RxStompConfig has subset of StompConfig fields\n    this._stompClient.configure(stompConfig);\n    if (stompConfig.debug) {\n      this._debug = stompConfig.debug;\n    }\n  }\n\n  /**\n   * Initiate the connection with the broker.\n   * If the connection breaks, as per [RxStompConfig#reconnectDelay]{@link RxStompConfig#reconnectDelay},\n   * it will keep trying to reconnect.\n   *\n   * Call [RxStomp#deactivate]{@link RxStomp#deactivate} to disconnect and stop reconnection attempts.\n   *\n   * Maps to: [Client#activate]{@link Client#activate}\n   */\n  public activate(): void {\n    this._stompClient.configure({\n      beforeConnect: () => {\n        this._changeState(RxStompState.CONNECTING);\n\n        // Call handler\n        this._beforeConnect();\n      },\n      onConnect: (frame: Frame) => {\n        this._serverHeadersBehaviourSubject$.next(frame.headers);\n\n        // Indicate our connected state to observers\n        this._changeState(RxStompState.OPEN);\n      },\n      onStompError: (frame: Frame) => {\n        // Trigger the frame subject\n        this.stompErrors$.next(frame);\n      },\n      onWebSocketClose: () => {\n        this._changeState(RxStompState.CLOSED);\n      }\n    });\n\n    // Attempt connection\n    this._stompClient.activate();\n  }\n\n  /**\n   * Disconnect if connected and stop auto reconnect loop.\n   * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n   *\n   * To reactivate you can call [RxStomp#activate]{@link RxStomp#activate}.\n   *\n   * Maps to: [Client#deactivate]{@link Client#deactivate}\n   */\n  public deactivate(): void {\n    // Disconnect if connected. Callback will set CLOSED state\n    this._stompClient.deactivate();\n\n    const stompState = this.connectionState$.getValue();\n    if (stompState === RxStompState.OPEN) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSING);\n    }\n    // This is bit tricky situation, it would be better handled at stompjs level\n    if (stompState === RxStompState.CONNECTING) {\n      // Notify observers that we are disconnecting!\n      this._changeState(RxStompState.CLOSED);\n    }\n  }\n\n  /**\n   * It will return `true` if STOMP broker is connected and `false` otherwise.\n   */\n  public connected(): boolean {\n    return this.connectionState$.getValue() === RxStompState.OPEN;\n  }\n\n  /**\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\n   * and naming of destinations.\n   *\n   * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n   *\n   * `body` must be String.\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\n   *\n   * To send a binary message body use binaryBody parameter. It should be a\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n   * Sometimes brokers may not support binary frames out of the box.\n   * Please check your broker documentation.\n   *\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n   * For binary messages `content-length` header is always added.\n   *\n   * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n   * and `content-length` header is missing.\n   *\n   * See: {@link publishParams}\n   *\n   * ```javascript\n   *        rxStomp.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n   *\n   *        // Only destination is mandatory parameter\n   *        rxStomp.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n   *\n   *        // Skip content-length header in the frame to the broker\n   *        rxStomp.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n   *\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n   *        // setting content-type header is not mandatory, however a good practice\n   *        rxStomp.publish({destination: '/topic/special', binaryBody: binaryData,\n   *                         headers: {'content-type': 'application/octet-stream'}});\n   * ```\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * Maps to: [Client#publish]{@link Client#publish}\n   */\n  public publish(parameters: publishParams): void {\n    if (this.connected()) {\n      this._stompClient.publish(parameters);\n    } else {\n      this._debug(`Not connected, queueing`);\n      this._queuedMessages.push(parameters);\n    }\n  }\n\n  /** It will send queued messages. */\n  protected _sendQueuedMessages(): void {\n    const queuedMessages = this._queuedMessages;\n    this._queuedMessages = [];\n\n    if (queuedMessages.length === 0) {\n      return;\n    }\n\n    this._debug(`Will try sending  ${queuedMessages.length} queued message(s)`);\n\n    for (const queuedMessage of queuedMessages) {\n      this._debug(`Attempting to send ${queuedMessage}`);\n      this.publish(queuedMessage);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * Note that messages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * This method in the underlying library is called `subscribe`.\n   * In earlier version it was called `subscribe` here as well.\n   * However `subscribe` is also used by RxJS and code read quite strange with two subscribe calls\n   * following each other and both meaning very different things.\n   *\n   * Maps to: [Client#subscribe]{@link Client#subscribe}\n   */\n  public watch(destination: string, headers: StompHeaders = {}): Observable {\n\n    /* Well the logic is complicated but works beautifully. RxJS is indeed wonderful.\n     *\n     * We need to activate the underlying subscription immediately if Stomp is connected. If not it should\n     * subscribe when it gets next connected. Further it should re establish the subscription whenever Stomp\n     * successfully reconnects.\n     *\n     * Actual implementation is simple, we filter the BehaviourSubject 'state' so that we can trigger whenever Stomp is\n     * connected. Since 'state' is a BehaviourSubject, if Stomp is already connected, it will immediately trigger.\n     *\n     * The observable that we return to caller remains same across all reconnects, so no special handling needed at\n     * the message subscriber.\n     */\n    this._debug(`Request to subscribe ${destination}`);\n\n    // By default auto acknowledgement of messages\n    if (!headers.ack) {\n      headers.ack = 'auto';\n    }\n\n    const coldObservable = Observable.create(\n      (messages: Observer) => {\n        /*\n         * These variables will be used as part of the closure and work their magic during unsubscribe\n         */\n        let stompSubscription: StompSubscription;\n\n        let stompConnectedSubscription: Subscription;\n\n        stompConnectedSubscription = this.connected$.subscribe(() => {\n            this._debug(`Will subscribe to ${destination}`);\n            stompSubscription = this._stompClient.subscribe(destination, (message: Message) => {\n                messages.next(message);\n              },\n              headers);\n          });\n\n        return () => { /* cleanup function, will be called when no subscribers are left */\n          this._debug(`Stop watching connection state (for ${destination})`);\n          stompConnectedSubscription.unsubscribe();\n\n          if (this.connected()) {\n            this._debug(`Will unsubscribe from ${destination} at Stomp`);\n            stompSubscription.unsubscribe();\n          } else {\n            this._debug(`Stomp not connected, no need to unsubscribe from ${destination} at Stomp`);\n          }\n        };\n      });\n\n    /**\n     * Important - convert it to hot Observable - otherwise, if the user code subscribes\n     * to this observable twice, it will subscribe twice to Stomp broker. (This was happening in the current example).\n     * A long but good explanatory article at https://medium.com/@benlesh/hot-vs-cold-observables-f8094ed53339\n     */\n    return coldObservable.pipe(share());\n  }\n\n  /**\n   * Setup streaming unhandled messages.\n   */\n  protected _setupUnhandledMessages(): void {\n    this.unhandledMessage$ = new Subject();\n\n    this._stompClient.onUnhandledMessage = (message: Message) => {\n      this.unhandledMessage$.next(message);\n    };\n  }\n\n  /**\n   * Setup streaming unhandled receipts.\n   */\n  protected _setupUnhandledReceipts(): void {\n    this.unhandledReceipts$ = new Subject();\n\n    this._stompClient.onUnhandledReceipt = (frame: Frame) => {\n      this.unhandledReceipts$.next(frame);\n    };\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.watchForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: '/topic/special', headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public watchForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    this._stompClient.watchForReceipt(receiptId, callback);\n  }\n\n  protected _changeState(state: RxStompState): void {\n    this.connectionState$.next(state);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompConfig.html":{"url":"classes/RxStompConfig.html","title":"class - RxStompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Represents a configuration object for RxSTOMP.\nInstance of this can be passed to RxStomp#configure\nAll the attributes of this calls are optional.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:107\n                            \n                        \n\n                \n                    \n                        Callback, invoked on before a connection connection to the STOMP broker.\nYou can change configuration of the rxStomp, which will impact the immediate connect.\nIt is valid to call RxStomp#decativate in this callback.\nMaps to: Client#beforeConnect\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:21\n                            \n                        \n\n                \n                    \n                        The URL for the STOMP broker to connect to.\nTypically like \"ws://broker.329broker.com:15674/ws\" or \"wss://broker.329broker.com:15674/ws\".\nOnly one of this or RxStompConfig#webSocketFactory need to be set.\nIf both are set, RxStompConfig#webSocketFactory will be used.\nMaps to: Client#brokerURL\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:90\n                            \n                        \n\n                \n                    \n                        Connection headers, important keys - login, passcode, host.\nThough STOMP 1.2 standard marks these keys to be present, check your broker documentation for\ndetails specific to your broker.\nMaps to: Client#connectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:37\n                            \n                        \n\n                \n                    \n                        Enable client debugging? \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:97\n                            \n                        \n\n                \n                    \n                        Disconnection headers.\nMaps to: Client#disconnectHeaders\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:74\n                            \n                        \n\n                \n                    \n                        Incoming heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:81\n                            \n                        \n\n                \n                    \n                        Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\nMaps to: Client#heartbeatOutgoing\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:67\n                            \n                        \n\n                \n                    \n                        automatically reconnect with delay in milliseconds, set to 0 to disable.\nMaps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:34\n                            \n                        \n\n                \n                    \n                        STOMP versions to attempt during STOMP handshake. By default versions 1.0, 1.1, and 1.2 are attempted.\nExample:\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   *Maps to: Client#stompVersions\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-config.ts:60\n                            \n                        \n\n                \n                    \n                        This function should return a WebSocket or a similar (e.g. SockJS) object.\nIf your STOMP Broker supports WebSockets, prefer setting Client#brokerURL.\nIf both this and Client#brokerURL are set, this will be used.\nExample:\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   *Maps to: Client#webSocketFactory\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {debugFnType, StompHeaders, Versions} from '@stomp/stompjs';\n\n/**\n * Represents a configuration object for RxSTOMP.\n * Instance of this can be passed to [RxStomp#configure]{@link RxStomp#configure}\n *\n * All the attributes of this calls are optional.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStompConfig {\n  /**\n   * The URL for the STOMP broker to connect to.\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\n   *\n   * Only one of this or [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} need to be set.\n   * If both are set, [RxStompConfig#webSocketFactory]{@link RxStompConfig#webSocketFactory} will be used.\n   *\n   * Maps to: [Client#brokerURL]{@link Client#brokerURL}\n   */\n  public brokerURL?: string;\n\n  /**\n   * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n   *\n   * Example:\n   * ```javascript\n   *        // Try only versions 1.0 and 1.1\n   *        rxStompConfig.stompVersions= new Versions(['1.0', '1.1']);\n   * ```\n   *\n   * Maps to: [Client#stompVersions]{@link Client#stompVersions}\n   */\n  public stompVersions?: Versions;\n\n  /** Enable client debugging? */\n  public debug?: debugFnType;\n\n  /**\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\n   *\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\n   *\n   * Example:\n   * ```javascript\n   *        // use a WebSocket\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\n   *        };\n   *\n   *        // Typical usage with SockJS\n   *        rxStompConfig.webSocketFactory= function () {\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\n   *        };\n   * ```\n   *\n   * Maps to: [Client#webSocketFactory]{@link Client#webSocketFactory}\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n   *\n   * Maps to: [Client#reconnectDelay]{@Client#reconnectDelay}\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatIncoming]{@Client#heartbeatIncoming}\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n   *\n   * Maps to: [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * Connection headers, important keys - `login`, `passcode`, `host`.\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\n   * details specific to your broker.\n   *\n   * Maps to: [Client#connectHeaders]{@link Client#connectHeaders}\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * Disconnection headers.\n   *\n   * Maps to: [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * Callback, invoked on before a connection connection to the STOMP broker.\n   *\n   * You can change configuration of the rxStomp, which will impact the immediate connect.\n   * It is valid to call [RxStomp#decativate]{@link RxStomp#deactivate} in this callback.\n   *\n   * Maps to: [Client#beforeConnect]{@link Client#beforeConnect}\n   */\n  public beforeConnect?: () => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPC.html":{"url":"classes/RxStompRPC.html","title":"class - RxStompRPC","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPC\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc.ts\n        \n\n            \n                Description\n            \n            \n                An implementation of Remote Procedure Call (RPC) using messaging.\nPlease see the guide for details.\nPrat of @stomp/rx-stomp\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                rpc\n                            \n                            \n                                    Public\n                                stream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStomp, stompRPCConfig?: RxStompRPCConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:25\n                            \n                        \n\n                \n                    \n                            Create an instance, see the guide for details.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStomp\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    RxStompRPCConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            rpc\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        rpc(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:44\n                            \n                        \n\n\n                \n                    \n                            Make an RPC request. See the guide for example.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stream\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stream(params: publishParams)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc.ts:52\n                            \n                        \n\n\n                \n                    \n                            Make an RPC stream request. See the guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        params\n                                                        \n                                                                    publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Observable, Observer, Subscription } from 'rxjs';\nimport { filter, first } from 'rxjs/operators';\n\nimport { UUID } from 'angular2-uuid';\n\nimport {Message, publishParams, StompHeaders} from '@stomp/stompjs';\n\nimport { RxStomp } from './rx-stomp';\nimport { RxStompRPCConfig, setupReplyQueueFnType } from './rx-stomp-rpc-config';\n\n/**\n * An implementation of Remote Procedure Call (RPC) using messaging.\n *\n * Please see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport class RxStompRPC {\n  private _replyQueueName = '/temp-queue/rpc-replies';\n\n  private _setupReplyQueue: setupReplyQueueFnType = () => {\n    return this.rxStomp.unhandledMessage$;\n  }\n\n  private _repliesObservable: Observable;\n\n  /**\n   * Create an instance, see the [guide](../additional-documentation/rpc---remote-procedure-call.html) for details.\n   */\n  constructor(private rxStomp: RxStomp, private stompRPCConfig?: RxStompRPCConfig) {\n    if (stompRPCConfig) {\n      if (stompRPCConfig.replyQueueName) {\n        this._replyQueueName = stompRPCConfig.replyQueueName;\n      }\n      if (stompRPCConfig.setupReplyQueue) {\n        this._setupReplyQueue = stompRPCConfig.setupReplyQueue;\n      }\n    }\n  }\n\n  /**\n   * Make an RPC request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html) for example.\n   */\n  public rpc(params: publishParams): Observable {\n    // We know there will be only one message in reply\n    return this.stream(params).pipe(first());\n  }\n\n  /**\n   * Make an RPC stream request. See the [guide](../additional-documentation/rpc---remote-procedure-call.html).\n   */\n  public stream(params: publishParams): Observable {\n    const headers: StompHeaders = (Object as any).assign({}, params.headers || {});\n    const {destination, body, binaryBody} = params;\n\n    if (!this._repliesObservable) {\n      this._repliesObservable = this._setupReplyQueue(this._replyQueueName, this.rxStomp);\n    }\n\n    return Observable.create(\n      (rpcObserver: Observer) => {\n        let defaultMessagesSubscription: Subscription;\n\n        const correlationId = UUID.UUID();\n\n        defaultMessagesSubscription = this._repliesObservable.pipe(filter((message: Message) => {\n          return message.headers['correlation-id'] === correlationId;\n        })).subscribe((message: Message) => {\n          rpcObserver.next(message);\n        });\n\n        // send an RPC request\n        headers['reply-to'] = this._replyQueueName;\n        headers['correlation-id'] = correlationId;\n\n        this.rxStomp.publish({destination, body, binaryBody, headers});\n\n        return () => { // Cleanup\n          defaultMessagesSubscription.unsubscribe();\n        };\n      }\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RxStompRPCConfig.html":{"url":"classes/RxStompRPCConfig.html","title":"class - RxStompRPCConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RxStompRPCConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n        \n\n            \n                Description\n            \n            \n                RPC Config. See the guide for example.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                replyQueueName\n                            \n                            \n                                    Public\n                                    Optional\n                                setupReplyQueue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            replyQueueName\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        replyQueueName:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:20\n                            \n                        \n\n                \n                    \n                        Name of the reply queue. See the guide for details.\nDefault /temp-queue/rpc-replies suitable for RabbitMQ and ActiveMQ.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            setupReplyQueue\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setupReplyQueue:     setupReplyQueueFnType\n\n                    \n                \n                    \n                        \n                            Type :     setupReplyQueueFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/rx-stomp/src/rx-stomp-rpc-config.ts:24\n                            \n                        \n\n                \n                    \n                        Setup the reply queue. See the guide for details.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Message } from '@stomp/stompjs';\nimport { Observable } from 'rxjs';\nimport { RxStomp } from './rx-stomp';\n\n/**\n * See the guide for example\n *\n * Prat of `@stomp/rx-stomp`\n */\nexport type setupReplyQueueFnType = (replyQueueName: string, rxStomp: RxStomp) => Observable;\n\n/**\n * RPC Config. See the guide for example.\n */\nexport class RxStompRPCConfig {\n  /**\n   * Name of the reply queue. See the guide for details.\n   * Default `/temp-queue/rpc-replies` suitable for RabbitMQ and ActiveMQ.\n   */\n  public replyQueueName?: string;\n  /**\n   * Setup the reply queue. See the guide for details.\n   */\n  public setupReplyQueue?: setupReplyQueueFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompRPCService.html":{"url":"injectables/RxStompRPCService.html","title":"injectable - RxStompRPCService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompRPCService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nInjectable version of RxStompRPC.\nSee guide at /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html\n\n            \n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rxStomp: RxStompService, stompRPCConfig?: InjectableRxStompRpcConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStomp\n                                                  \n                                                        \n                                                                    RxStompService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        stompRPCConfig\n                                                  \n                                                        \n                                                                    InjectableRxStompRpcConfig\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import {Injectable, Optional} from '@angular/core';\n\nimport {RxStompRPC} from '@stomp/rx-stomp';\nimport {RxStompService} from './rx-stomp.service';\nimport {InjectableRxStompRpcConfig} from './injectable-rx-stomp-rpc-config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * Injectable version of {@link RxStompRPC}.\n *\n * See guide at {@link /guide/rx-stomp/ng2-stompjs/2018/10/12/remote-procedure-call.html}\n */\n@Injectable()\nexport class RxStompRPCService extends RxStompRPC {\n  constructor(rxStomp: RxStompService, @Optional() stompRPCConfig?: InjectableRxStompRpcConfig) {\n    super(rxStomp, stompRPCConfig);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RxStompService.html":{"url":"injectables/RxStompService.html","title":"injectable - RxStompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RxStompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/rx-stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class is Injectable version of RxStomp with exactly same functionality.\nPlease see RxStomp for details.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\nSee also rxStompServiceFactory.\n\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { RxStomp } from '@stomp/rx-stomp';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * This class is Injectable version of {@link RxStomp} with exactly same functionality.\n * Please see {@link RxStomp} for details.\n *\n * See: {@link /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html}\n * for a step-by-step guide.\n *\n * See also {@link rxStompServiceFactory}.\n */\n@Injectable()\nexport class RxStompService extends RxStomp { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stomp.html":{"url":"classes/Stomp.html","title":"class - Stomp","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stomp\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/compatibility/stomp.ts\n        \n\n            \n                Description\n            \n            \n                STOMP Class, acts like a factory to create Client.\nPart of @stomp/stompjs.\nDeprecated\nIt will be removed in next major version. Please switch to Client.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                WebSocketClass\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                client\n                            \n                            \n                                    Static\n                                over\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            WebSocketClass\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        WebSocketClass:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:32\n                            \n                        \n\n                \n                    \n                        In case you need to use a non standard class for WebSocket.\nFor example when using within NodeJS environment:\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            client\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        client(url: string, protocols?: string[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:48\n                            \n                        \n\n\n                \n                    \n                            This method creates a WebSocket client that is connected to\nthe STOMP server located at the url.\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#brokerURL.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        protocols\n                                                        \n                                                                    string[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            over\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        over(ws: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/compatibility/stomp.ts:92\n                            \n                        \n\n\n                \n                    \n                            This method is an alternative to Stomp#client to let the user\nspecify the WebSocket to use (either a standard HTML5 WebSocket or\na similar object).\nIn order to support reconnection, the function Client._connect should be callable more than once.\nWhile reconnecting\na new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\nalternatively allows passing a function that should return a new instance of the underlying socket.\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   *Deprecated\nIt will be removed in next major version. Please switch to Client\nusing Client#webSocketFactory.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ws\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     CompatClient\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Versions} from '../versions';\nimport {CompatClient} from './compat-client';\n\n/**\n * STOMP Class, acts like a factory to create {@link Client}.\n *\n * Part of `@stomp/stompjs`.\n *\n * **Deprecated**\n *\n * It will be removed in next major version. Please switch to {@link Client}.\n */\nexport class Stomp {\n  /**\n   * In case you need to use a non standard class for WebSocket.\n   *\n   * For example when using within NodeJS environment:\n   *\n   * ```javascript\n   *        StompJs = require('../../esm5/');\n   *        Stomp = StompJs.Stomp;\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\n   * ```\n   *\n   * **Deprecated**\n   *\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  // tslint:disable-next-line:variable-name\n  public static WebSocketClass: any = null;\n\n  /**\n   * This method creates a WebSocket client that is connected to\n   * the STOMP server located at the url.\n   *\n   * ```javascript\n   *        var url = \"ws://localhost:61614/stomp\";\n   *        var client = Stomp.client(url);\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public static client(url: string, protocols?: string[]): CompatClient {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n\n    // See remarks on the function Stomp.over\n    if (protocols == null) { protocols = Versions.default.protocolVersions(); }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n\n    return new CompatClient(wsFn);\n  }\n\n  /**\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\n   * a similar object).\n   *\n   * In order to support reconnection, the function Client._connect should be callable more than once.\n   * While reconnecting\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\n   *\n   * ```javascript\n   *        var client = Stomp.over(function(){\n   *          return new WebSocket('ws://localhost:15674/ws')\n   *        });\n   * ```\n   *\n   * **Deprecated**\n   *\n   * It will be removed in next major version. Please switch to {@link Client}\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public static over(ws: any): CompatClient {\n    const wsFn = typeof(ws) === 'function' ? ws : () => ws;\n\n    return new CompatClient(wsFn);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompConfig.html":{"url":"classes/StompConfig.html","title":"class - StompConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration options for STOMP Client, each key corresponds to\nfield by the same name in Client. This can be passed to\nthe constructor of Client or to Client#configure.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Optional\n                                beforeConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                brokerURL\n                            \n                            \n                                    Public\n                                    Optional\n                                connectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                debug\n                            \n                            \n                                    Public\n                                    Optional\n                                disconnectHeaders\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatIncoming\n                            \n                            \n                                    Public\n                                    Optional\n                                heartbeatOutgoing\n                            \n                            \n                                    Public\n                                    Optional\n                                logRawCommunication\n                            \n                            \n                                    Public\n                                    Optional\n                                onConnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onDisconnect\n                            \n                            \n                                    Public\n                                    Optional\n                                onStompError\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledFrame\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledMessage\n                            \n                            \n                                    Public\n                                    Optional\n                                onUnhandledReceipt\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketClose\n                            \n                            \n                                    Public\n                                    Optional\n                                onWebSocketError\n                            \n                            \n                                    Public\n                                    Optional\n                                reconnectDelay\n                            \n                            \n                                    Public\n                                    Optional\n                                stompVersions\n                            \n                            \n                                    Public\n                                    Optional\n                                webSocketFactory\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            beforeConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        beforeConnect:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:77\n                            \n                        \n\n                \n                    \n                        See Client#beforeConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            brokerURL\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        brokerURL:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:22\n                            \n                        \n\n                \n                    \n                        See Client#brokerURL.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            connectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        connectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:52\n                            \n                        \n\n                \n                    \n                        See Client#connectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        debug:     debugFnType\n\n                    \n                \n                    \n                        \n                            Type :     debugFnType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:112\n                            \n                        \n\n                \n                    \n                        See Client#debug.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            disconnectHeaders\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        disconnectHeaders:     StompHeaders\n\n                    \n                \n                    \n                        \n                            Type :     StompHeaders\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:57\n                            \n                        \n\n                \n                    \n                        See Client#disconnectHeaders.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatIncoming\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatIncoming:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:42\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatIncoming.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            heartbeatOutgoing\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        heartbeatOutgoing:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:47\n                            \n                        \n\n                \n                    \n                        See Client#heartbeatOutgoing.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            logRawCommunication\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logRawCommunication:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:107\n                            \n                        \n\n                \n                    \n                        See Client#logRawCommunication.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onConnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:82\n                            \n                        \n\n                \n                    \n                        See Client#onConnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onDisconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onDisconnect:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:87\n                            \n                        \n\n                \n                    \n                        See Client#onDisconnect.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onStompError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onStompError:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:92\n                            \n                        \n\n                \n                    \n                        See Client#onStompError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledFrame\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledFrame:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:72\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledFrame.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledMessage\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledMessage:     messageCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     messageCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:62\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledMessage.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onUnhandledReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onUnhandledReceipt:     frameCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     frameCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:67\n                            \n                        \n\n                \n                    \n                        See Client#onUnhandledReceipt.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketClose\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onWebSocketClose:     closeEventCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     closeEventCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:97\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketClose.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            onWebSocketError\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        onWebSocketError:     wsErrorCallbackType\n\n                    \n                \n                    \n                        \n                            Type :     wsErrorCallbackType\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:102\n                            \n                        \n\n                \n                    \n                        See Client#onWebSocketError.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            reconnectDelay\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reconnectDelay:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:37\n                            \n                        \n\n                \n                    \n                        See Client#reconnectDelay.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            stompVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        stompVersions:     Versions\n\n                    \n                \n                    \n                        \n                            Type :     Versions\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:27\n                            \n                        \n\n                \n                    \n                        See See Client#stompVersions.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            webSocketFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        webSocketFactory:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-config.ts:32\n                            \n                        \n\n                \n                    \n                        See Client#webSocketFactory.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\nimport {\n  closeEventCallbackType,\n  debugFnType,\n  frameCallbackType,\n  messageCallbackType,\n  wsErrorCallbackType\n} from './types';\nimport {Versions} from './versions';\n\n/**\n * Configuration options for STOMP Client, each key corresponds to\n * field by the same name in {@link Client}. This can be passed to\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompConfig {\n  /**\n   * See [Client#brokerURL]{@link Client#brokerURL}.\n   */\n  public brokerURL?: string;\n\n  /**\n   * See See [Client#stompVersions]{@link Client#stompVersions}.\n   */\n  public stompVersions?: Versions;\n\n  /**\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   */\n  public webSocketFactory?: () => any;\n\n  /**\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\n   */\n  public reconnectDelay?: number;\n\n  /**\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\n   */\n  public heartbeatIncoming?: number;\n\n  /**\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n   */\n  public heartbeatOutgoing?: number;\n\n  /**\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\n   */\n  public connectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\n   */\n  public disconnectHeaders?: StompHeaders;\n\n  /**\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n   */\n  public onUnhandledMessage?: messageCallbackType;\n\n  /**\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n   */\n  public onUnhandledReceipt?: frameCallbackType;\n\n  /**\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\n   */\n  public onUnhandledFrame?: frameCallbackType;\n\n  /**\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\n   */\n  public beforeConnect?: () => void|Promise;\n\n  /**\n   * See [Client#onConnect]{@link Client#onConnect}.\n   */\n  public onConnect?: frameCallbackType;\n\n  /**\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\n   */\n  public onDisconnect?: frameCallbackType;\n\n  /**\n   * See [Client#onStompError]{@link Client#onStompError}.\n   */\n  public onStompError?: frameCallbackType;\n\n  /**\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\n   */\n  public onWebSocketClose?: closeEventCallbackType;\n\n  /**\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\n   */\n  public onWebSocketError?: wsErrorCallbackType;\n\n  /**\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\n   */\n  public logRawCommunication?: boolean;\n\n  /**\n   * See [Client#debug]{@link Client#debug}.\n   */\n  public debug?: debugFnType;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompHeaders.html":{"url":"classes/StompHeaders.html","title":"class - StompHeaders","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompHeaders\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-headers.ts\n        \n\n            \n                Description\n            \n            \n                STOMP headers. Many functions calls will accept headers as parameters.\nThe headers sent by Broker will be available as IFrame#headers.\nkey and value must be valid strings.\nIn addition, key must not contain CR, LF, or :.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    string\n\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/stomp-headers.ts:10\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        export class StompHeaders { [key: string]: string }\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompRService.html":{"url":"injectables/StompRService.html","title":"injectable - StompRService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompRService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp-r.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Raw Service using @stomp/stomp.js\nYou will only need the public properties and\nmethods listed unless you are an advanced user. This service handles subscribing to a\nmessage queue using the stomp.js library, and returns\nvalues via the ES6 Observable specification for\nasynchronous value streaming by wiring the STOMP\nmessages into an observable.\nIf you will like to pass the configuration as a dependency,\nplease use StompService class.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                state\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                disconnect\n                            \n                            \n                                    Public\n                                initAndConnect\n                            \n                            \n                                    Public\n                                publish\n                            \n                            \n                                    Public\n                                subscribe\n                            \n                            \n                                    Public\n                                waitForReceipt\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    connectObservable\n                                \n                                \n                                    serverHeadersObservable\n                                \n                                \n                                    defaultMessagesObservable\n                                \n                                \n                                    receiptsObservable\n                                \n                                \n                                    errorSubject\n                                \n                                \n                                    config\n                                \n                                \n                                    client\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor()\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:221\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            disconnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        disconnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:143\n                            \n                        \n\n\n                \n                    \n                            It will disconnect from the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            initAndConnect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        initAndConnect()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:132\n                            \n                        \n\n\n                \n                    \n                            It will connect to the STOMP broker.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            publish\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        publish(queueName: string | publishParams, message?: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:157\n                            \n                        \n\n\n                \n                    \n                            It will send a message to a named destination. The message must be string.\nThe message will get locally queued if the STOMP broker is not connected. It will attempt to\npublish queued messages as soon as the broker gets connected.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string | publishParams\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        message\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            subscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        subscribe(queueName: string, headers: StompHeaders)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:183\n                            \n                        \n\n\n                \n                    \n                            It will subscribe to server message queues\nThis method can be safely called even if the STOMP broker is not connected.\nIf the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\nIf a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\ndo not understand what it means, please leave it as is.\nNote that when working with temporary queues where the subscription request\ncreates the\nunderlying queue, mssages might be missed during reconnect. This issue is not specific\nto this library but the way STOMP brokers are designed to work.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Default value\n                                            \n                                        \n                                        \n                                                \n                                                        queueName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n\n                                                \n                                                \n                                                        headers\n                                                        \n                                                                    StompHeaders\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                {}\n                                                        \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Observable\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            waitForReceipt\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        waitForReceipt(receiptId: string, callback: (frame: Frame) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:215\n                            \n                        \n\n\n                \n                    \n                            STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\nTo request an acknowledgement, a receipt header needs to be sent with the actual request.\nThe value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\nrandom number or a combination may be used.\nA complaint broker will send a RECEIPT frame when an operation has actually been completed.\nThe operation needs to be matched based in the value of the receipt-id.\nThis method allow watching for a receipt and invoke the callback\nwhen corresponding receipt has been received.\nThe actual Frame\nwill be passed as parameter to the callback.\nExample:\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   *Maps to: Client#watchForReceipt\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        receiptId\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            state\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        state:     BehaviorSubject\n\n                    \n                \n                    \n                        \n                            Type :     BehaviorSubject\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:40\n                            \n                        \n\n                \n                    \n                        State of the STOMPService\nIt is a BehaviorSubject and will emit current status immediately. This will typically get\nused to show current status to the end user.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        connectObservable\n                    \n                \n\n                \n                    \n                        getconnectObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:63\n                                \n                            \n                    \n                        \n                                Will trigger when connection is established. Use this to carry out initialization.\nIt will trigger every time a (re)connection occurs. If it is already connected\nit will trigger immediately. You can safely ignore the value, as it will always be\nStompState.CONNECTED\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        serverHeadersObservable\n                    \n                \n\n                \n                    \n                        getserverHeadersObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:76\n                                \n                            \n                    \n                        \n                                Provides headers from most recent connection to the server as return by the CONNECTED\nframe.\nIf the STOMP connection has already been established it will trigger immediately.\nIt will additionally trigger in event of reconnection, the value will be set of headers from\nthe recent server response.\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        defaultMessagesObservable\n                    \n                \n\n                \n                    \n                        getdefaultMessagesObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:83\n                                \n                            \n                    \n                        \n                                Will emit all messages to the default queue (any message that are not handled by a subscription)\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        receiptsObservable\n                    \n                \n\n                \n                    \n                        getreceiptsObservable()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:90\n                                \n                            \n                    \n                        \n                                Will emit all receipts\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        errorSubject\n                    \n                \n\n                \n                    \n                        geterrorSubject()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:98\n                                \n                            \n                    \n                        \n                                Will trigger when an error occurs. This Subject can be used to handle errors from\nthe stomp broker.\n\n\n                                \n                                    Returns :     Subject\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        config\n                    \n                \n\n\n                \n                    \n                        setconfig(config)\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:103\n                                \n                            \n                    \n                        \n                                Set configuration \n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            config\n                                                    \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :     void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        client\n                    \n                \n\n                \n                    \n                        getclient()\n                    \n                \n                            \n                                \n                                    Defined in consolidated/ng2-stompjs/src/stomp-r.service.ts:219\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import {Injectable} from '@angular/core';\n\nimport {RxStomp, RxStompConfig, RxStompState} from '@stomp/rx-stomp';\n\nimport {publishParams, Client, Message, Frame} from '@stomp/stompjs';\n\nimport {BehaviorSubject, Observable, Subject} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\nimport {StompState} from './stomp-state';\nimport { StompHeaders } from './stomp-headers';\nimport {StompConfig} from './stomp.config';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Raw Service using @stomp/stomp.js\n *\n * You will only need the public properties and\n * methods listed unless you are an advanced user. This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you will like to pass the configuration as a dependency,\n * please use StompService class.\n */\n@Injectable()\nexport class StompRService extends RxStomp {\n  /**\n   * State of the STOMPService\n   *\n   * It is a BehaviorSubject and will emit current status immediately. This will typically get\n   * used to show current status to the end user.\n   */\n  public state: BehaviorSubject;\n\n  private static _mapStompState(st: RxStompState): StompState {\n    if (st === RxStompState.CONNECTING) {\n      return StompState.TRYING;\n    }\n    if (st === RxStompState.OPEN) {\n      return StompState.CONNECTED;\n    }\n    if (st === RxStompState.CLOSING) {\n      return StompState.DISCONNECTING;\n    }\n    if (st === RxStompState.CLOSED) {\n      return StompState.CLOSED;\n    }\n  }\n\n  /**\n   * Will trigger when connection is established. Use this to carry out initialization.\n   * It will trigger every time a (re)connection occurs. If it is already connected\n   * it will trigger immediately. You can safely ignore the value, as it will always be\n   * StompState.CONNECTED\n   */\n  get connectObservable(): Observable {\n    return this.connected$.pipe(map((st: RxStompState): StompState => {\n      return StompRService._mapStompState(st);\n    }));\n  }\n\n  /**\n   * Provides headers from most recent connection to the server as return by the CONNECTED\n   * frame.\n   * If the STOMP connection has already been established it will trigger immediately.\n   * It will additionally trigger in event of reconnection, the value will be set of headers from\n   * the recent server response.\n   */\n  get serverHeadersObservable(): Observable {\n    return this.serverHeaders$;\n  }\n\n  /**\n   * Will emit all messages to the default queue (any message that are not handled by a subscription)\n   */\n  get defaultMessagesObservable(): Subject {\n    return this.unhandledMessage$;\n  }\n\n  /**\n   * Will emit all receipts\n   */\n  get receiptsObservable(): Subject {\n    return this.unhandledReceipts$;\n  }\n\n  /**\n   * Will trigger when an error occurs. This Subject can be used to handle errors from\n   * the stomp broker.\n   */\n  get errorSubject(): Subject {\n    return this.stompErrors$;\n  }\n\n  /** Set configuration */\n  set config(config: StompConfig) {\n    const rxStompConfig: RxStompConfig = { };\n\n    if (typeof(config.url) === 'string') {\n      rxStompConfig.brokerURL = config.url;\n    } else {\n      rxStompConfig.webSocketFactory = config.url;\n    }\n\n    // Configure client heart-beating\n    rxStompConfig.heartbeatIncoming = config.heartbeat_in;\n    rxStompConfig.heartbeatOutgoing = config.heartbeat_out;\n\n    // Auto reconnect\n    rxStompConfig.reconnectDelay = config.reconnect_delay;\n\n    if (config.debug) {\n      rxStompConfig.debug = (str: string): void => {\n        console.log(new Date(), str);\n      };\n    }\n\n    rxStompConfig.connectHeaders = config.headers;\n\n    this.configure(rxStompConfig);\n  }\n  /**\n   * It will connect to the STOMP broker.\n   */\n  public initAndConnect(): void {\n    // disconnect if connected\n    this.deactivate();\n\n    // Attempt connection, passing in a callback\n    this.activate();\n  }\n\n  /**\n   * It will disconnect from the STOMP broker.\n   */\n  public disconnect(): void {\n    this.deactivate();\n  }\n\n  /**\n   * It will send a message to a named destination. The message must be `string`.\n   *\n   * The message will get locally queued if the STOMP broker is not connected. It will attempt to\n   * publish queued messages as soon as the broker gets connected.\n   *\n   * @param queueName\n   * @param message\n   * @param headers\n   */\n  public publish(queueName: string|publishParams, message?: string, headers: StompHeaders = {}): void {\n    if (typeof queueName === 'string') {\n      super.publish({destination: queueName as string, body: message, headers});\n    } else {\n      const pubParams: publishParams = queueName;\n      super.publish(pubParams);\n    }\n  }\n\n  /**\n   * It will subscribe to server message queues\n   *\n   * This method can be safely called even if the STOMP broker is not connected.\n   * If the underlying STOMP connection drops and reconnects, it will resubscribe automatically.\n   *\n   * If a header field 'ack' is not explicitly passed, 'ack' will be set to 'auto'. If you\n   * do not understand what it means, please leave it as is.\n   *\n   * Note that when working with temporary queues where the subscription request\n   * creates the\n   * underlying queue, mssages might be missed during reconnect. This issue is not specific\n   * to this library but the way STOMP brokers are designed to work.\n   *\n   * @param queueName\n   * @param headers\n   */\n  public subscribe(queueName: string, headers: StompHeaders = {}): Observable {\n    return this.watch(queueName, headers);\n  }\n\n  /**\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n   * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n   * random number or a combination may be used.\n   *\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n   * The operation needs to be matched based in the value of the receipt-id.\n   *\n   * This method allow watching for a receipt and invoke the callback\n   * when corresponding receipt has been received.\n   *\n   * The actual {@link Frame}\n   * will be passed as parameter to the callback.\n   *\n   * Example:\n   * ```javascript\n   *        // Publishing with acknowledgement\n   *        let receiptId = randomText();\n   *\n   *        rxStomp.waitForReceipt(receiptId, function() {\n   *          // Will be called after server acknowledges\n   *        });\n   *        rxStomp.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n   * ```\n   *\n   * Maps to: [Client#watchForReceipt]{@link Client#watchForReceipt}\n   */\n  public waitForReceipt(receiptId: string, callback: (frame: Frame) => void): void {\n    super.watchForReceipt(receiptId, callback);\n  }\n\n  get client(): Client {\n    return this._stompClient;\n  }\n\n  public constructor() {\n    super();\n\n    this.state = new BehaviorSubject(StompState.CLOSED);\n\n    this.connectionState$.subscribe((st: RxStompState) => {\n      this.state.next(StompRService._mapStompState(st));\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StompService.html":{"url":"injectables/StompService.html","title":"injectable - StompService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  StompService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/ng2-stompjs/src/stomp.service.ts\n        \n\n            \n                Description\n            \n            \n                Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompService with rxStompServiceFactory.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nAngular2 STOMP Service using @stomp/stomp.js\n\n            \n\n            \n                Example\n            \n            \n            \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(config: StompConfig)\n                    \n                \n                        \n                            \n                                Defined in consolidated/ng2-stompjs/src/stomp.service.ts:25\n                            \n                        \n\n                \n                    \n                            Constructor\nSee README and samples for configuration examples\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    StompConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\nimport { StompConfig } from './stomp.config';\n\nimport { StompRService } from './stomp-r.service';\n\n/**\n * Part of `@stomp/ng2-stompjs`.\n *\n * **This class has been deprecated in favor of {@link RxStompService} with {@link rxStompServiceFactory}.\n * It will be dropped `@stomp/ng2-stompjs@8.x.x`.**\n *\n * Angular2 STOMP Service using @stomp/stomp.js\n *\n * @description This service handles subscribing to a\n * message queue using the stomp.js library, and returns\n * values via the ES6 Observable specification for\n * asynchronous value streaming by wiring the STOMP\n * messages into an observable.\n *\n * If you want to manually configure and initialize the service\n * please use StompRService\n */\n@Injectable()\nexport class StompService extends StompRService {\n\n  /**\n   * Constructor\n   *\n   * See README and samples for configuration examples\n   */\n  public constructor(config: StompConfig) {\n    super();\n\n    this.config = config;\n    this.initAndConnect();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StompSubscription.html":{"url":"classes/StompSubscription.html","title":"class - StompSubscription","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StompSubscription\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/stomp-subscription.ts\n        \n\n            \n                Description\n            \n            \n                Call Client#subscribe to create a StompSubscription.\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                unsubscribe\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            id\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        id:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:12\n                            \n                        \n\n                \n                    \n                        Id associated with this subscription.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            unsubscribe\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unsubscribe:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/stomp-subscription.ts:17\n                            \n                        \n\n                \n                    \n                        Unsubscribe. See Client#unsubscribe for an example.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {StompHeaders} from './stomp-headers';\n\n/**\n * Call [Client#subscribe]{@link Client#subscribe} to create a StompSubscription.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class StompSubscription {\n  /**\n   * Id associated with this subscription.\n   */\n  public id: string;\n\n  /**\n   * Unsubscribe. See [Client#unsubscribe]{@link Client#unsubscribe} for an example.\n   */\n  public unsubscribe: (headers?: StompHeaders) => void;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Versions.html":{"url":"classes/Versions.html","title":"class - Versions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Versions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            consolidated/stompjs/src/versions.ts\n        \n\n            \n                Description\n            \n            \n                Supported STOMP versions\nPart of @stomp/stompjs.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                V1_0\n                            \n                            \n                                    Static\n                                V1_1\n                            \n                            \n                                    Static\n                                V1_2\n                            \n                            \n                                    Public\n                                versions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                protocolVersions\n                            \n                            \n                                    Public\n                                supportedVersions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(versions: string[])\n                    \n                \n                        \n                            \n                                Defined in consolidated/stompjs/src/versions.ts:23\n                            \n                        \n\n                \n                    \n                            Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\nYou will an instance if this class if you want to override supported versions to be declared during\nSTOMP handshake.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        versions\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_0\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_0:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.0'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:10\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.0\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_1\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_1:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.1'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:14\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.1\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            V1_2\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        V1_2:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : '1.2'\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:18\n                            \n                        \n\n                \n                    \n                        Indicates protocol version 1.2\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            versions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        versions:     string[]\n\n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:31\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            protocolVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        protocolVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:44\n                            \n                        \n\n\n                \n                    \n                            Used while creating a WebSocket\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            supportedVersions\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        supportedVersions()\n                    \n                \n\n\n                        \n                            \n                                    Defined in consolidated/stompjs/src/versions.ts:37\n                            \n                        \n\n\n                \n                    \n                            Used as part of CONNECT STOMP Frame\n\n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class Versions {\n  /**\n   * Indicates protocol version 1.0\n   */\n  public static V1_0 = '1.0';\n  /**\n   * Indicates protocol version 1.1\n   */\n  public static V1_1 = '1.1';\n  /**\n   * Indicates protocol version 1.2\n   */\n  public static V1_2 = '1.2';\n\n  /**\n   * @internal\n   */\n  public static default = new Versions([Versions.V1_0, Versions.V1_1, Versions.V1_2]);\n\n  /**\n   * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n   *\n   * You will an instance if this class if you want to override supported versions to be declared during\n   * STOMP handshake.\n   */\n  constructor(public versions: string[]) {\n  }\n\n  /**\n   * Used as part of CONNECT STOMP Frame\n   */\n  public supportedVersions() {\n    return this.versions.join(',');\n  }\n\n  /**\n   * Used while creating a WebSocket\n   */\n  public protocolVersions() {\n    return this.versions.map((x) => `v${x.replace('.', '')}.stomp`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/injectable-rx-stomp-rpc-config.ts\n            \n            \n                injectable\n            \n            \n                InjectableRxStompRpcConfig\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-rpc.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompRPCService\n            \n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n            \n            \n                function\n            \n            \n                rxStompServiceFactory\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/rx-stomp.service.ts\n            \n            \n                injectable\n            \n            \n                RxStompService\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp-r.service.ts\n            \n            \n                injectable\n            \n            \n                StompRService\n            \n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                consolidated/ng2-stompjs/src/stomp.service.ts\n            \n            \n                injectable\n            \n            \n                StompService\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-config.ts\n            \n            \n                class\n            \n            \n                RxStompConfig\n            \n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n            \n            \n                class\n            \n            \n                RxStompRPCConfig\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp-rpc.ts\n            \n            \n                class\n            \n            \n                RxStompRPC\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/rx-stomp/src/rx-stomp.ts\n            \n            \n                class\n            \n            \n                RxStomp\n            \n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/client.ts\n            \n            \n                class\n            \n            \n                Client\n            \n            \n                100 %\n                (33/33)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/compat-client.ts\n            \n            \n                class\n            \n            \n                CompatClient\n            \n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/compatibility/stomp.ts\n            \n            \n                class\n            \n            \n                Stomp\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-frame.ts\n            \n            \n                interface\n            \n            \n                IFrame\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-message.ts\n            \n            \n                interface\n            \n            \n                IMessage\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/i-transaction.ts\n            \n            \n                interface\n            \n            \n                ITransaction\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-config.ts\n            \n            \n                class\n            \n            \n                StompConfig\n            \n            \n                100 %\n                (20/20)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-headers.ts\n            \n            \n                class\n            \n            \n                StompHeaders\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/stomp-subscription.ts\n            \n            \n                class\n            \n            \n                StompSubscription\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/types.ts\n            \n            \n                interface\n            \n            \n                IPublishParams\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                consolidated/stompjs/src/versions.ts\n            \n            \n                class\n            \n            \n                Versions\n            \n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.6\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RxStompState   (consolidated/.../rx-stomp-state.ts)\n                        \n                        \n                            StompState   (consolidated/.../stomp-state.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/rx-stomp/src/rx-stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        RxStompState\n                    \n                \n                    \n                        \n                            Possible states for the RxStomp\nPrat of @stomp/rx-stomp\n\n                        \n                    \n                        \n                            \n                                 CONNECTING\n                            \n                        \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                 CLOSING\n                            \n                        \n                        \n                            \n                                 CLOSED\n                            \n                        \n            \n        \n\n    consolidated/ng2-stompjs/src/stomp-state.ts\n    \n        \n            \n                \n                    \n                        \n                        StompState\n                    \n                \n                    \n                        \n                            Part of @stomp/ng2-stompjs.\nThis class has been deprecated in favor of RxStompState.\nIt will be dropped @stomp/ng2-stompjs@8.x.x.\nPossible states for the STOMP service\n\n                        \n                    \n                        \n                            \n                                 CLOSED\n                            \n                        \n                        \n                            \n                                 TRYING\n                            \n                        \n                        \n                            \n                                 CONNECTED\n                            \n                        \n                        \n                            \n                                 DISCONNECTING\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            rxStompServiceFactory   (consolidated/.../rx-stomp-service-factory.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/ng2-stompjs/src/rx-stomp-service-factory.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            rxStompServiceFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nrxStompServiceFactory(rxStompConfig)\n                    \n                \n\n\n\n\n                \n                    \n                            Part of @stomp/ng2-stompjs.\nThis is factory function that can create RxStompService\nwhen configuration is already known.\nYou can use this function for defining provider for RxStompService.\nRxStompService created using this function is configured and activated.\nThis provides the simplest mechanism to define RxStompService for Dependency Injection.\nSee: /guide/ng2-stompjs/2018/11/04/ng2-stomp-with-angular7.html\nfor a step-by-step guide.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rxStompConfig\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            closeEventCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            debugFnType   (consolidated/.../types.ts)\n                        \n                        \n                            Frame   (consolidated/.../i-frame.ts)\n                        \n                        \n                            frameCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            Message   (consolidated/.../i-message.ts)\n                        \n                        \n                            messageCallbackType   (consolidated/.../types.ts)\n                        \n                        \n                            publishParams   (consolidated/.../types.ts)\n                        \n                        \n                            setupReplyQueueFnType   (consolidated/.../rx-stomp-rpc-config.ts)\n                        \n                        \n                            wsErrorCallbackType   (consolidated/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    consolidated/stompjs/src/types.ts\n    \n        \n            \n                \n                    \n                        \n                        closeEventCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a CloseEvent\nas parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        closeEventCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        debugFnType\n                    \n                \n                    \n                        \n                            This callback will receive a string as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        debugFnType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        frameCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a IFrame as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        frameCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        messageCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive a IMessage as parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        messageCallbackType:     function\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        publishParams\n                    \n                \n                    \n                        \n                            Backward compatibility, switch to IPublishParams.\n\n                        \n                    \n                \n                    \n                        publishParams:     IPublishParams\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        wsErrorCallbackType\n                    \n                \n                    \n                        \n                            This callback will receive an Event\nas parameter.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        wsErrorCallbackType:     function\n\n                    \n                \n            \n        \n\n    consolidated/stompjs/src/i-frame.ts\n    \n        \n            \n                \n                    \n                        \n                        Frame\n                    \n                \n                    \n                        \n                            Alias for IFrame\n\n                        \n                    \n                \n                    \n                        Frame:     IFrame\n\n                    \n                \n            \n        \n\n    consolidated/stompjs/src/i-message.ts\n    \n        \n            \n                \n                    \n                        \n                        Message\n                    \n                \n                    \n                        \n                            Aliased to IMessage.\nPart of @stomp/stompjs.\n\n                        \n                    \n                \n                    \n                        Message:     IMessage\n\n                    \n                \n            \n        \n\n    consolidated/rx-stomp/src/rx-stomp-rpc-config.ts\n    \n        \n            \n                \n                    \n                        \n                        setupReplyQueueFnType\n                    \n                \n                    \n                        \n                            See the guide for example\nPrat of @stomp/rx-stomp\n\n                        \n                    \n                \n                    \n                        setupReplyQueueFnType:     function\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
